--- dbg/find14/find/gnulib-cvs/gnulib/lib/readutmp.h	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/readutmp.h	2020-01-28 23:39:42.000000000 -0600
@@ -1,7 +1,6 @@
 /* Declarations for GNU's read utmp module.
 
-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
-   2001, 2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1992-2007 Free Software Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -15,7 +14,7 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
 /* Written by jla; revised by djm */
 
@@ -31,11 +30,16 @@
 #  undef HAVE_UTMPX_H
 # endif
 
-# ifdef HAVE_UTMPX_H
-#  ifdef HAVE_UTMP_H
+# if HAVE_UTMPX_H
+#  if HAVE_UTMP_H
     /* HPUX 10.20 needs utmp.h, for the definition of e.g., UTMP_FILE.  */
 #   include <utmp.h>
 #  endif
+#  if defined _THREAD_SAFE && defined UTMP_DATA_INIT
+    /* When including both utmp.h and utmpx.h on AIX 4.3, with _THREAD_SAFE
+       defined, work around the duplicate struct utmp_data declaration.  */
+#   define utmp_data gl_aix_4_3_workaround_utmp_data
+#  endif
 #  include <utmpx.h>
 #  define UTMP_STRUCT_NAME utmpx
 #  define UT_TIME_MEMBER(UT_PTR) ((UT_PTR)->ut_tv.tv_sec)
@@ -66,7 +70,8 @@
 #   endif
 #  endif
 
-# else
+# elif HAVE_UTMP_H
+
 #  include <utmp.h>
 #  if !HAVE_DECL_GETUTENT
     struct utmp *getutent();
@@ -103,7 +108,7 @@
 # endif
 
 /* Accessor macro for the member named ut_user or ut_name.  */
-# ifdef HAVE_UTMPX_H
+# if HAVE_UTMPX_H
 
 #  if HAVE_STRUCT_UTMPX_UT_USER
 #   define UT_USER(Utmp) ((Utmp)->ut_user)
@@ -113,7 +118,7 @@
 #   define UT_USER(Utmp) ((Utmp)->ut_name)
 #  endif
 
-# else
+# elif HAVE_UTMP_H
 
 #  if HAVE_STRUCT_UTMP_UT_USER
 #   define UT_USER(Utmp) ((Utmp)->ut_user)
@@ -141,11 +146,11 @@ typedef struct UTMP_STRUCT_NAME STRUCT_U
 
 enum { UT_USER_SIZE = sizeof UT_USER ((STRUCT_UTMP *) 0) };
 
-# if !defined (UTMP_FILE) && defined (_PATH_UTMP)
+# if !defined UTMP_FILE && defined _PATH_UTMP
 #  define UTMP_FILE _PATH_UTMP
 # endif
 
-# if !defined (WTMP_FILE) && defined (_PATH_WTMP)
+# if !defined WTMP_FILE && defined _PATH_WTMP
 #  define WTMP_FILE _PATH_WTMP
 # endif
 
@@ -167,6 +172,12 @@ enum { UT_USER_SIZE = sizeof UT_USER ((S
 #  define WTMP_FILE "/etc/wtmp"
 # endif
 
+# if HAVE_STRUCT_XTMP_UT_PID
+#  define UT_PID(U) ((U)->ut_pid)
+# else
+#  define UT_PID(U) 0
+# endif
+
 # if HAVE_STRUCT_UTMP_UT_TYPE || HAVE_STRUCT_UTMPX_UT_TYPE
 #  define UT_TYPE_EQ(U, V) ((U)->ut_type == (V))
 #  define UT_TYPE_NOT_DEFINED 0
@@ -192,7 +203,15 @@ enum { UT_USER_SIZE = sizeof UT_USER ((S
     && (UT_TYPE_USER_PROCESS (U)				\
         || (UT_TYPE_NOT_DEFINED && UT_TIME_MEMBER (U) != 0)))
 
+/* Options for read_utmp.  */
+enum
+  {
+    READ_UTMP_CHECK_PIDS = 1,
+    READ_UTMP_USER_PROCESS = 2
+  };
+
 char *extract_trimmed_name (const STRUCT_UTMP *ut);
-int read_utmp (const char *filename, size_t *n_entries, STRUCT_UTMP **utmp_buf);
+int read_utmp (char const *file, size_t *n_entries, STRUCT_UTMP **utmp_buf,
+	       int options);
 
 #endif /* __READUTMP_H__ */
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/realloc.c dbg/find6/find/gnulib-cvs/gnulib/lib/realloc.c
