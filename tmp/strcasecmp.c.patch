--- dbg/find14/find/gnulib-cvs/gnulib/lib/strcasecmp.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/strcasecmp.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,5 +1,5 @@
-/* strcasecmp.c -- case insensitive string comparator
-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.
+/* Case-insensitive string comparison function.
+   Copyright (C) 1998-1999, 2005-2007 Free Software Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -13,40 +13,31 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
-#if HAVE_CONFIG_H
-# include <config.h>
-#endif
-
-#ifdef LENGTH_LIMIT
-# define STRXCASECMP_FUNCTION strncasecmp
-# define STRXCASECMP_DECLARE_N , size_t n
-# define LENGTH_LIMIT_EXPR(Expr) Expr
-#else
-# define STRXCASECMP_FUNCTION strcasecmp
-# define STRXCASECMP_DECLARE_N /* empty */
-# define LENGTH_LIMIT_EXPR(Expr) 0
-#endif
+#include <config.h>
+
+/* Specification.  */
+#include <string.h>
 
-#include <stddef.h>
 #include <ctype.h>
+#include <limits.h>
 
 #define TOLOWER(Ch) (isupper (Ch) ? tolower (Ch) : (Ch))
 
-/* Compare {{no more than N characters of }}strings S1 and S2,
-   ignoring case, returning less than, equal to or
-   greater than zero if S1 is lexicographically less
-   than, equal to or greater than S2.  */
+/* Compare strings S1 and S2, ignoring case, returning less than, equal to or
+   greater than zero if S1 is lexicographically less than, equal to or greater
+   than S2.
+   Note: This function does not work with multibyte strings!  */
 
 int
-STRXCASECMP_FUNCTION (const char *s1, const char *s2 STRXCASECMP_DECLARE_N)
+strcasecmp (const char *s1, const char *s2)
 {
-  register const unsigned char *p1 = (const unsigned char *) s1;
-  register const unsigned char *p2 = (const unsigned char *) s2;
+  const unsigned char *p1 = (const unsigned char *) s1;
+  const unsigned char *p2 = (const unsigned char *) s2;
   unsigned char c1, c2;
 
-  if (p1 == p2 || LENGTH_LIMIT_EXPR (n == 0))
+  if (p1 == p2)
     return 0;
 
   do
@@ -54,7 +45,7 @@ STRXCASECMP_FUNCTION (const char *s1, co
       c1 = TOLOWER (*p1);
       c2 = TOLOWER (*p2);
 
-      if (LENGTH_LIMIT_EXPR (--n == 0) || c1 == '\0')
+      if (c1 == '\0')
 	break;
 
       ++p1;
@@ -62,5 +53,11 @@ STRXCASECMP_FUNCTION (const char *s1, co
     }
   while (c1 == c2);
 
-  return c1 - c2;
+  if (UCHAR_MAX <= INT_MAX)
+    return c1 - c2;
+  else
+    /* On machines where 'char' and 'int' are types of the same size, the
+       difference of two 'unsigned char' values - including the sign bit -
+       doesn't fit in an 'int'.  */
+    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
 }
Only in dbg/find14/find/gnulib-cvs/gnulib/lib: strcase.h
Only in dbg/find6/find/gnulib-cvs/gnulib/lib: strcasestr.c
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/strchrnul.c dbg/find6/find/gnulib-cvs/gnulib/lib/strchrnul.c
