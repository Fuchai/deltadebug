--- dbg/find14/find/lib/buildcmd.h	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/lib/buildcmd.h	2020-01-28 23:39:42.000000000 -0600
@@ -13,7 +13,7 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
    USA.
 */
 /*
@@ -37,26 +37,44 @@ struct buildcmd_state
   char *argbuf;
   
   /* Number of chars being used in `cmd_argv'.  */
-  int cmd_argv_chars;
+  size_t cmd_argv_chars;
 
   /* Number of chars being used in `cmd_argv' for the initial args..  */
-  int cmd_initial_argv_chars;
+  size_t cmd_initial_argv_chars;
 
   /* User context information. */
   void *usercontext;
 
   /* to-do flag. */
   int todo;
-};
 
+  /* Directory in which to perform the exec. */
+  int dirfd;
+};
 
 struct buildcmd_control
 {
   /* If true, exit if lines_per_exec or args_per_exec is exceeded.  */
   int exit_if_size_exceeded; /* false */
+
+  /* POSIX limits on the argument length. */
+  size_t posix_arg_size_max;
+  size_t posix_arg_size_min;
   
   /* The maximum number of characters that can be used per command line.  */
-  long arg_max;
+  size_t arg_max;
+
+  /* max_arg_count: the maximum number of arguments that can be used.
+   *
+   * Many systems include the size of the pointers in ARG_MAX.
+   * Linux on PPC fails if we just subtract 1 here.
+   *
+   * However, not all systems define ARG_MAX.  Our bc_get_arg_max()
+   * function returns a useful value even if ARG_MAX is not defined.
+   * However, sometimes, max_arg_count is LONG_MAX!
+   */
+  long max_arg_count;
+
   
   /* The length of `replace_pat'.  */
   size_t rplen;
@@ -78,10 +96,16 @@ struct buildcmd_control
   long lines_per_exec;		/* 0 */
   
   /* The maximum number of arguments to use per command line.  */
-  long args_per_exec;		/* 1024 */
+  long args_per_exec;
 };
 
+enum BC_INIT_STATUS 
+  {
+    BC_INIT_OK = 0,
+    BC_INIT_ENV_TOO_BIG
+  };
 
+extern size_t bc_size_of_environment (void);
 
 
 extern void bc_do_insert (const struct buildcmd_control *ctl,
@@ -97,11 +121,12 @@ extern void bc_push_arg (const struct bu
 			 const char *prefix, size_t pfxlen,
 			 int initial_args);
 
-extern void bc_init_state(const struct buildcmd_control *ctl,
-			  struct buildcmd_state *state,
-			  void *usercontext);
-extern void bc_init_controlinfo(struct buildcmd_control *ctl);
-extern long bc_get_arg_max(void);
+extern void  bc_init_state(const struct buildcmd_control *ctl,
+			   struct buildcmd_state *state,
+			   void *usercontext);
+extern enum BC_INIT_STATUS bc_init_controlinfo(struct buildcmd_control *ctl);
+extern size_t bc_get_arg_max(void);
+extern void bc_use_sensible_arg_max(struct buildcmd_control *ctl);
 extern void bc_clear_args(const struct buildcmd_control *ctl,
 			  struct buildcmd_state *state);
 
Binary files dbg/find14/find/lib/buildcmd.o and dbg/find6/find/lib/buildcmd.o differ
diff -up -r dbg/find14/find/lib/.cvsignore dbg/find6/find/lib/.cvsignore
