--- dbg/find14/find/gnulib-cvs/gnulib/lib/savedir.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/savedir.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,7 +1,7 @@
 /* savedir.c -- save the list of files in a directory in a string
 
-   Copyright 1990, 1997, 1998, 1999, 2000, 2001, 2003, 2004 Free
-   Software Foundation, Inc.
+   Copyright (C) 1990, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
+   2006 Free Software Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -15,13 +15,11 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
 /* Written by David MacKenzie <djm@gnu.ai.mit.edu>. */
 
-#if HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
 #include "savedir.h"
 
@@ -29,68 +27,62 @@
 
 #include <errno.h>
 
-#if HAVE_DIRENT_H
-# include <dirent.h>
-#else
-# define dirent direct
-# if HAVE_SYS_NDIR_H
-#  include <sys/ndir.h>
-# endif
-# if HAVE_SYS_DIR_H
-#  include <sys/dir.h>
-# endif
-# if HAVE_NDIR_H
-#  include <ndir.h>
-# endif
-#endif
-
-#ifdef CLOSEDIR_VOID
-/* Fake a return value. */
-# define CLOSEDIR(d) (closedir (d), 0)
-#else
-# define CLOSEDIR(d) closedir (d)
+#include <dirent.h>
+#ifndef _D_EXACT_NAMLEN
+# define _D_EXACT_NAMLEN(dp)	strlen ((dp)->d_name)
 #endif
 
 #include <stddef.h>
 #include <stdlib.h>
 #include <string.h>
 
+#include "openat.h"
 #include "xalloc.h"
 
-/* Return a freshly allocated string containing the filenames
-   in directory DIR, separated by '\0' characters;
-   the end is marked by two '\0' characters in a row.
-   Return NULL (setting errno) if DIR cannot be opened, read, or closed.  */
-
 #ifndef NAME_SIZE_DEFAULT
 # define NAME_SIZE_DEFAULT 512
 #endif
 
-char *
-savedir (const char *dir)
+/* The results of opendir() in this file are not used with dirfd and fchdir,
+   therefore save some unnecessary work in fchdir.c.  */
+#undef opendir
+#undef closedir
+
+/* Return a freshly allocated string containing the file names
+   in directory DIRP, separated by '\0' characters;
+   the end is marked by two '\0' characters in a row.
+   Return NULL (setting errno) if DIRP cannot be read or closed.
+   If DIRP is NULL, return NULL without affecting errno.  */
+
+static char *
+savedirstream (DIR *dirp)
 {
-  DIR *dirp;
-  struct dirent *dp;
   char *name_space;
   size_t allocated = NAME_SIZE_DEFAULT;
   size_t used = 0;
   int save_errno;
 
-  dirp = opendir (dir);
   if (dirp == NULL)
     return NULL;
 
   name_space = xmalloc (allocated);
 
-  errno = 0;
-  while ((dp = readdir (dirp)) != NULL)
+  for (;;)
     {
+      struct dirent const *dp;
+      char const *entry;
+
+      errno = 0;
+      dp = readdir (dirp);
+      if (! dp)
+	break;
+
       /* Skip "", ".", and "..".  "" is returned by at least one buggy
          implementation: Solaris 2.4 readdir on NFS file systems.  */
-      char const *entry = dp->d_name;
+      entry = dp->d_name;
       if (entry[entry[0] != '.' ? 0 : entry[1] != '.' ? 1 : 2] != '\0')
 	{
-	  size_t entry_size = strlen (entry) + 1;
+	  size_t entry_size = _D_EXACT_NAMLEN (dp) + 1;
 	  if (used + entry_size < used)
 	    xalloc_die ();
 	  if (allocated <= used + entry_size)
@@ -111,7 +103,7 @@ savedir (const char *dir)
     }
   name_space[used] = '\0';
   save_errno = errno;
-  if (CLOSEDIR (dirp) != 0)
+  if (closedir (dirp) != 0)
     save_errno = errno;
   if (save_errno != 0)
     {
@@ -121,3 +113,25 @@ savedir (const char *dir)
     }
   return name_space;
 }
+
+/* Return a freshly allocated string containing the file names
+   in directory DIR, separated by '\0' characters;
+   the end is marked by two '\0' characters in a row.
+   Return NULL (setting errno) if DIR cannot be opened, read, or closed.  */
+
+char *
+savedir (char const *dir)
+{
+  return savedirstream (opendir (dir));
+}
+
+/* Return a freshly allocated string containing the file names
+   in directory FD, separated by '\0' characters;
+   the end is marked by two '\0' characters in a row.
+   Return NULL (setting errno) if FD cannot be read or closed.  */
+
+char *
+fdsavedir (int fd)
+{
+  return savedirstream (fdopendir (fd));
+}
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/savedir.h dbg/find6/find/gnulib-cvs/gnulib/lib/savedir.h
