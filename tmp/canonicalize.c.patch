--- dbg/find14/find/gnulib/lib/canonicalize.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib/lib/canonicalize.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,5 +1,5 @@
 /* Return the canonical absolute name of a given file.
-   Copyright (C) 1996-2004 Free Software Foundation, Inc.
+   Copyright (C) 1996-2007 Free Software Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -14,23 +14,14 @@
    You should have received a copy of the GNU General Public License
    along with this program; see the file COPYING.
    If not, write to the Free Software Foundation,
-   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
-#ifdef HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
-#ifdef STDC_HEADERS
-# include <stdlib.h>
-#else
-void free ();
-#endif
+#include "canonicalize.h"
 
-#if defined STDC_HEADERS || defined HAVE_STRING_H
-# include <string.h>
-#else
-# include <strings.h>
-#endif
+#include <stdlib.h>
+#include <string.h>
 
 #if HAVE_SYS_PARAM_H
 # include <sys/param.h>
@@ -38,48 +29,30 @@ void free ();
 
 #include <sys/stat.h>
 
-#if HAVE_UNISTD_H
-# include <unistd.h>
-#endif
+#include <unistd.h>
 
 #include <errno.h>
+#include <stddef.h>
 
 #include "cycle-check.h"
-#include "path-concat.h"
-#include "stat-macros.h"
+#include "filenamecat.h"
 #include "xalloc.h"
 #include "xgetcwd.h"
 
+#ifndef ELOOP
+# define ELOOP 0
+#endif
 #ifndef __set_errno
 # define __set_errno(Val) errno = (Val)
 #endif
 
-/* If __PTRDIFF_TYPE__ is
-   defined, as with GNU C, use that; that way we don't pollute the
-   namespace with <stddef.h>'s symbols.  Otherwise, if <stddef.h> is
-   available, include it and use ptrdiff_t.  In traditional C, long is
-   the best that we can do.  */
-
-#ifdef __PTRDIFF_TYPE__
-# define PTR_INT_TYPE __PTRDIFF_TYPE__
-#else
-# ifdef HAVE_STDDEF_H
-#  include <stddef.h>
-#  define PTR_INT_TYPE ptrdiff_t
-# else
-#  define PTR_INT_TYPE long
-# endif
-#endif
-
-#include "canonicalize.h"
 #include "pathmax.h"
-#include "stat-macros.h"
 #include "xreadlink.h"
 
 #if !HAVE_CANONICALIZE_FILE_NAME
 /* Return the canonical absolute name of file NAME.  A canonical name
-   does not contain any `.', `..' components nor any repeated path
-   separators ('/') or symlinks.  All path components must exist.
+   does not contain any `.', `..' components nor any repeated file name
+   separators ('/') or symlinks.  All components must exist.
    The result is malloc'd.  */
 
 char *
@@ -105,7 +78,7 @@ canonicalize_file_name (const char *name
 
   /* All known hosts with resolvepath (e.g. Solaris 7) don't turn
      relative names into absolute ones, so prepend the working
-     directory if the path is not absolute.  */
+     directory if the file name is not absolute.  */
   if (name[0] != '/')
     {
       char *wd;
@@ -113,7 +86,7 @@ canonicalize_file_name (const char *name
       if (!(wd = xgetcwd ()))
 	return NULL;
 
-      extra_buf = path_concat (wd, name, NULL);
+      extra_buf = file_name_concat (wd, name, NULL);
       name = extra_buf;
       free (wd);
     }
@@ -151,15 +124,17 @@ canonicalize_file_name (const char *name
 #endif /* !HAVE_CANONICALIZE_FILE_NAME */
 
 /* Return the canonical absolute name of file NAME.  A canonical name
-   does not contain any `.', `..' components nor any repeated path
-   separators ('/') or symlinks.  Whether path components must exist
+   does not contain any `.', `..' components nor any repeated file name
+   separators ('/') or symlinks.  Whether components must exist
    or not depends on canonicalize mode.  The result is malloc'd.  */
 
 char *
 canonicalize_filename_mode (const char *name, canonicalize_mode_t can_mode)
 {
-  char *rpath, *dest, *extra_buf = NULL;
-  const char *start, *end, *rpath_limit;
+  char *rname, *dest, *extra_buf = NULL;
+  char const *start;
+  char const *end;
+  char const *rname_limit;
   size_t extra_len = 0;
   struct cycle_check_state cycle_state;
 
@@ -177,38 +152,38 @@ canonicalize_filename_mode (const char *
 
   if (name[0] != '/')
     {
-      rpath = xgetcwd ();
-      if (!rpath)
+      rname = xgetcwd ();
+      if (!rname)
 	return NULL;
-      dest = strchr (rpath, '\0');
-      if (dest - rpath < PATH_MAX)
+      dest = strchr (rname, '\0');
+      if (dest - rname < PATH_MAX)
 	{
-	  char *p = xrealloc (rpath, PATH_MAX);
-	  dest = p + (dest - rpath);
-	  rpath = p;
-	  rpath_limit = rpath + PATH_MAX;
+	  char *p = xrealloc (rname, PATH_MAX);
+	  dest = p + (dest - rname);
+	  rname = p;
+	  rname_limit = rname + PATH_MAX;
 	}
       else
 	{
-	  rpath_limit = dest;
+	  rname_limit = dest;
 	}
     }
   else
     {
-      rpath = xmalloc (PATH_MAX);
-      rpath_limit = rpath + PATH_MAX;
-      rpath[0] = '/';
-      dest = rpath + 1;
+      rname = xmalloc (PATH_MAX);
+      rname_limit = rname + PATH_MAX;
+      rname[0] = '/';
+      dest = rname + 1;
     }
 
   cycle_check_init (&cycle_state);
   for (start = end = name; *start; start = end)
     {
-      /* Skip sequence of multiple path-separators.  */
+      /* Skip sequence of multiple file name separators.  */
       while (*start == '/')
 	++start;
 
-      /* Find end of path component.  */
+      /* Find end of component.  */
       for (end = start; *end && *end != '/'; ++end)
 	/* Nothing.  */;
 
@@ -219,7 +194,7 @@ canonicalize_filename_mode (const char *
       else if (end - start == 2 && start[0] == '.' && start[1] == '.')
 	{
 	  /* Back up to previous component, ignore if at root already.  */
-	  if (dest > rpath + 1)
+	  if (dest > rname + 1)
 	    while ((--dest)[-1] != '/');
 	}
       else
@@ -229,26 +204,26 @@ canonicalize_filename_mode (const char *
 	  if (dest[-1] != '/')
 	    *dest++ = '/';
 
-	  if (dest + (end - start) >= rpath_limit)
+	  if (dest + (end - start) >= rname_limit)
 	    {
-	      PTR_INT_TYPE dest_offset = dest - rpath;
-	      size_t new_size = rpath_limit - rpath;
+	      ptrdiff_t dest_offset = dest - rname;
+	      size_t new_size = rname_limit - rname;
 
 	      if (end - start + 1 > PATH_MAX)
 		new_size += end - start + 1;
 	      else
 		new_size += PATH_MAX;
-	      rpath = xrealloc (rpath, new_size);
-	      rpath_limit = rpath + new_size;
+	      rname = xrealloc (rname, new_size);
+	      rname_limit = rname + new_size;
 
-	      dest = rpath + dest_offset;
+	      dest = rname + dest_offset;
 	    }
 
 	  dest = memcpy (dest, start, end - start);
 	  dest += end - start;
 	  *dest = '\0';
 
-	  if (lstat (rpath, &st) < 0)
+	  if (lstat (rname, &st) != 0)
 	    {
 	      if (can_mode == CAN_EXISTING)
 		goto error;
@@ -271,7 +246,7 @@ canonicalize_filename_mode (const char *
 		    goto error;
 		}
 
-	      buf = xreadlink (rpath, st.st_size);
+	      buf = xreadlink_with_size (rname, st.st_size);
 	      if (!buf)
 		{
 		  if (can_mode == CAN_MISSING)
@@ -300,10 +275,10 @@ canonicalize_filename_mode (const char *
 	      name = end = memcpy (extra_buf, buf, n);
 
 	      if (buf[0] == '/')
-		dest = rpath + 1;	/* It's an absolute symlink */
+		dest = rname + 1;	/* It's an absolute symlink */
 	      else
 		/* Back up to previous component, ignore if at root already: */
-		if (dest > rpath + 1)
+		if (dest > rname + 1)
 		  while ((--dest)[-1] != '/');
 
 	      free (buf);
@@ -318,15 +293,15 @@ canonicalize_filename_mode (const char *
 	    }
 	}
     }
-  if (dest > rpath + 1 && dest[-1] == '/')
+  if (dest > rname + 1 && dest[-1] == '/')
     --dest;
   *dest = '\0';
 
   free (extra_buf);
-  return rpath;
+  return rname;
 
 error:
   free (extra_buf);
-  free (rpath);
+  free (rname);
   return NULL;
 }
diff -up -r dbg/find14/find/gnulib/lib/canonicalize.h dbg/find6/find/gnulib/lib/canonicalize.h
