--- dbg/find14/find/lib/listfile.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/lib/listfile.c	2020-01-28 23:39:42.000000000 -0600
@@ -13,7 +13,7 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
    USA.
 */
 
@@ -47,8 +47,15 @@ char *alloca ();
 #include <grp.h>
 #include <time.h>
 #include <errno.h>
-#include "../gnulib/lib/human.h"
-#include "../gnulib/lib/pathmax.h"
+#include <fcntl.h>
+#include <openat.h>
+#include "human.h"
+#include "xalloc.h"
+#include "pathmax.h"
+#include "error.h"
+#include "filemode.h"
+
+#include "listfile.h"
 
 #if HAVE_STRING_H || STDC_HEADERS
 #include <string.h>
@@ -56,6 +63,13 @@ char *alloca ();
 #include <strings.h>
 #endif
 
+
+/* The presence of unistd.h is assumed by gnulib these days, so we 
+ * might as well assume it too. 
+ */
+#include <unistd.h> /* for readlink() */
+
+
 #if STDC_HEADERS
 # include <stdlib.h>
 #else
@@ -73,6 +87,31 @@ extern int errno;
 #define HAVE_MAJOR
 #endif
 
+
+
+
+
+#ifdef HAVE_LOCALE_H
+#include <locale.h>
+#endif
+
+#if ENABLE_NLS
+# include <libintl.h>
+# define _(Text) gettext (Text)
+#else
+# define _(Text) Text
+#define textdomain(Domain)
+#define bindtextdomain(Package, Directory)
+#endif
+#ifdef gettext_noop
+# define N_(String) gettext_noop (String)
+#else
+/* See locate.c for explanation as to why not use (String) */
+# define N_(String) String
+#endif
+
+
+
 #ifdef STAT_MACROS_BROKEN
 #undef S_ISCHR
 #undef S_ISBLK
@@ -89,10 +128,6 @@ extern int errno;
 #define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
 #endif
 
-#if defined(S_ISLNK)
-//int readlink ();
-#endif
-
 /* Get or fake the disk device blocksize.
    Usually defined by sys/param.h (if at all).  */
 #ifndef DEV_BSIZE
@@ -168,14 +203,21 @@ struct group *getgrgid ();
 #endif
 #undef HAVE_MAJOR
 
-char *xmalloc ();
-void error ();
-void mode_string ();
-
-char *get_link_name ();
-char *getgroup ();
-char *getuser ();
-void print_name_with_quoting ();
+
+static void print_name (register char *p, FILE *stream, int literal_control_chars);
+
+extern char * getgroup (gid_t gid);
+extern char * getuser (uid_t uid);
+
+
+
+size_t 
+file_blocksize(const struct stat *p)
+{
+  return ST_NBLOCKSIZE;
+}
+
+
 
 /* NAME is the name to print.
    RELNAME is the path to access it from the current directory.
@@ -186,13 +228,14 @@ void print_name_with_quoting ();
    STREAM is the stdio stream to print on.  */
 
 void
-list_file (name, relname, statp, current_time, output_block_size, stream)
-     char *name;
-     char *relname;
-     struct stat *statp;
-     time_t current_time;
-     int output_block_size;
-     FILE *stream;
+list_file (char *name,
+	   int dirfd, 
+	   char *relname,
+	   const struct stat *statp,
+	   time_t current_time,
+	   int output_block_size,
+	   int literal_control_chars,
+	   FILE *stream)
 {
   char modebuf[11];
   struct tm const *when_local;
@@ -202,9 +245,9 @@ list_file (name, relname, statp, current
 
 #if HAVE_ST_DM_MODE
   /* Cray DMF: look at the file's migrated, not real, status */
-  mode_string (statp->st_dm_mode, modebuf);
+  strmode (statp->st_dm_mode, modebuf);
 #else
-  mode_string (statp->st_mode, modebuf);
+  strmode (statp->st_mode, modebuf);
 #endif
   modebuf[10] = '\0';
 
@@ -296,17 +339,17 @@ list_file (name, relname, statp, current
 				 1, 1));
     }
 
-  print_name_with_quoting (name, stream);
+  print_name (name, stream, literal_control_chars);
 
 #ifdef S_ISLNK
   if (S_ISLNK (statp->st_mode))
     {
-      char *linkname = get_link_name (name, relname);
+      char *linkname = get_link_name_at (name, dirfd, relname);
 
       if (linkname)
 	{
 	  fputs (" -> ", stream);
-	  print_name_with_quoting (linkname, stream);
+	  print_name (linkname, stream, literal_control_chars);
 	  free (linkname);
 	}
     }
@@ -314,10 +357,16 @@ list_file (name, relname, statp, current
   putc ('\n', stream);
 }
 
-void
-print_name_with_quoting (p, stream)
-     register char *p;
-     FILE *stream;
+
+static void
+print_name_without_quoting (char *p, FILE *stream)
+{
+  fprintf(stream, "%s", p);
+}
+
+
+static void
+print_name_with_quoting (register char *p, FILE *stream)
 {
   register unsigned char c;
 
@@ -366,11 +415,17 @@ print_name_with_quoting (p, stream)
     }
 }
 
+static void print_name (register char *p, FILE *stream, int literal_control_chars)
+{
+  if (literal_control_chars)
+    print_name_without_quoting(p, stream);
+  else
+    print_name_with_quoting(p, stream);
+}
+
 #ifdef S_ISLNK
-char *
-get_link_name (name, relname)
-     char *name;
-     char *relname;
+static char *
+get_link_name (const char *name, char *relname)
 {
   register char *linkname;
   register int linklen;
@@ -390,4 +445,34 @@ get_link_name (name, relname)
   linkname[linklen] = '\0';
   return linkname;
 }
+
+struct link_name_args
+{
+  const char *name;
+  char *relname;
+  char *result;
+};
+
+static int
+get_link_name_cb(void *context)
+{
+  struct link_name_args *args = context;
+  args->result = get_link_name(args->name, args->relname);
+  return 0;
+}
+
+char *
+get_link_name_at (const char *name, int dirfd, char *relname)
+{
+  struct link_name_args args;
+  args.result = NULL;
+  args.name = name;
+  args.relname = relname;
+  if (0 == run_in_dir(dirfd, get_link_name_cb, &args))
+    return args.result;
+  else
+    return NULL;
+}
+
+
 #endif
Only in dbg/find14/find/lib: listfile.c.orig
Only in dbg/find14/find/lib: listfile.c.rej
Only in dbg/find6/find/lib: listfile.h
Binary files dbg/find14/find/lib/listfile.o and dbg/find6/find/lib/listfile.o differ
diff -up -r dbg/find14/find/lib/Makefile dbg/find6/find/lib/Makefile
