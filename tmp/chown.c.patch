--- dbg/find14/find/gnulib-cvs/gnulib/lib/chown.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/chown.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,6 +1,7 @@
 /* provide consistent interface to chown for systems that don't interpret
    an ID of -1 as meaning `don't change the corresponding ID'.
-   Copyright (C) 1997, 2004 Free Software Foundation, Inc.
+
+   Copyright (C) 1997, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -14,29 +15,29 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
 /* written by Jim Meyering */
 
 #include <config.h>
 
-/* Disable the definition of chown to rpl_chown (from config.h) in this
-   file.  Otherwise, we'd get conflicting prototypes for rpl_chown on
-   most systems.  */
-#undef chown
+/* Specification.  */
+#include <unistd.h>
 
+#include <stdbool.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#if HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-#if HAVE_FCNTL_H
-# include <fcntl.h>
-#else
-# include <sys/file.h>
-#endif
+#include <fcntl.h>
 #include <errno.h>
 
+/* Below we refer to the system's chown().  */
+#undef chown
+
+/* The results of open() in this file are not used with fchdir,
+   therefore save some unnecessary work in fchdir.c.  */
+#undef open
+#undef close
+
 /* Provide a more-closely POSIX-conforming version of chown on
    systems with one or both of the following problems:
    - chown doesn't treat an ID of -1 as meaning
@@ -53,7 +54,7 @@ rpl_chown (const char *file, uid_t uid,
 
       /* Stat file to get id(s) that should remain unchanged.  */
       if (stat (file, &file_stats))
-	return 1;
+	return -1;
 
       if (gid == (gid_t) -1)
 	gid = file_stats.st_gid;
@@ -70,20 +71,34 @@ rpl_chown (const char *file, uid_t uid,
        on the symlink itself.  To work around that, we open the
        file (but this can fail due to lack of read or write permission) and
        use fchown on the resulting descriptor.  */
-    int fd = open (file, O_RDONLY | O_NONBLOCK | O_NOCTTY);
-    if (fd < 0
-	&& (fd = open (file, O_WRONLY | O_NONBLOCK | O_NOCTTY)) < 0)
-      return -1;
-    if (fchown (fd, uid, gid))
+    int open_flags = O_NONBLOCK | O_NOCTTY;
+    int fd = open (file, O_RDONLY | open_flags);
+    if (0 <= fd
+	|| (errno == EACCES
+	    && 0 <= (fd = open (file, O_WRONLY | open_flags))))
       {
+	int result = fchown (fd, uid, gid);
 	int saved_errno = errno;
+
+	/* POSIX says fchown can fail with errno == EINVAL on sockets,
+	   so fall back on chown in that case.  */
+	struct stat sb;
+	bool fchown_socket_failure =
+	  (result != 0 && saved_errno == EINVAL
+	   && fstat (fd, &sb) == 0 && S_ISFIFO (sb.st_mode));
+
 	close (fd);
-	errno = saved_errno;
-	return -1;
+
+	if (! fchown_socket_failure)
+	  {
+	    errno = saved_errno;
+	    return result;
+	  }
       }
-    return close (fd);
+    else if (errno != EACCES)
+      return -1;
   }
-#else
-  return chown (file, uid, gid);
 #endif
+
+  return chown (file, uid, gid);
 }
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/classpath.c dbg/find6/find/gnulib-cvs/gnulib/lib/classpath.c
