--- dbg/find14/find/NEWS	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/NEWS	2020-01-28 23:39:42.000000000 -0600
@@ -1,14 +1,580 @@
 GNU findutils NEWS - User visible changes.	-*- outline -*- (allout)
+* Major changes in release 4.3.3-CVS
+
+** Bug Fixes
+
+Savannah bug #14535: correctly support case-folding in locate (that
+is, "locate -i") for multibyte character environments such as UTF-8.
+Previously, if your search string contained a character which was
+outside the single-byte-encoding range for UTF-8 for example, then the
+case-folding behaviour failed to work and only exact matches would be
+returned.
+
+Savannah bug #18466: we now avoid this bug by limiting "-execdir ...+"
+to just one argument for the time being.  There is a performance
+penalty for doing this.  We hope to make a better fix in a later
+release.
+
+
+** Functional changes
+
+The -printf action (and similar related actions) now support %S,
+which is a measurement of the sparseness of a file.
+
+The test "-perm /000" now matches all files instead of no files.  For
+over a year find has been issuing warning messages indicating that
+this change will happen.  We now issue a warning indicating that the
+change has already happened (in 4.3.x only, there is no plan to make
+this change in the 4.2.x series).
+
+The tests -newer, -anewer, -cnewer, -mtime, -atime, -ctime, -amin,
+-cmin, -mmin and -used now support sub-second timestamps, including
+the ability to specify times with non-integer arguments.
+
+The -printf format specifiers also support sub-second timestamps:
+  atime   ctime  mtime
+  %a      %c     %t
+  %AS     %CS    %TS 
+  %AT     %CT    %TT 
+  %A+     %C+    %T+ 
+  %AX     %CX    %TX 
+
+
+The new test -newerXY supports comparison between status times for
+files.  One of the status times for a file being considered (denoted
+X) is checked against a reference time (denoted Y) for the file whose
+name id the argument.  X and Y can be:
+
+   a 	Access time
+   B	Birth time (st_birthtime, currently unsupported)
+   c	Change time
+   m	Modification time
+   t	Valid only for the reference time; instead of comparison
+	against a file status time, the argument is a time string.
+	Not yet supported.
+
+For example, -newermm is equivalent to -newer, and -neweram is true if
+the file being considered was accessed more recently than the
+reference file was modified.  The -newerXY test supports subsecond
+timestamps where these are available.  The X=B variant is not yet
+implemented.
+   
+
+** Bug Fixes
+
+#17437: Corrected the handling of X in symbolic permissions (such
+as-u+w,a+X).  This change actually occurred in findutils-4.3.2, but
+the NEWS file for that release didn't mention it.
+
+#18714: In the POSIX locale, vertical tabs and form feeds are not
+field separators.
+
+#18713: Quoted but empty arguments which occur last on an xargs input
+line are no longer ignored, but instead produce an empty argument.
+
+* Major changes in release 4.3.2
+
+** Bug Fixes
+
+#18222: find -printf '%H %P' once again prints the right result if
+more than one start point was given on the command line.
+
+#17782: find -execdir now correctly puts the prefix "./" before the
+expansion of "{}" rather than at the start of the argument it appears
+in.  Please note that if you use the -exec or -execdir actions with a
+shell, then you may be vulnerable to shell code injection attacks, so
+don't do that.  It's not a security defect in find - you should not be
+passing untrusted data (such as file names chosen by other people) to
+the shell.
+
+#17490: find  -regex generated a segfault in findutils-4.3.1, but this
+ is fixed in findutils-4.3.2.
+
+#17477: find -printf '%' (that is, where the format has a trailing %)
+now generates an error message.
+
+#17372: The fts-based find executable (the default configuration uses
+fts) is now much faster when -maxdepth is used on filesystems with
+high fanouts.
+
+#15531: The -prune action now behaves correctly when applied to a file.
+
+** Functional changes
+
+The slocate database format is now supported.  Preliminary changes
+intended to eventually allow setuid operation of locate have also been
+made.  For the moment, please don't install GNU locate as a
+set-user-ID program (except for testing purposes; if you do so, please
+make sure that untrusted users cannot execute the set-user-ID locate
+program).
+
+Use of an slocate database which was built with a nonzero security
+mode (at the moment, GNU updatedb will not do this) forces locate's
+"-e" option to be turned on, which has an effect on the "-S" option
+which is probably surprising for most users.
+
+
+** Documentation Fixes
+
+The global effect of options (other than -daystart and -follow) is now
+explained more clearly in the manual page.   Savannah bug #15360.
+
+
+* Major changes in release 4.3.1
+
+** Bug Fixes
+
+Find now follows POSIX rules for determining where directories end and
+expressions start.  This means that "find \(1 \!2 \, \)" now searches
+in the four named directories, rather than trying to parse an
+expression. (Savannah bug #15235).
+
+You now get a more helpful error message when you use command lines
+which have missing expressions, such as 
+      find . ( )
+      find . !
+      find . -a
+      find . \( -not \)
+      find . \( -true -a
+
+Savannah bug #15800: If find finds more subdirectories within a parent
+directory than it previously expected to based on the link count of
+the parent, the resulting error message now gives the correct
+directory name (previously an error message was issued but it
+specified the wrong directory).
+
+Savannah bug #16738: "find .... -exec ... {} +" now works if you have
+a large environment and many files must be passed to the -exec
+action.  The same problem affected the -execdir action, though since
+the number of files in a given directory will normally be smaller, the
+problem was worse for -exec.
+
+Savannah bug #16579: Updatedb now works if it is running as a user
+whose login shell is not actually a shell.
+
+There have also been a number of documentation improvements (includng
+Savannah bug #16269).
+
+** Functional changes
+
+For find, debug output can now be enabled at runtime with the -D
+option.  This causes the printing of various sorts of information
+about find's internal state and progress.
+
+The find option -nowarn cannot itself produce a warning (this used to
+happen with commands like "find . -name quux -nowarn -print").
+
+** Performance Enhancements
+
+Find now has a rudimentary cost-based optimiser.  It has an idea of
+the basic cost of each test (i.e. that -name is very cheap while -size
+is more expensive).  It re-orders tests bearing in mind the cost of
+each test and its likely success.  Predicates with side effects (for
+example -delete or -exec) are not reordered.  The optimiser is not
+yet enabled by default, but the new option -O controls the query 
+optimisation level.  To see this in action, try
+  find -D opt -O3 . -type f -o -type c -o -size 555 -name Z
+and compare the optimised query with:
+  find -D opt -O3 . -size 555 -o -type c -o -type f -name Z
+and
+  find -D opt     . -size 555 -o -type c -o -type f -name Z
+
+Over time, as optimisations are proven to be robust and correct, they
+will be moved to lower optimisation levels.  Some optimisations have
+always been performed by find (for example -name is always done early
+if possible).
+
+** Translations
+
+Findutils 4.3.1 includes updated translations for the following
+languages:
+ Vietnamese, Belarusian, Catalan, Danish, German, Greek, Esperanto,
+ Spanish, Estonian, Finnish, French, Irish, Galician, Croatian, Hungarian,
+ Indonesian, Italian, Japanese, Korean, Luganda, Malay, Dutch, Polish,
+ Portuguese, Brazilian Portuguese, Romanian, Russian, Kinyarwanda,
+ Slovak, Slovenian, Serbian, Swedish, Turkish, Chinese (simplified),
+ Chinese (traditional), Bulgarian
+
+* Major changes in release 4.3.0
+
+The 4.3.x release series are currently 'development' releases.  Please
+test it, but think carefully before installing it in a production
+system.  New features in findutils-4.3.x are under development; they
+may change or go away. 
+
+All changes up to and including findutils-4.2.27 are included in this
+release.  In addition the following changes are new in this release:
+
+** Functional Changes
+
+By default, find now uses the fts() function to search the file
+system.  The use of fts greatly increases find's ability to search
+extremely deep directory hierarchites.
+
+You can tell that the version of find you are using uses FTS, because
+the output of "find --version" will include the word "FTS".
+
+Currently two binaries for 'find' are built.  The configure option
+--without-fts can be used to select whether 'find' uses fts:
+
+				  With fts	Without fts
+default configuration		  find		oldfind
+configure --with-fts		  find		oldfind
+configure --without-fts		  ftsfind	find
+
+New tests, -readable, -writable, -executable.  These check that a file
+can be read, written or executed respectively.
+
+* Major changes in release 4.2.27
+
+** Warnings of Future Changes
+
+The test -perm /000 currently matches no files, but for greater
+consistency with -perm -000, this will be changed to match all files;
+this change will probably be made in early 2006.  Meanwhile, a warning
+message is given if you do this.
+
+** Bug Fixes
+
+If xargs is invoked with many short arguments on PPC systems running
+the Linux kernel, we no longer get an "argument list too long" error
+from the operating system.
+
+Fixed a bug in the test suite which caused it to spuriously fail on
+systems where ARG_MAX is different to the value used by the Linux
+kernel on 32-bit x86-architecture systems.
+
+On systems running the Linux kernel, "find -printf %F" no longer
+produces the wrong answer for files on filesystems that have been
+remounted elsewhere using "mount --bind". (Savannah bug #14921).
+
+** Documentation Changes
+
+Following some extensive and detailed review comments from Aaron
+Hawley, the material in the manual pages and the Texinfo manual are
+now synchronised.
+
+The %M format specifier of "find -printf" is now documented, although
+it has existed since release 4.2.5.
+
+The 'find' manual page now correctly documents the fact that -regex
+defaults to using Emacs-style regular expressions (though this can be
+changed).
+
+* Major changes in release 4.2.26
+
+** Public Service Announcements
+
+I'd like to point out a second time that the interpretation of '-perm
++mode' has changed to be more POSIX-compliant.  If you want the old
+behaviour of the GNU extension you should use '-perm /mode'.  See the
+NEWS entry for findutils version 4.2.21 for details.
+
+** Functional Changes
+
+The xargs command now supports a new option (--delimiter) which allows
+input items to be separated by characters other than null and
+whitespace.  This resolves Savannah support request sr #102914.
+
+Sometimes find needs to read the /etc/mtab file (or perform the
+equivalent operation on systems not using /etc/mtab).  If this
+information is needed but not available, find now exits with an error
+message non-zero status.  If the information is not needed, find will
+not spuriously fail.
+
+A new xargs option --delimiter allows the input delimiter to be
+changed (previously \0 was the only choice unless you use the -L
+option, which changes other semantics too).
+
+** Bug Fixes
+
+If the environment size is too large to allow xargs to operate
+normally, 'xargs --help' still works (now).
+
+If the input to xargs is a large number of very short options (for
+example, one character each), earlier versions of xargs would fail
+with 'Argument list too long'.  However, since this is precisely the
+problem that xargs was invented to solve, this is a bug.  Hence on
+those systems we now correctly use a shorter command line.  This
+problem particularly affected 64-bit Linux systems because of the
+larger size of pointers, although 32-bit Linux systems were also
+affected (albeit for longer command lines).  In theory the same
+problem could affect 'find -exec {} +', but that's much less likely
+(even so, the bug is fixed there too).
+
+Bugfix for an unusual failure mode (Savannah bug #14842) where an
+attempt to allocate more space for directory contents succeeds but is
+incorrectly diagnosed as a failure.  The likelihood of you
+experiencing this depends on your architecture, operating system and
+resource limits.  This failure has been observed in a directory
+containing 35396 entries.
+
+** Documentation Changes
+
+The EXAMPLES section of the find manual page now correctly describes
+the symbolic and octal modes for the -perm test.
+
+The documentation and "--help" usage information for the -L, -l, -I
+and -i options have been clarified (but the behaviour has not changed).
+
+The documentation now explains more clearly what happens when you use
+"-L -type l".
+
+* Major changes in release 4.2.25
+
+** Bug Fixes
+
+find -perm /440 (which should succeed if a file is readable by its
+owner or group) now works.  Previously there was a bug which caused
+this to be treated as "find -perm 440".
+
+Some files in the xargs test suite have been renamed to avoid problems
+on operating systems whoch cannot distinguish filenames on the basis
+of upper/lower case distinctions.
+
+The software now builds on Cygwin, including the generated file
+regexprops.texi.
+
+Findutils should now build once again on systems supporting AFS, but
+this support has not recently been fully tested.  Findutils should
+also (once again) build on Cygwin.
+
+** Other Changes
+
+The test suite for find is now much more extensive.
+
+* Major changes in release 4.2.24
+
+** Documentation Changes
+
+The manual now includes a "Worked Examples" section which talks about
+the various ways in which findutils can be used to perform common
+tasks, and why some of these alternatives are better than others.
+
+The -I option of xargs (which is required by the POSIX standard) is
+now documented.
+
+We now document the fact that find ensures that commands run by -ok
+and -okdir don't steal find's input.  Find does this by redirecting
+the command's standard input from stdin.
+
+Many documentation readability enhancements and proofreading fixes
+were contributed by Aaron Hawley.
+
+** Functional Changes
+
+*** Functional changes in locate
+
+The "--regex" option of locate now assumes the regular expression to
+be in the same syntax as is used in GNU Emacs, though this can be
+changed with the new option --regextype.  This is a change from the
+existing behaviour (which was to use POSIX Basic Regular Expressions).
+Since this feature is releatively new anyway, I though it was more
+useful to have compatibility between regular expression handling in
+find and locate than to maintain the short-lived previous behaviour of
+locate.
+
+The locate program now also supports a "--regextype" long option which
+controls which regular expression syntax is understood by locate.
+This is a long option and has no single-letter 'short option'
+equivalent.
+
+*** Functional changes in find
+
+The regular expression syntax understood by "find" can be changed with
+the -regextype option; this option is positional, meaning that you can
+have several tests, each using a distinct syntax (this is not
+recommended practice however).
+
+The default regular expression syntax is substantially the same as
+that recognised by GNU Emacs, except for the fact that "." will match
+a newline.
+
+The leaf optimisation can be disabled with the configure option
+"--disable-leaf-optimisation", which is equivalent to specifying
+"-noleaf" on all find command lines.  This is useful for systems
+having filesystems which do not provide traditional Unix behaviour for
+the link count on directories (for example Cygwin and the Solaris 9
+HSFS implementation).
+
+** Bug Fixes
+
+*** Bug Fixes for find
+
+The -iregex test now works once again on systems that lack
+re_search() (that is, systems on which findutils needs to use the
+gnulib version of this function).
+
+find -regex now once again uses GNU Emacs-compatible regular
+expressions.
+
+If invoked with stderr closed, the -fprint and -fprintf actions now no
+longer cause error messages to be sent into the output file.
+
+If the link count of a directory is less that two, the leaf
+optimisation is now disabled for that directory.  This should allow
+searching of non-Unix filesystems to be more reliable on systems that
+don't take the trouble to make their filesystems look like traditional
+Unix filesystems.   Some filesystems don't even take the trouble to
+have a link count of less than two and for these, -noleaf is still
+required unless --disable-leaf-optimisation was used at configure time.
+
+The "%Y" directive for the -printf action now no longer changes find's
+idea of the mode of the file, so this means among other things that
+"-printf %Y %y" now works properly.  This is Savannah bug #13973.
+
+* Major changes in release 4.2.23
+
+** Documentation Changes
+
+The -L and -I options of xargs are currently incompatible (but should
+not be).
+
+Improved the documentation for -execdir and -okdir.
+
+** Functional Changes to updatedb
+
+File names ending in "/" which are specified as an argument to
+--prunepaths (or in $PRUNEPATHS) don't work, so we now issue an error
+message if the user tries to do that.  The obvious exception of course
+is "/" which does work and is not rejected.
+
+
+* Major changes in release 4.2.22
+
+** Security Fixes
+
+If a directory entry searched with "find -L" is a symbolic link to
+".", we no longer loop indefinitely.  This problem affected find
+versions 4.2.19, 4.2.20 and 4.2.21.  This problem allows users to make
+"find" loop indefinitely.  This is in effect a denial of service and
+could be used to prevent updates to the locate database or to defeat
+file security checks based on find.   However, it should be noted that
+you should not use "find -L" in security-sensitive scenarios.
+
+** Other Bug Fixes
+
+None in this release.
+
+** Functional Changes to locate
+
+A locate database can now be supplied on stdin, using '-' as a element
+of the database-path. If more than one database-path element is '-',
+later instances are ignored.
+
+A new option to locate, '--all' ('-A') causes matches to be limited to
+entries which match all given patterns, not entries which match
+one or more patterns.
+
+** Documentation Changes
+
+Some typos in the manual pages have been fixed.  Various parts of the
+manual now point out that it is good practice to quote the argument of
+"-name".  The manpage now has a "NON-BUGS" section which explains some
+symptoms that look like bugs but aren't.  The explanations of the "%k"
+and "%b" directives to "find -printf" have been imrpoved.
+
+
+* Major changes in release 4.2.21
+** Functional Changes to find
+
+The GNU extension "find ... -perm +MODE" has been withdrawn because it
+is incompatible with POSIX in obscure cases like "find ... -perm ++r".
+Use the new syntax "find ... -perm /MODE" instead.  Old usages will
+still continue to work, so long as they don't conflict with POSIX.
+
+If the output is going to a terminal, the -print, -fprint, -printf and
+-fprintf actions now quote "unusual" characters to prevent unwanted
+effects on the terminal.  See "Unusual Characters in File Names" for
+further details.  There is no change to the behaviour when the output
+is not going to a terminal.   The locate program does the same thing,
+unless the -0 option is in effect (in which case the filenames are 
+printed as-is).
+
+** Functional Changes to locate
+
+The locate command will now read each locate database at most once.
+This means that if you are using multiple databases and are searching
+for more than one name, the results will now be printed in a different
+order (and if you specified a small limit with --limit, you may get a
+different set of results).
+
+A new option '--print' for locate causes it to print the matching
+results even if the '--count' or '--statistics' option is in effect.
+
+** Bug Fixes
+find /blah/blah/blah -depth -empty now works once again.
+
+The -regex and -iregex tests of find now correctly accept POSIX Basic
+Regular Expressions.  (Savannah bug #12999)
+
+The updatedb program now works on systems where "su" does not support
+the "-s" option, for example Solaris.
+
+* Major changes in release 4.2.20
+** Internationalization and Localization
+Updated Vietnamese and Dutch translations.   
+
+** Bug Fixes
+Minor bugfix affecting only those who compile from the CVS repository, 
+as opposed to those who compile from the source releases.
+
+* Major changes in release 4.2.19
+** Bug Fixes
+
+find should now no longer hang on systems which lack the O_NOFOLLOW
+flag to open(2) and which are clients of an unresponsive NFS server
+(Savannah bug #12044).
+
+We now avoid inappropriately failing for "find -L foo" or "find -H
+foo" if foo is a symbolic link (Savannah bug #12181).  Previously we
+used to fail with the error message "Too many levels of symbolic
+links".
+
+"find . -false -exec foo {} +" no longer runs an extra instance of foo
+when find exits (Savannah bug #12230).
+
+If the chdir() safety check fails but we can no longer get back to 
+where we started, exit with an explanatory (fatal) error message.
+This does not happen on GNU/Linux and FreeBSD because the safety check
+is not needed (the security problem the safety check protects against
+is prevented in a cleaner way on those systems).
+
+"make distclean" no longer deletes regex.c (which "make all" needs).
+
+**  Functionality Changes
+"find -printf "%h\n" will now print "." for files in the current directory.
+Previously it printed nothing (but there was a bug in the %h
+implementation anyway).  This fixes Savannah bug #12085.
+
+Should now build (again) on non-C99-compliant systems.
+
+** Documentation enhancements
+Fixed some typos and clarified wording in "Working with automounters".
+
+** Internationalization and Localization
+New Vietnamese message translation.
+
+* Major changes in release 4.2.18
+** Bug Fixes
+*** "find -depth" was missing out non-leaf directories when they contain 
+    non-directories.  This affected findutils releases 4.2.15,
+    4.2.16 and 4.2.17, but the bug is now fixed.
+*** Find no longer hangs on systems which are clients of unresponsive 
+    NFS servers.
+**  Documentation improvements
+*** Improvements and corrections to the find.1 manpage, including corrections to the descriptions of -H and -L.
+
 * Major changes in release 4.2.17
 ** Bug Fixes
 *** bug #11861 	undefined symbol "basename" on IRIX 5.3 
 *** bug #11865 	xargs -i regression  (as compared to findutils-4.2.12)
-*** bug #11866 	Typo in pred_okdir reders it useless (affecting 4.2.16 only)
+*** bug #11866 	Typo in pred_okdir renders it useless (affecting 4.2.16 only)
 *** patch #3723 fix recent process_top_path change (for -execdir on /)
 *** Fixing bug #11866 and applying patch #3723 made -execdir work much better.
 *** find bar/baz/ugh now works again if baz is a symbolic link (broken 
     in 4.2.15).
-
+
 * Major changes in release 4.2.16
 **  Functionality Changes
 *** Updated the message catalogues for the translated messages.
@@ -21,13 +587,12 @@ GNU findutils NEWS - User visible change
 **  Bug Fixes
 *** The -execdir action now works correctly for files named on the 
     command line.
-
+
 * Major changes in release 4.2.15
 **  Functionality Changes
 *** locate now supports matching regular expression (--regex).
 *** --enable-d_type-optimization (introduced in findutils 4.2.13) is now turned on by default.
-
-**  Functionality Changes
+
 * Major changes in release 4.2.14
 **  Functionality Changes
 *** New options -L, -P, -H for locate.  The work in the same was as the same options for find.
@@ -38,7 +603,7 @@ GNU findutils NEWS - User visible change
 *** -xtype and -printf %Y now work correctly for symbolic links once again
 **  Documentation improvements
 *** All options for "locate" are now documented
-
+
 * Major changes in release 4.2.13
 **  Performance Enhancements
 *** On Linux and some other systems, a large performance improvement, 
@@ -46,7 +611,7 @@ GNU findutils NEWS - User visible change
     cases, 99% of them).  Limited testing shows a 2x speedup on NFS
     filesystems.  Other systems which can make use of this enhancement
     include Mac OS X and *BSD.
-
+
 * Major changes in release 4.2.12
 **  Functionality Changes
 *** find is now POSIX-compliant, as far as I know.
@@ -60,7 +625,7 @@ GNU findutils NEWS - User visible change
 *** If find or xargs cannot write to stdout, for example because 
     output is redirected to a file and the disk is full, the 
     relevant program will return a non-zero exit status.
-
+
 * Major changes in release 4.2.11
 **  Bug Fixes
 *** Compilation fix for systems without EOVERFLOW.
@@ -79,13 +644,13 @@ GNU findutils NEWS - User visible change
 **  Bug Fixes
 *** locate's options -i and -w now work with the -e option (previously a bug 
     prevented this).
-
+
 * Major changes in release 4.2.10
 **  Bug Fixes
 *** Portability fix for fstype.c: should now compile on UNICOS, and possibly 
     also produce useful results on BeOS and Dolphin, perhaps other
     systems too.   
-
+
 * Major changes in release 4.2.9
 **  Functionality Changes
 *** xargs no longer treats a line containing only an underscore as a logical end-of-file.   To obtain the behaviour that was previously the default, use "-E_". 
@@ -103,12 +668,12 @@ GNU findutils NEWS - User visible change
 **  Documentation improvements
 *** The precise interpretation of the arguments to the -atime, -ctime 
     and similar tests in find has been documented more clearly.
-
+
 * Major changes in release 4.2.8
 *** Bugfix to the findutils 4.2.7 automount handling on Solaris.  This 
     worked to some extent in findutils-4.2.7, but is much improved in
     findutils-4.2.8.
-
+
 * Major changes in release 4.2.7
 **  Functionality Changes
 *** xargs can now read a list of arguments from a named file, allowing 
@@ -125,7 +690,7 @@ GNU findutils NEWS - User visible change
     on Solaris).
 *** Reenabled internationalisation support (which had been accidentally 
     disabled in findutils-4.2.5).
-
+
 * Major changes in release 4.2.6
 **  Bug Fixes
 *** find now copes rather better when a directory appears to change just as
@@ -133,7 +698,7 @@ GNU findutils NEWS - User visible change
     This is because automount mounts filesystems as you change
     directory into them.  This should resolve Savannah bugs #3998,
     #9043.
-
+
 * Major changes in release 4.2.5
 **  Functionality Changes
 *** The POSIX options -H and -L are supported.  These control whether or not
@@ -150,7 +715,7 @@ GNU findutils NEWS - User visible change
 *** Build problems on UNICOS now fixed, though the linker will still generate 
     warnings because we try to link with the nonexistent library
     "-lsun".  Edit $(LIBS) to work around this problem.
-
+
 * Major changes in release 4.2.4
 **  Functionality Changes
 *** If your system sort command has a working "-z" option, updatedb will
@@ -187,7 +752,7 @@ GNU findutils NEWS - User visible change
     error, so now we just print a warning message and adjust the
     value).
 *** Corrected section numbers of manual page cross-references
-
+
 * Major changes in release 4.2.3
 **  Functionality Changes
 *** Added new action -delete which deletes things that find matches.
@@ -206,7 +771,7 @@ GNU findutils NEWS - User visible change
     directory we've just returned out of).
 ** Other Changes
 *** Non-functional code changes to silence compiler warnings.
-
+
 * Major changes in release 4.2.2
 **  Documentation improvements
 *** "find ... -exec {}+" is not yet supported.
@@ -222,13 +787,13 @@ GNU findutils NEWS - User visible change
     gnulib are now defined in "libfind.a".  This is in the lib
     directory, while gnulib is in the gnulib subdirectory.
 *** Fixed a typo in the address of the FSF in many of the file headers.
-
+
 * Major changes in release 4.2.1
 ** Bug Fixes
 *** 'find -name \*bar now matches .foobar, because the POSIX standard 
      requires it, as explained at
      http://standards.ieee.org/reading/ieee/interp/1003-2-92_int/pasc-1003.2-126.html
-
+
 * Major changes in release 4.2.1
 ** Bug Fixes
 *** find -iname now works correctly on systems that have an fnmatch() function 
@@ -238,7 +803,7 @@ GNU findutils NEWS - User visible change
 *** Better support for systems lacking intmax_t
 ** Other Changes
 **** findutils now uses a newer version of gnulib (dated 2004-10-17).
-
+
 * Major changes in release 4.2.0
 ** Functionality Changes
 *** xargs now works better when the environment variables are very extensive.
@@ -285,7 +850,7 @@ GNU findutils NEWS - User visible change
     locate database.
 *** The %k format specifier for -fprintf now works
     This was broken in 4.1.20.
-
+
 * Major changes in release 4.1.20:
 ** New maintainer, James Youngman <jay@gnu.org>
 ** As far as I know, this is the first release after 4.1.7, but I've left 
@@ -296,11 +861,11 @@ GNU findutils NEWS - User visible change
    building directly from CVS, in which case please read the file
    README-CVS).
 ** There are no (deliberate) functional changes in version 4.1.20.
-
+
 * Major changes in release 4.1.7:
 fix problem so that default "-print" is added when "-prune" is used.
 security fixes related to directories changing while find is executing.
-
+
 * Major changes in release 4.1.6:
 correct bug in prune.
 added --ignore-case option for locate
Only in dbg/find14/find: out
diff -up -r dbg/find14/find/po/be.po dbg/find6/find/po/be.po
