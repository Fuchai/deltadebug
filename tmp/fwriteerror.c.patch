--- dbg/find14/find/gnulib-cvs/gnulib/lib/fwriteerror.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/fwriteerror.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,5 +1,5 @@
 /* Detect write error on a stream.
-   Copyright (C) 2003-2005 Free Software Foundation, Inc.
+   Copyright (C) 2003-2006 Free Software Foundation, Inc.
    Written by Bruno Haible <bruno@clisp.org>, 2003.
 
    This program is free software; you can redistribute it and/or modify
@@ -14,11 +14,9 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
-#if HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
 /* Specification.  */
 #include "fwriteerror.h"
@@ -26,14 +24,20 @@
 #include <errno.h>
 #include <stdbool.h>
 
-int
-fwriteerror (FILE *fp)
+static int
+do_fwriteerror (FILE *fp, bool ignore_ebadf)
 {
   /* State to allow multiple calls to fwriteerror (stdout).  */
   static bool stdout_closed = false;
 
-  if (fp == stdout && stdout_closed)
-    return 0;
+  if (fp == stdout)
+    {
+      if (stdout_closed)
+	return 0;
+
+      /* If we are closing stdout, don't attempt to do it later again.  */
+      stdout_closed = true;
+    }
 
   /* Need to
      1. test the error indicator of the stream,
@@ -47,28 +51,58 @@ fwriteerror (FILE *fp)
   if (ferror (fp))
     {
       if (fflush (fp))
-	return -1; /* errno is set here */
+	goto close_preserving_errno; /* errno is set here */
       /* The stream had an error earlier, but its errno was lost.  If the
 	 error was not temporary, we can get the same errno by writing and
 	 flushing one more byte.  We can do so because at this point the
 	 stream's contents is garbage anyway.  */
       if (fputc ('\0', fp) == EOF)
-	return -1; /* errno is set here */
+	goto close_preserving_errno; /* errno is set here */
       if (fflush (fp))
-	return -1; /* errno is set here */
+	goto close_preserving_errno; /* errno is set here */
       /* Give up on errno.  */
       errno = 0;
-      return -1;
+      goto close_preserving_errno;
     }
 
-  /* If we are closing stdout, don't attempt to do it later again.  */
-  if (fp == stdout)
-    stdout_closed = true;
-
-  if (fclose (fp))
-    return -1; /* errno is set here */
+  if (ignore_ebadf)
+    {
+      /* We need an explicit fflush to tell whether some output was already
+	 done on FP.  */
+      if (fflush (fp))
+	goto close_preserving_errno; /* errno is set here */
+      if (fclose (fp) && errno != EBADF)
+	return -1; /* errno is set here */
+    }
+  else
+    {
+      if (fclose (fp))
+	return -1; /* errno is set here */
+    }
 
   return 0;
+
+ close_preserving_errno:
+  /* There's an error.  Nevertheless call fclose(fp), for consistency
+     with the other cases.  */
+  {
+    int saved_errno = errno;
+    fclose (fp);
+    errno = saved_errno;
+    return -1;
+  }
+}
+
+int
+fwriteerror (FILE *fp)
+{
+  return do_fwriteerror (fp, false);
+}
+
+int
+fwriteerror_no_ebadf (FILE *fp)
+{
+  return do_fwriteerror (fp, true);
 }
 
 
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/fwriteerror.h dbg/find6/find/gnulib-cvs/gnulib/lib/fwriteerror.h
