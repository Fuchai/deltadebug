--- dbg/find14/find/doc/perm.texi	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/doc/perm.texi	2020-01-28 23:39:42.000000000 -0600
@@ -1,16 +1,20 @@
-Each file has a set of @dfn{permissions} that control the kinds of
-access that users have to that file.  The permissions for a file are
-also called its @dfn{access mode}.  They can be represented either in
+Each file has a set of @dfn{file mode bits} that control the kinds of
+access that users have to that file.  They can be represented either in
 symbolic form or as an octal number.
 
 @menu
-* Mode Structure::              Structure of file permissions.
-* Symbolic Modes::              Mnemonic permissions representation.
-* Numeric Modes::               Permissions as octal numbers.
+* Mode Structure::              Structure of file mode bits.
+* Symbolic Modes::              Mnemonic representation of file mode bits.
+* Numeric Modes::               File mode bits as octal numbers.
+* Directory Setuid and Setgid:: Set-user-ID and set-group-ID on directories.
 @end menu
 
 @node Mode Structure
-@section Structure of File Permissions
+@section Structure of File Mode Bits
+
+The file mode bits have two parts: the @dfn{file permission bits},
+which control ordinary access to the file, and @dfn{special mode
+bits}, which affect only some files.
 
 There are three kinds of permissions that a user can have for a file:
 
@@ -24,7 +28,7 @@ list the contents of the directory.
 permission to write to (change) the file.  For directories, this means
 permission to create and remove files in the directory.
 @item
-@cindex execute permission
+@cindex execute/search permission
 permission to execute the file (run it as a program).  For directories,
 this means permission to access files in the directory.
 @end enumerate
@@ -46,59 +50,106 @@ everyone else.
 Files are given an owner and group when they are created.  Usually the
 owner is the current user and the group is the group of the directory
 the file is in, but this varies with the operating system, the
-filesystem the file is created on, and the way the file is created.  You
-can change the owner and group of a file by using the @code{chown} and
-@code{chgrp} commands.
-
-In addition to the three sets of three permissions listed above, a
-file's permissions have three special components, which affect only
-executable files (programs) and, on some systems, directories:
+file system the file is created on, and the way the file is created.  You
+can change the owner and group of a file by using the @command{chown} and
+@command{chgrp} commands.
+
+In addition to the three sets of three permissions listed above, the
+file mode bits have three special components, which affect only
+executable files (programs) and, on most systems, directories:
 
 @enumerate
 @item
+@cindex set-user-ID
 @cindex setuid
-set the process's effective user ID to that of the file upon execution
-(called the @dfn{setuid bit}).  No effect on directories.
+Set the process's effective user ID to that of the file upon execution
+(called the @dfn{set-user-ID bit}, or sometimes the @dfn{setgid bit}).
+For directories on a few systems, give files created in the directory
+the same owner as the directory, no matter who creates them, and set
+the set-user-ID bit of newly-created subdirectories.
 @item
+@cindex set-group-ID
 @cindex setgid
-set the process's effective group ID to that of the file upon execution
-(called the @dfn{setgid bit}).  For directories on some systems, put
-files created in the directory into the same group as the directory, no
-matter what group the user who creates them is in.
+Set the process's effective group ID to that of the file upon execution
+(called the @dfn{set-group-ID bit}, or sometimes the @dfn{setgid bit}).
+For directories on most systems, give files created in the directory
+the same group as the directory, no matter what group the user who
+creates them is in, and set the set-group-ID bit of newly-created
+subdirectories.
 @item
 @cindex sticky
 @cindex swap space, saving text image in
 @cindex text image, saving in swap space
-@cindex append-only directories
-save the program's text image on the swap device so it will load more
-quickly when run (called the @dfn{sticky bit}).  For directories on some
-systems, prevent users from removing files that they do not own in the
-directory; this is called making the directory @dfn{append-only}.
+@cindex restricted deletion flag
+Prevent unprivileged users from removing or renaming a file in a directory
+unless they own the file or the directory; this is called the
+@dfn{restricted deletion flag} for the directory, and is commonly
+found on world-writable directories like @file{/tmp}.
+
+For regular files on some older systems, save the program's text image on the
+swap device so it will load more quickly when run; this is called the
+@dfn{sticky bit}.
 @end enumerate
 
+In addition to the file mode bits listed above, there may be file attributes
+specific to the file system, e.g., access control lists (ACLs), whether a
+file is compressed, whether a file can be modified (immutability), and whether
+a file can be dumped.  These are usually set using programs
+specific to the file system.  For example:
+@c should probably say a lot more about ACLs... someday
+
+@table @asis
+@item ext2
+On @acronym{GNU} and @acronym{GNU}/Linux the file attributes specific to
+the ext2 file system are set using @command{chattr}.
+
+@item FFS
+On FreeBSD the file flags specific to the FFS
+file system are set using @command{chflags}.
+@end table
+
+Even if a file's mode bits allow an operation on that file,
+that operation may still fail, because:
+
+@itemize
+@item
+the file-system-specific attributes or flags do not permit it; or
+
+@item
+the file system is mounted as read-only.
+@end itemize
+
+For example, if the immutable attribute is set on a file,
+it cannot be modified, regardless of the fact that you
+may have just run @code{chmod a+w FILE}.
+
 @node Symbolic Modes
 @section Symbolic Modes
 
 @cindex symbolic modes
-@dfn{Symbolic modes} represent changes to files' permissions as
+@dfn{Symbolic modes} represent changes to files' mode bits as
 operations on single-character symbols.  They allow you to modify either
-all or selected parts of files' permissions, optionally based on
+all or selected parts of files' mode bits, optionally based on
 their previous values, and perhaps on the current @code{umask} as well
 (@pxref{Umask and Protection}).
 
 The format of symbolic modes is:
 
 @example
-@r{[}ugoa@dots{}@r{][[}+-=@r{][}rwxXstugo@dots{}@r{]}@dots{}@r{][},@dots{}@r{]}
+@r{[}ugoa@dots{}@r{][}+-=@r{]}@var{perms}@dots{}@r{[},@dots{}@r{]}
 @end example
 
+@noindent
+where @var{perms} is either zero or more letters from the set
+@samp{rwxXst}, or a single letter from the set @samp{ugo}.
+
 The following sections describe the operators and other details of
 symbolic modes.
 
 @menu
 * Setting Permissions::          Basic operations on permissions.
 * Copying Permissions::          Copying existing permissions.
-* Changing Special Permissions:: Special permissions.
+* Changing Special Mode Bits::   Special mode bits.
 * Conditional Executability::    Conditionally affecting executability.
 * Multiple Changes::             Making multiple changes.
 * Umask and Protection::              The effect of the umask.
@@ -109,7 +160,7 @@ symbolic modes.
 
 The basic symbolic operations on a file's permissions are adding,
 removing, and setting the permission that certain users have to read,
-write, and execute the file.  These operations have the following
+write, and execute or search the file.  These operations have the following
 format:
 
 @example
@@ -118,7 +169,7 @@ format:
 
 @noindent
 The spaces between the three parts above are shown for readability only;
-symbolic modes can not contain spaces.
+symbolic modes cannot contain spaces.
 
 The @var{users} part tells which users' access to the file is changed.
 It consists of one or more of the following letters (or it can be empty;
@@ -160,7 +211,7 @@ have for the file.
 @end table
 
 The @var{permissions} part tells what kind of access to the file should
-be changed; it is zero or more of the following letters.  As with the
+be changed; it is normally zero or more of the following letters.  As with the
 @var{users} part, the order does not matter when more than one letter is
 given.  Omitting the @var{permissions} part is useful only with the
 @samp{=} operation, where it gives the specified @var{users} no access
@@ -174,18 +225,19 @@ the permission the @var{users} have to r
 @cindex write permission, symbolic
 the permission the @var{users} have to write to the file;
 @item x
-@cindex execute permission, symbolic
-the permission the @var{users} have to execute the file.
+@cindex execute/search permission, symbolic
+the permission the @var{users} have to execute the file,
+or search it if it is a directory.
 @end table
 
-For example, to give everyone permission to read and write a file,
+For example, to give everyone permission to read and write a regular file,
 but not to execute it, use:
 
 @example
 a=rw
 @end example
 
-To remove write permission for from all users other than the file's
+To remove write permission for all users other than the file's
 owner, use:
 
 @example
@@ -209,7 +261,7 @@ go=
 Another way to specify the same thing is:
 
 @example
-og-rxw
+og-rwx
 @end example
 
 @node Copying Permissions
@@ -217,17 +269,17 @@ og-rxw
 
 @cindex copying existing permissions
 @cindex permissions, copying existing
-You can base part of a file's permissions on part of its existing
-permissions.  To do this, instead of using @samp{r}, @samp{w}, or
-@samp{x} after the operator, you use the letter @samp{u}, @samp{g}, or
-@samp{o}.  For example, the mode
+You can base a file's permissions on its existing permissions.  To do
+this, instead of using a series of @samp{r}, @samp{w}, or @samp{x}
+letters after the
+operator, you use the letter @samp{u}, @samp{g}, or @samp{o}.  For
+example, the mode
 
 @example
 o+g
 @end example
 
 @noindent
-@c FIXME describe the ls -l notation for showing permissions.
 adds the permissions for users who are in a file's group to the
 permissions that other users have for the file.  Thus, if the file
 started out as mode 664 (@samp{rw-rw-r--}), the above mode would change
@@ -236,83 +288,77 @@ it to mode 666 (@samp{rw-rw-rw-}).  If t
 (@samp{rwxr--r-x}).  The @samp{-} and @samp{=} operations work
 analogously.
 
-@node Changing Special Permissions
-@subsection Changing Special Permissions
+@node Changing Special Mode Bits
+@subsection Changing Special Mode Bits
 
-@cindex changing special permissions
-In addition to changing a file's read, write, and execute permissions,
-you can change its special permissions.  @xref{Mode Structure}, for a
-summary of these permissions.
+@cindex changing special mode bits
+In addition to changing a file's read, write, and execute/search permissions,
+you can change its special mode bits.  @xref{Mode Structure}, for a
+summary of these special mode bits.
 
-To change a file's permission to set the user ID on execution, use
+To change the file mode bits to set the user ID on execution, use
 @samp{u} in the @var{users} part of the symbolic mode and
 @samp{s} in the @var{permissions} part.
 
-To change a file's permission to set the group ID on execution, use
+To change the file mode bits to set the group ID on execution, use
 @samp{g} in the @var{users} part of the symbolic mode and
 @samp{s} in the @var{permissions} part.
 
-To change a file's permission to stay permanently on the swap device,
-use @samp{o} in the @var{users} part of the symbolic mode and
+To set both user and group ID on execution, omit the @var{users} part
+of the symbolic mode (or use @samp{a}) and use @samp{s} in the
+@var{permissions} part.
+
+To change the file mode bits to set the restricted deletion flag or sticky bit,
+omit the @var{users} part of the symbolic mode (or use @samp{a}) and use
 @samp{t} in the @var{permissions} part.
 
-For example, to add set user ID permission to a program,
+For example, to set the set-user-ID mode bit of a program,
 you can use the mode:
 
 @example
 u+s
 @end example
 
-To remove both set user ID and set group ID permission from
+To remove both set-user-ID and set-group-ID mode bits from
 it, you can use the mode:
 
 @example
-ug-s
+a-s
 @end example
 
-To cause a program to be saved on the swap device, you can use
+To set the restricted deletion flag or sticky bit, you can use
 the mode:
 
 @example
-o+t
-@end example
-
-Remember that the special permissions only affect files that are
-executable, plus, on some systems, directories (on which they have
-different meanings; @pxref{Mode Structure}).  Using @samp{a}
-in the @var{users} part of a symbolic mode does not cause the special
-permissions to be affected; thus,
-
-@example
-a+s
++t
 @end example
 
-@noindent
-has @emph{no effect}.  You must use @samp{u}, @samp{g}, and @samp{o}
-explicitly to affect the special permissions.  Also, the
-combinations @samp{u+t}, @samp{g+t}, and @samp{o+s} have no effect.
+The combination @samp{o+s} has no effect.  On @acronym{GNU} systems
+the combinations @samp{u+t} and @samp{g+t} have no effect, and
+@samp{o+t} acts like plain @samp{+t}.
 
-The @samp{=} operator is not very useful with special permissions; for
-example, the mode:
+The @samp{=} operator is not very useful with special mode bits.
+For example, the mode:
 
 @example
 o=t
 @end example
 
 @noindent
-does cause the file to be saved on the swap device, but it also
-removes all read, write, and execute permissions that users not in the
+does set the restricted deletion flag or sticky bit, but it also
+removes all read, write, and execute/search permissions that users not in the
 file's group might have had for it.
 
+@xref{Directory Setuid and Setgid}, for additional rules concerning
+set-user-ID and set-group-ID bits and directories.
+
 @node Conditional Executability
 @subsection Conditional Executability
 
 @cindex conditional executability
 There is one more special type of symbolic permission: if you use
-@samp{X} instead of @samp{x}, execute permission is affected only if the
-file already had execute permission or is a directory.  It affects
-directories' execute permission even if they did not initially have any
-execute permissions set.
+@samp{X} instead of @samp{x}, execute/search permission is affected only if the
+file is a directory or already had execute permission.
 
 For example, this mode:
 
@@ -321,8 +367,8 @@ a+X
 @end example
 
 @noindent
-gives all users permission to execute files (or search directories) if
-anyone could before.
+gives all users permission to search directories, or to execute files if
+anyone could execute them before.
 
 @node Multiple Changes
 @subsection Making Multiple Changes
@@ -330,7 +376,7 @@ anyone could before.
 @cindex multiple changes to permissions
 The format of symbolic modes is actually more complex than described
 above (@pxref{Setting Permissions}).  It provides two ways to make
-multiple changes to files' permissions.
+multiple changes to files' mode bits.
 
 The first way is to specify multiple @var{operation} and
 @var{permissions} parts after a @var{users} part in the symbolic mode.
@@ -344,8 +390,8 @@ og+rX-w
 @noindent
 gives users other than the owner of the file read permission and, if
 it is a directory or if someone already had execute permission
-to it, gives them execute permission; and it also denies them write
-permission to it file.  It does not affect the permission that the
+to it, gives them execute/search permission; and it also denies them write
+permission to the file.  It does not affect the permission that the
 owner of the file has for it.  The above mode is equivalent to
 the two modes:
 
@@ -370,7 +416,7 @@ u=rwx,g=rx,o=
 @end example
 
 @noindent
-sets all of the non-special permissions for the file explicitly.  (It
+sets all of the permission bits for the file explicitly.  (It
 gives users who are not in the file's group no permission at all for
 it.)
 
@@ -382,7 +428,7 @@ a+r,g+x-w
 
 @noindent
 gives all users permission to read the file, and gives users who are in
-the file's group permission to execute it, as well, but not permission
+the file's group permission to execute/search it as well, but not permission
 to write to it.  The above mode could be written in several different
 ways; another is:
 
@@ -431,63 +477,116 @@ the file to all users.
 @section Numeric Modes
 
 @cindex numeric modes
-@cindex file permissions, numeric
+@cindex file mode bits, numeric
 @cindex octal numbers for file modes
-File permissions are stored internally as 16 bit integers.  As an
+As an
 alternative to giving a symbolic mode, you can give an octal (base 8)
-number that corresponds to the internal representation of the new mode.
+number that represents the mode.
 This number is always interpreted in octal; you do not have to add a
-leading 0, as you do in C.  Mode 0055 is the same as mode 55.
+leading @samp{0}, as you do in C.  Mode @samp{0055} is the same as
+mode @samp{55}.
 
 A numeric mode is usually shorter than the corresponding symbolic
-mode, but it is limited in that it can not take into account a file's
-previous permissions; it can only set them absolutely.
-
-The permissions granted to the user, to other users in the file's group,
-and to other users not in the file's group are each stored as three
+mode, but it is limited in that normally it cannot take into account the
+previous file mode bits; it can only set them absolutely.
+(As discussed in the next section, the set-user-ID and set-group-ID
+bits of directories are an exception to this general limitation.)
+
+The permissions granted to the user,
+to other users in the file's group,
+and to other users not in the file's group each require three
 bits, which are represented as one octal digit.  The three special
-permissions are also each stored as one bit, and they are as a group
-represented as another octal digit.  Here is how the bits are arranged
-in the 16 bit integer, starting with the lowest valued bit:
+mode bits also require one bit each, and they are as a group
+represented as another octal digit.  Here is how the bits are arranged,
+starting with the lowest valued bit:
 
 @example
 Value in  Corresponding
-Mode      Permission
+Mode      Mode Bit
 
           Other users not in the file's group:
-   1      Execute
+   1      Execute/search
    2      Write
    4      Read
 
           Other users in the file's group:
-  10      Execute
+  10      Execute/search
   20      Write
   40      Read
 
           The file's owner:
- 100      Execute
+ 100      Execute/search
  200      Write
  400      Read
 
-          Special permissions:
-1000      Save text image on swap device
+          Special mode bits:
+1000      Restricted deletion flag or sticky bit
 2000      Set group ID on execution
 4000      Set user ID on execution
 @end example
 
-For example, numeric mode 4755 corresponds to symbolic mode
-@samp{u=rwxs,go=rx}, and numeric mode 664 corresponds to symbolic mode
-@samp{ug=rw,o=r}.  Numeric mode 0 corresponds to symbolic mode
-@samp{ugo=}.
-
-@comment texi related words used by Emacs' spell checker ispell.el
-
-@comment LocalWords: texinfo setfilename settitle setchapternewpage
-@comment LocalWords: iftex finalout ifinfo DIR titlepage vskip pt
-@comment LocalWords: filll dir samp dfn noindent xref pxref
-@comment LocalWords: var deffn texi deffnx itemx emph asis
-@comment LocalWords: findex smallexample subsubsection cindex
-
-@comment LocalWords: chgrp chown executability filesystem FIXME ls og rw
-@comment LocalWords: rwx rwxr rwxs rwxXstugo rx rX rxw setgid setuid ug
-@comment LocalWords: ugo ugoa umask
+For example, numeric mode @samp{4755} corresponds to symbolic mode
+@samp{u=rwxs,go=rx}, and numeric mode @samp{664} corresponds to symbolic mode
+@samp{ug=rw,o=r}.  Numeric mode @samp{0} corresponds to symbolic mode
+@samp{a=}.
+
+@node Directory Setuid and Setgid
+@section Directories and the Set-User-ID and Set-Group-ID Bits
+
+On most systems, if a directory's set-group-ID bit is set, newly
+created subfiles inherit the same group as the directory, and newly
+created subdirectories inherit the set-group-ID bit of the parent
+directory.  On a few systems, a directory's set-user-ID bit has a
+similar effect on the ownership of new subfiles and the set-user-ID
+bits of new subdirectories.  These mechanisms let users share files
+more easily, by lessening the need to use @command{chmod} or
+@command{chown} to share new files.
+
+These convenience mechanisms rely on the set-user-ID and set-group-ID
+bits of directories.  If commands like @command{chmod} and
+@command{mkdir} routinely cleared these bits on directories, the
+mechanisms would be less convenient and it would be harder to share
+files.  Therefore, a command like @command{chmod} does not affect the
+set-user-ID or set-group-ID bits of a directory unless the user
+specifically mentions them in a symbolic mode, or sets them in
+a numeric mode.  For example, on systems that support
+set-group-ID inheritance:
+
+@example
+# These commands leave the set-user-ID and
+# set-group-ID bits of the subdirectories alone,
+# so that they retain their default values.
+mkdir A B C
+chmod 755 A
+chmod 0755 B
+chmod u=rwx,go=rx C
+mkdir -m 755 D
+mkdir -m 0755 E
+mkdir -m u=rwx,go=rx F
+@end example
+
+If you want to try to set these bits, you must mention them
+explicitly in the symbolic or numeric modes, e.g.:
+
+@example
+# These commands try to set the set-user-ID
+# and set-group-ID bits of the subdirectories.
+mkdir G H
+chmod 6755 G
+chmod u=rwx,go=rx,a+s H
+mkdir -m 6755 I
+mkdir -m u=rwx,go=rx,a+s J
+@end example
+
+If you want to try to clear these bits, you must mention them
+explicitly in a symbolic mode, e.g.:
+
+@example
+# This command tries to clear the set-user-ID
+# and set-group-ID bits of the directory D.
+chmod a-s D
+@end example
+
+This behavior is a @acronym{GNU} extension.  Portable scripts should
+not rely on requests to set or clear these bits on directories, as
+@acronym{POSIX} allows implementations to ignore these requests.
Only in dbg/find6/find/doc: regexprops.texi
diff -up -r dbg/find14/find/doc/stamp-vti dbg/find6/find/doc/stamp-vti
