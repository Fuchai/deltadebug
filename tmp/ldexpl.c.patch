--- dbg/find14/find/gnulib-cvs/gnulib/lib/ldexpl.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/ldexpl.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,7 +1,7 @@
 /* Emulation for ldexpl.
    Contributed by Paolo Bonzini
 
-   Copyright 2002, 2003 Free Software Foundation, Inc.
+   Copyright 2002, 2003, 2007 Free Software Foundation, Inc.
 
    This file is part of gnulib.
 
@@ -17,34 +17,52 @@
 
    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
-#include <float.h>
+#include <config.h>
+
+/* Specification.  */
 #include <math.h>
 
-#include "mathl.h"
+#include <float.h>
+#include "fpucw.h"
+#include "isnanl.h"
 
 long double
 ldexpl(long double x, int exp)
 {
   long double factor;
   int bit;
+  DECL_LONG_DOUBLE_ROUNDING
 
-  /* Check for zero, nan and infinity. */
-  if (x != x || x + x == x )
-    return x;
+  BEGIN_LONG_DOUBLE_ROUNDING ();
 
-  if (exp < 0)
+  /* Check for zero, nan and infinity. */
+  if (!(isnanl (x) || x + x == x))
     {
-      exp = -exp;
-      factor = 0.5L;
+      if (exp < 0)
+	{
+	  exp = -exp;
+	  factor = 0.5L;
+	}
+      else
+	factor = 2.0L;
+
+      if (exp > 0)
+	for (bit = 1;;)
+	  {
+	    /* Invariant: Here bit = 2^i, factor = 2^-2^i or = 2^2^i,
+	       and bit <= exp.  */ 
+	    if (exp & bit)
+	      x *= factor;
+	    bit <<= 1;
+	    if (bit > exp)
+	      break;
+	    factor = factor * factor;
+	  }
     }
-  else
-    factor = 2.0L;
 
-  for (bit = 1; bit <= exp; bit <<= 1, factor *= factor)
-    if (exp & bit)
-      x *= factor;
+  END_LONG_DOUBLE_ROUNDING ();
 
   return x;
 }
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/linebreak.c dbg/find6/find/gnulib-cvs/gnulib/lib/linebreak.c
