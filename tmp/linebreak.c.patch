--- dbg/find14/find/gnulib-cvs/gnulib/lib/linebreak.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/linebreak.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,5 +1,5 @@
 /* linebreak.c - line breaking of Unicode strings
-   Copyright (C) 2001-2003 Free Software Foundation, Inc.
+   Copyright (C) 2001-2003, 2006-2007 Free Software Foundation, Inc.
    Written by Bruno Haible <haible@clisp.cons.org>, 2001.
 
 This program is free software; you can redistribute it and/or modify
@@ -13,12 +13,10 @@ MERCHANTABILITY or FITNESS FOR A PARTICU
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software
-Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+along with this program; if not, write to the Free Software Foundation,
+Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
-#ifdef HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
 /* Specification.  */
 #include "linebreak.h"
@@ -27,14 +25,11 @@ Foundation, Inc., 59 Temple Place - Suit
 #include <string.h>
 #include "c-ctype.h"
 #include "xsize.h"
-
-#include "utf8-ucs4.h"
-
-#include "utf16-ucs4.h"
+#include "unistr.h"
 
 #ifdef unused
 static inline int
-u32_mbtouc (unsigned int *puc, const unsigned int *s, size_t n)
+u32_mbtouc_unsafe (unsigned int *puc, const unsigned int *s, size_t n)
 {
   *puc = *s;
   return 1;
@@ -474,7 +469,7 @@ u8_width (const unsigned char *s, size_t
       unsigned int uc;
       int w;
 
-      s += u8_mbtouc (&uc, s, s_end - s);
+      s += u8_mbtouc_unsafe (&uc, s, s_end - s);
 
       if (uc == 0)
         break; /* end of string reached */
@@ -498,7 +493,7 @@ u16_width (const unsigned short *s, size
       unsigned int uc;
       int w;
 
-      s += u16_mbtouc (&uc, s, s_end - s);
+      s += u16_mbtouc_unsafe (&uc, s, s_end - s);
 
       if (uc == 0)
         break; /* end of string reached */
@@ -644,7 +639,7 @@ u8_possible_linebreaks (const unsigned c
   while (s < s_end)
     {
       unsigned int uc;
-      int count = u8_mbtouc (&uc, s, s_end - s);
+      int count = u8_mbtouc_unsafe (&uc, s, s_end - s);
       int prop = lbrkprop_lookup (uc);
 
       if (prop == LBP_BK)
@@ -756,7 +751,7 @@ u16_possible_linebreaks (const unsigned
   while (s < s_end)
     {
       unsigned int uc;
-      int count = u16_mbtouc (&uc, s, s_end - s);
+      int count = u16_mbtouc_unsafe (&uc, s, s_end - s);
       int prop = lbrkprop_lookup (uc);
 
       if (prop == LBP_BK)
@@ -985,7 +980,7 @@ u8_width_linebreaks (const unsigned char
   while (s < s_end)
     {
       unsigned int uc;
-      int count = u8_mbtouc (&uc, s, s_end - s);
+      int count = u8_mbtouc_unsafe (&uc, s, s_end - s);
 
       /* Respect the override.  */
       if (o != NULL && *o != UC_BREAK_UNDEFINED)
@@ -1069,7 +1064,7 @@ u16_width_linebreaks (const unsigned sho
   while (s < s_end)
     {
       unsigned int uc;
-      int count = u16_mbtouc (&uc, s, s_end - s);
+      int count = u16_mbtouc_unsafe (&uc, s, s_end - s);
 
       /* Respect the override.  */
       if (o != NULL && *o != UC_BREAK_UNDEFINED)
@@ -1619,6 +1614,7 @@ mbs_width_linebreaks (const char *s, siz
 		xsum4 (xtimes (n, sizeof (size_t)), m, m,
 		       (o != NULL ? m : 0));
 	      char *memory =
+		(char *)
 		(size_in_bounds_p (memory_size) ? malloc (memory_size) : NULL);
               if (memory != NULL)
                 {
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/linebreak.h dbg/find6/find/gnulib-cvs/gnulib/lib/linebreak.h
