--- dbg/find14/find/doc/find.texi	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/doc/find.texi	2020-01-28 23:39:42.000000000 -0600
@@ -45,21 +45,21 @@ notice identical to this one except for
 
 @end ignore
 Permission is granted to copy and distribute modified versions of this
-manual under the conditions for verbatim copying, provided that the entire
-resulting derived work is distributed under the terms of a permission
-notice identical to this one.
-
-Permission is granted to copy and distribute translations of this manual
-into another language, under the above conditions for modified versions,
-except that this permission notice may be stated in a translation approved
-by the Foundation.
+manual under the conditions for verbatim copying, provided that the
+entire resulting derived work is distributed under the terms of a
+permission notice identical to this one.
+
+Permission is granted to copy and distribute translations of this
+manual into another language, under the above conditions for modified
+versions, except that this permission notice may be stated in a
+translation approved by the Foundation.
 @end copying
 
 @titlepage
 @title Finding Files
 @subtitle Edition @value{EDITION}, for GNU @code{find} version @value{VERSION}
 @subtitle @value{UPDATED}
-@author by David MacKenzie
+@author by David MacKenzie and James Youngman
 
 @page
 @vskip 0pt plus 1filll
@@ -69,11 +69,13 @@ by the Foundation.
 @contents
 
 @ifnottex
-@node Top, Introduction, , (dir)
+@node Top
+@top GNU Findutils
 @comment  node-name,  next,  previous,  up
 
 This file documents the GNU utilities for finding files that match
 certain criteria and performing various actions on them.
+
 This is edition @value{EDITION}, for @code{find} version @value{VERSION}.
 @end ifnottex
 
@@ -83,37 +85,65 @@ This is edition @value{EDITION}, for @co
 * Introduction::                Summary of the tasks this manual describes.
 * Finding Files::               Finding files that match certain criteria.
 * Actions::                     Doing things to files you have found.
-* Common Tasks::                Solutions to common real-world problems.
 * Databases::                   Maintaining file name databases.
 * File Permissions::            How to control access to files.
+* Date input formats::          Specifying literal times.
 * Reference::                   Summary of how to invoke the programs.
+* Common Tasks::                Solutions to common real-world problems.
+* Worked Examples::             Examples demonstrating more complex points.
 * Security Considerations::     Security issues relating to findutils.
 * Error Messages::              Explanations of some messages you might see.
 * Primary Index::               The components of @code{find} expressions.
 @end menu
 
-@node Introduction, Finding Files, Top, Top
+@node Introduction
 @chapter Introduction
 
-This manual shows how to find files that meet criteria you specify, and
-how to perform various actions on the files that you find.  The
-principal programs that you use to perform these tasks are @code{find},
-@code{locate}, and @code{xargs}.  Some of the examples in this manual
-use capabilities specific to the GNU versions of those programs.
-
-GNU @code{find} was originally written by Eric Decker, with enhancements
-by David MacKenzie, Jay Plett, and Tim Wood.  GNU @code{xargs} was
-originally written by Mike Rendell, with enhancements by David
-MacKenzie.  GNU @code{locate} and its associated utilities were
-originally written by James Woods, with enhancements by David MacKenzie.
-The idea for @samp{find -print0} and @samp{xargs -0} came from Dan
-Bernstein.  The current maintainer of GNU findutils (and this manual) is
-James Youngman.  Many other people have contributed bug fixes, small
-improvements, and helpful suggestions.  Thanks!
-
-Mail suggestions and bug reports for these programs to
-@code{bug-findutils@@gnu.org}.  Please include the version
-number, which you can get by running @samp{find --version}.
+This manual shows how to find files that meet criteria you specify,
+and how to perform various actions on the files that you find.  The
+principal programs that you use to perform these tasks are
+@code{find}, @code{locate}, and @code{xargs}.  Some of the examples in
+this manual use capabilities specific to the GNU versions of those
+programs.
+
+GNU @code{find} was originally written by Eric Decker, with
+enhancements by David MacKenzie, Jay Plett, and Tim Wood.  GNU
+@code{xargs} was originally written by Mike Rendell, with enhancements
+by David MacKenzie.  GNU @code{locate} and its associated utilities
+were originally written by James Woods, with enhancements by David
+MacKenzie.  The idea for @samp{find -print0} and @samp{xargs -0} came
+from Dan Bernstein.  The current maintainer of GNU findutils (and this
+manual) is James Youngman.  Many other people have contributed bug
+fixes, small improvements, and helpful suggestions.  Thanks!
+
+To report a bug in GNU findutils, please use the form on the Savannah
+web site at
+@code{http://savannah.gnu.org/bugs/?group=findutils}.  Reporting bugs
+this way means that you will then be able to track progress in fixing
+the problem.  
+
+If you don't have web access, you can also just send mail to the
+mailing list.  The mailing list @email{bug-findutils@@gnu.org} carries
+discussion of bugs in findutils, questions and answers about the
+software and discussion of the development of the programs.  To join
+the list, send email to @email{bug-findutils-request@@gnu.org}.
+
+Please read any relevant sections of this manual before asking for
+help on the mailing list.  You may also find it helpful to read the
+NON-BUGS section of the @code{find} manual page.
+
+If you ask for help on the mailing list, people will be able to help
+you much more effectively if you include the following things:
+
+@itemize @bullet
+@item The version of the software you are running.  You can find this
+out by running @samp{locate --version}.
+@item What you were trying to do
+@item The @emph{exact} command line you used
+@item The @emph{exact} output you got (if this is very long, try to
+find a smaller example which exhibits the same problem)
+@item The output you expected to get
+@end itemize
 
 @menu
 * Scope::
@@ -124,12 +154,12 @@ number, which you can get by running @sa
 @node Scope
 @section Scope
 
-For brevity, the word @dfn{file} in this manual means a regular file, a
-directory, a symbolic link, or any other kind of node that has a
-directory entry.  A directory entry is also called a @dfn{file name}.  A
-file name may contain some, all, or none of the directories in a path
-that leads to the file.  These are all examples of what this manual
-calls ``file names'':
+For brevity, the word @dfn{file} in this manual means a regular file,
+a directory, a symbolic link, or any other kind of node that has a
+directory entry.  A directory entry is also called a @dfn{file name}.
+A file name may contain some, all, or none of the directories in a
+path that leads to the file.  These are all examples of what this
+manual calls ``file names'':
 
 @example
 parser.c
@@ -139,9 +169,9 @@ fred/.cshrc
 /usr/local/include/termcap.h
 @end example
 
-A @dfn{directory tree} is a directory and the files it contains, all of
-its subdirectories and the files they contain, etc.  It can also be a
-single non-directory file.
+A @dfn{directory tree} is a directory and the files it contains, all
+of its subdirectories and the files they contain, etc.  It can also be
+a single non-directory file.
 
 These programs enable you to find the files in one or more directory
 trees that:
@@ -160,7 +190,7 @@ are of a certain type (regular file, dir
 @item
 are owned by a certain user or group;
 @item
-have certain access permissions;
+have certain access permissions or special mode bits;
 @item
 contain text that matches a certain pattern;
 @item
@@ -172,9 +202,9 @@ or some combination of the above.
 Once you have found the files you're looking for (or files that are
 potentially the ones you're looking for), you can do more to them than
 simply list their names.  You can get any combination of the files'
-attributes, or process the files in many ways, either individually or in
-groups of various sizes.  Actions that you might want to perform on the
-files you have found include, but are not limited to:
+attributes, or process the files in many ways, either individually or
+in groups of various sizes.  Actions that you might want to perform on
+the files you have found include, but are not limited to:
 
 @itemize @bullet
 @item
@@ -207,13 +237,16 @@ find @r{[}@var{file}@dots{}@r{]} @r{[}@v
 @end example
 
 @noindent
-Here is a typical use of @code{find}.  This example prints the names of
-all files in the directory tree rooted in @file{/usr/src} whose name
-ends with @samp{.c} and that are larger than 100 Kilobytes.
+Here is a typical use of @code{find}.  This example prints the names
+of all files in the directory tree rooted in @file{/usr/src} whose
+name ends with @samp{.c} and that are larger than 100 Kilobytes.
 @example
 find /usr/src -name '*.c' -size +100k -print
 @end example
 
+Notice that the wildcard must be enclosed in quotes in order to
+protect it from expansion by the shell.
+
 @code{locate} searches special file name databases for file names that
 match patterns.  The system administrator runs the @code{updatedb}
 program to create the databases.  @code{locate} is run like this:
@@ -224,18 +257,18 @@ locate @r{[}@var{option}@dots{}@r{]} @va
 
 @noindent
 This example prints the names of all files in the default file name
-database whose name ends with @samp{Makefile} or @samp{makefile}.  Which
-file names are stored in the database depends on how the system
+database whose name ends with @samp{Makefile} or @samp{makefile}.
+Which file names are stored in the database depends on how the system
 administrator ran @code{updatedb}.
 @example
 locate '*[Mm]akefile'
 @end example
 
-The name @code{xargs}, pronounced EX-args, means ``combine arguments.''
-@code{xargs} builds and executes command lines by gathering together
-arguments it reads on the standard input.  Most often, these arguments
-are lists of file names generated by @code{find}.  @code{xargs} is run
-like this:
+The name @code{xargs}, pronounced EX-args, means ``combine
+arguments.''  @code{xargs} builds and executes command lines by
+gathering together arguments it reads on the standard input.  Most
+often, these arguments are lists of file names generated by
+@code{find}.  @code{xargs} is run like this:
 
 @example
 xargs @r{[}@var{option}@dots{}@r{]} @r{[}@var{command} @r{[}@var{initial-arguments}@r{]}@r{]}
@@ -252,15 +285,16 @@ xargs grep typedef < file-list
 @node find Expressions
 @section @code{find} Expressions
 
-The expression that @code{find} uses to select files consists of one or
-more @dfn{primaries}, each of which is a separate command line argument
-to @code{find}.  @code{find} evaluates the expression each time it
-processes a file.  An expression can contain any of the following types
-of primaries:
+The expression that @code{find} uses to select files consists of one
+or more @dfn{primaries}, each of which is a separate command line
+argument to @code{find}.  @code{find} evaluates the expression each
+time it processes a file.  An expression can contain any of the
+following types of primaries:
 
 @table @dfn
 @item options
-affect overall operation rather than the processing of a specific file;
+affect overall operation rather than the processing of a specific
+file;
 @item tests
 return a true or false value, depending on the file's attributes;
 @item actions
@@ -273,17 +307,21 @@ evaluated.
 You can omit the operator between two primaries; it defaults to
 @samp{-and}.  @xref{Combining Primaries With Operators}, for ways to
 connect primaries into more complex expressions.  If the expression
-contains no actions other than @samp{-prune}, @samp{-print} is performed
-on all files for which the entire expression is true (@pxref{Print File
-Name}).
+contains no actions other than @samp{-prune}, @samp{-print} is
+performed on all files for which the entire expression is true
+(@pxref{Print File Name}).
 
 Options take effect immediately, rather than being evaluated for each
 file when their place in the expression is reached.  Therefore, for
 clarity, it is best to place them at the beginning of the expression.
+There are two exceptions to this; @samp{-daystart} and @samp{-follow}
+have different effects depending on where in the command line they
+appear.  This can be confusing, so it's best to keep them at the
+beginning, too.
 
 Many of the primaries take arguments, which immediately follow them in
-the next command line argument to @code{find}.  Some arguments are file
-names, patterns, or other strings; others are numbers.  Numeric
+the next command line argument to @code{find}.  Some arguments are
+file names, patterns, or other strings; others are numbers.  Numeric
 arguments can be specified as
 
 @table @code
@@ -295,12 +333,12 @@ for less than @var{n},
 for exactly @var{n}.
 @end table
 
-@node Finding Files, Actions, Introduction, Top
+@node Finding Files
 @chapter Finding Files
 
 By default, @code{find} prints to the standard output the names of the
-files that match the given criteria.  @xref{Actions}, for how to get more
-information about the matching files.
+files that match the given criteria.  @xref{Actions}, for how to get
+more information about the matching files.
 
 
 @menu
@@ -310,7 +348,7 @@ information about the matching files.
 * Size::
 * Type::
 * Owner::
-* Permissions::
+* Mode Bits::
 * Contents::
 * Directories::
 * Filesystems::
@@ -320,14 +358,15 @@ information about the matching files.
 @node Name
 @section Name
 
-Here are ways to search for files whose name matches a certain pattern.
-@xref{Shell Pattern Matching}, for a description of the @var{pattern}
-arguments to these tests.
-
-Each of these tests has a case-sensitive version and a case-insensitive
-version, whose name begins with @samp{i}.  In a case-insensitive
-comparison, the patterns @samp{fo*} and @samp{F??} match the file names
-@file{Foo}, @samp{FOO}, @samp{foo}, @samp{fOo}, etc.
+Here are ways to search for files whose name matches a certain
+pattern.  @xref{Shell Pattern Matching}, for a description of the
+@var{pattern} arguments to these tests.
+
+Each of these tests has a case-sensitive version and a
+case-insensitive version, whose name begins with @samp{i}.  In a
+case-insensitive comparison, the patterns @samp{fo*} and @samp{F??}
+match the file names @file{Foo}, @samp{FOO}, @samp{foo}, @samp{fOo},
+etc.
 
 @menu
 * Base Name Patterns::
@@ -341,20 +380,31 @@ comparison, the patterns @samp{fo*} and
 
 @deffn Test -name pattern
 @deffnx Test -iname pattern
-True if the base of the file name (the path with the leading directories
-removed) matches shell pattern @var{pattern}.  For @samp{-iname}, the
-match is case-insensitive.  To ignore a whole directory tree, use
-@samp{-prune} (@pxref{Directories}).  As an example, to find Texinfo
-source files in @file{/usr/local/doc}:
+True if the base of the file name (the path with the leading
+directories removed) matches shell pattern @var{pattern}.  For
+@samp{-iname}, the match is case-insensitive.@footnote{Because we
+need to perform case-insensitive matching, the GNU fnmatch
+implementation is always used; if the C library includes the GNU
+implementation, we use that and otherwise we use the one from gnulib}
+To ignore a whole directory tree, use @samp{-prune}
+(@pxref{Directories}).  As an example, to find Texinfo source files in
+@file{/usr/local/doc}:
 
 @example
 find /usr/local/doc -name '*.texi'
 @end example
-@end deffn
 
-Patterns for @samp{-name} and @samp{-iname} will match a filename with
-a leading @samp{.}.  For example the command @samp{find /tmp -name
-\*bar} will match the file @file{/tmp/.foobar}.
+Notice that the wildcard must be enclosed in quotes in order to
+protect it from expansion by the shell.
+
+As of findutils version 4.2.2, patterns for @samp{-name} and
+@samp{-iname} will match a file name with a leading @samp{.}.  For
+example the command @samp{find /tmp -name \*bar} will match the file
+@file{/tmp/.foobar}.  Braces within the pattern (@samp{@{@}}) are not
+considered to be special (that is, @code{find . -name 'foo@{1,2@}'}
+matches a file named @file{foo@{1,2@}}, not the files @file{foo1} and
+@file{foo2}.
+@end deffn
 
 
 @node Full Name Patterns
@@ -367,27 +417,60 @@ under which the file was found, matches
 For @samp{-iwholename}, the match is case-insensitive.  To ignore a
 whole directory tree, use @samp{-prune} rather than checking every
 file in the tree (@pxref{Directories}).  The ``entire file name'' as
-used by find starts with the starting-point specified on the command
-line, and is not converted to an absolute pathname, so for example
-@code{cd /; find tmp -wholename /tmp} will never match anything.
+used by @code{find} starts with the starting-point specified on the
+command line, and is not converted to an absolute pathname, so for
+example @code{cd /; find tmp -wholename /tmp} will never match
+anything.
 @end deffn
 
 @deffn Test -path pattern
 @deffnx Test -ipath pattern
-These tests are deprecated, but work as for @samp{-wholename} and @samp{-iwholename},
-respectively.  The @samp{-ipath} test is a GNU extension, but @samp{-path} is also 
-provided by HP-UX @code{find}.
+These tests are deprecated, but work as for @samp{-wholename} and
+@samp{-iwholename}, respectively.  The @samp{-ipath} test is a GNU
+extension, but @samp{-path} is also provided by HP-UX @code{find}.
 @end deffn
 
 @deffn Test -regex expr
 @deffnx Test -iregex expr
 True if the entire file name matches regular expression @var{expr}.
-This is a match on the whole path, not a search.  For example, to match
-a file named @file{./fubar3}, you can use the regular expression
-@samp{.*bar.} or @samp{.*b.*3}, but not @samp{f.*r3}.  @xref{Regexps, ,
-Syntax of Regular Expressions, emacs, The GNU Emacs Manual}, for a
+This is a match on the whole path, not a search.  For example, to
+match a file named @file{./fubar3}, you can use the regular expression
+@samp{.*bar.} or @samp{.*b.*3}, but not @samp{f.*r3}.  @xref{Regexps,
+, Syntax of Regular Expressions, emacs, The GNU Emacs Manual}, for a
 description of the syntax of regular expressions.  For @samp{-iregex},
-the match is case-insensitive.
+the match is case-insensitive.  There are several varieties of regular
+expressions; by default this test uses POSIX basic regular
+expressions, but this can be changed with the option
+@samp{-regextype}.
+@end deffn
+
+@deffn Option -regextype name
+This option controls the variety of regular expression syntax
+understood by the @samp{-regex} and @samp{-iregex} tests.  This option
+is positional; that is, it only affects regular expressions which
+occur later in the command line.  If this option is not given, GNU
+Emacs regular expressions are assumed.  Currently-implemented types
+are
+
+
+@table @samp
+@item emacs
+Regular expressions compatible with GNU Emacs; this is also the
+default behaviour if this option is not used.
+@item posix-awk
+Regular expressions compatible with the POSIX awk command (not GNU awk)
+@item posix-basic
+POSIX Basic Regular Expressions.
+@item posix-egrep
+Regular expressions compatible with the POSIX egrep command
+@item posix-extended
+POSIX Extended Regular Expressions
+@end table
+
+@ref{Regular Expressions} for more information on the regular
+expression dialects understood by GNU findutils.
+
+
 @end deffn
 
 @node Fast Full Name Search
@@ -396,9 +479,9 @@ the match is case-insensitive.
 To search for files by name without having to actually scan the
 directories on the disk (which can be slow), you can use the
 @code{locate} program.  For each shell pattern you give it,
-@code{locate} searches one or more databases of file names and displays
-the file names that contain the pattern.  @xref{Shell Pattern Matching},
-for details about shell patterns.
+@code{locate} searches one or more databases of file names and
+displays the file names that contain the pattern.  @xref{Shell Pattern
+Matching}, for details about shell patterns.
 
 If a pattern is a plain string---it contains no
 metacharacters---@code{locate} displays all file names in the database
@@ -407,10 +490,10 @@ metacharacters, @code{locate} only displ
 pattern exactly.  As a result, patterns that contain metacharacters
 should usually begin with a @samp{*}, and will most often end with one
 as well.  The exceptions are patterns that are intended to explicitly
-match the beginning or end of a file name.   
+match the beginning or end of a file name.
 
 If you only want @code{locate} to match against the last component of
-the filenames (the ``base name'' of the files) you can use the
+the file names (the ``base name'' of the files) you can use the
 @samp{--basename} option.  The opposite behaviour is the default, but
 can be selected explicitly by using the option @samp{--wholename}.
 
@@ -436,8 +519,8 @@ choose the file name of the default data
 the databases are updated, and the directories for which they contain
 entries.
 
-Here is how to select which file name databases @code{locate} searches.
-The default is system-dependent.
+Here is how to select which file name databases @code{locate}
+searches.  The default is system-dependent.
 
 @table @code
 @item --database=@var{path}
@@ -457,9 +540,9 @@ names, to shell patterns.  A @dfn{shell
 contain the following special characters, which are known as
 @dfn{wildcards} or @dfn{metacharacters}.
 
-You must quote patterns that contain metacharacters to prevent the shell
-from expanding them itself.  Double and single quotes both work; so does
-escaping with a backslash.
+You must quote patterns that contain metacharacters to prevent the
+shell from expanding them itself.  Double and single quotes both work;
+so does escaping with a backslash.
 
 @table @code
 @item *
@@ -470,13 +553,13 @@ Matches any one character.
 
 @item [@var{string}]
 Matches exactly one character that is a member of the string
-@var{string}.  This is called a @dfn{character class}.  As a shorthand,
-@var{string} may contain ranges, which consist of two characters with a
-dash between them.  For example, the class @samp{[a-z0-9_]} matches a
-lowercase letter, a number, or an underscore.  You can negate a class by
-placing a @samp{!} or @samp{^} immediately after the opening bracket.
-Thus, @samp{[^A-Z@@]} matches any character except an uppercase letter
-or an at sign.
+@var{string}.  This is called a @dfn{character class}.  As a
+shorthand, @var{string} may contain ranges, which consist of two
+characters with a dash between them.  For example, the class
+@samp{[a-z0-9_]} matches a lowercase letter, a number, or an
+underscore.  You can negate a class by placing a @samp{!} or @samp{^}
+immediately after the opening bracket.  Thus, @samp{[^A-Z@@]} matches
+any character except an uppercase letter or an at sign.
 
 @item \
 Removes the special meaning of the character that follows it.  This
@@ -484,16 +567,16 @@ works even in character classes.
 @end table
 
 In the @code{find} tests that do shell pattern matching (@samp{-name},
-@samp{-wholename}, etc.), wildcards in the pattern will match a @samp{.}
-at the beginning of a file name.  This is also the case for
+@samp{-wholename}, etc.), wildcards in the pattern will match a
+@samp{.}  at the beginning of a file name.  This is also the case for
 @code{locate}.  Thus, @samp{find -name '*macs'} will match a file
 named @file{.emacs}, as will @samp{locate '*macs'}.
 
 Slash characters have no special significance in the shell pattern
-matching that @code{find} and @code{locate} do, unlike in the shell, in
-which wildcards do not match them.  Therefore, a pattern @samp{foo*bar}
-can match a file name @samp{foo3/bar}, and a pattern @samp{./sr*sc} can
-match a file name @samp{./src/misc}.
+matching that @code{find} and @code{locate} do, unlike in the shell,
+in which wildcards do not match them.  Therefore, a pattern
+@samp{foo*bar} can match a file name @samp{foo3/bar}, and a pattern
+@samp{./sr*sc} can match a file name @samp{./src/misc}.
 
 If you want to locate some files with the @samp{locate} command but
 don't need to see the full list you can use the @samp{--limit} option
@@ -506,8 +589,8 @@ display only the total number of matches
 There are two ways that files can be linked together.  @dfn{Symbolic
 links} are a special type of file whose contents are a portion of the
 name of another file.  @dfn{Hard links} are multiple directory entries
-for one file; the file names all have the same index node (@dfn{inode})
-number on the disk.
+for one file; the file names all have the same index node
+(@dfn{inode}) number on the disk.
 
 @menu
 * Symbolic Links::
@@ -533,19 +616,20 @@ finds them (and, if it later comes acros
 examine that, too).  If you would prefer @code{find} to dereference
 the links and examine the file that each link points to, specify the
 @samp{-L} option to @code{find}.  You can explicitly specify the
-default behaviour by using the @samp{-P} option.    The @samp{-H}
+default behaviour by using the @samp{-P} option.  The @samp{-H}
 option is a half-way-between option which ensures that any symbolic
 links listed on the command line are dereferenced, but other symbolic
 links are not.
 
 Symbolic links are different to ``hard links'' in the sense that you
-need permissions upon the linked-to file in order to be able to
+need permission to search the directories
+in the linked-to file name to
 dereference the link.  This can mean that even if you specify the
-@samp{-L} option, find may not be able to determine the properties of
-the file that the link points to (because you don't have sufficient
-permissions).  In this situation, @samp{find} uses the properties of
-the link itself.  This also occurs if a symbolic link exists but
-points to a file that is missing.
+@samp{-L} option, @code{find} may not be able to determine the
+properties of the file that the link points to (because you don't have
+sufficient permission).  In this situation, @code{find} uses the
+properties of the link itself.  This also occurs if a symbolic link
+exists but points to a file that is missing.
 
 The options controlling the behaviour of @code{find} with respect to
 links are as follows :-
@@ -554,24 +638,27 @@ links are as follows :-
 @item -P
 @code{find} does not dereference symbolic links at all.  This is the
 default behaviour.  This option must be specified before any of the
-path names on the command line.
+file names on the command line.
 @item -H
 @code{find} does not dereference symbolic links (except in the case of
 file names on the command line, which are dereferenced).  If a
 symbolic link cannot be dereferenced, the information for the symbolic
 link itself is used.  This option must be specified before any of the
-path names on the command line.
+file names on the command line.
 @item -L
 @code{find} dereferences symbolic links where possible, and where this
 is not possible it uses the properties of the symbolic link itself.
-This option must be specified before any of the path names on the
+This option must be specified before any of the file names on the
 command line.  Use of this option also implies the same behaviour as
-the @samp{-noleaf} option.   If you later use the @samp{-H} or
+the @samp{-noleaf} option.  If you later use the @samp{-H} or
 @samp{-P} options, this does not turn off @samp{-noleaf}.
 
 @item -follow
 This option forms part of the ``expression'' and must be specified
-after the path names, but it is otherwise equivalent to @samp{-L}.
+after the file names, but it is otherwise equivalent to @samp{-L}.
+The @samp{-follow} option affects only those tests which appear after
+it on the command line.  This option is deprecated.  Where possible,
+you should use @samp{-L} instead.
 @end table
 
 The following differences in behavior occur when the @samp{-L} option
@@ -586,13 +673,15 @@ directory trees.
 happen to match broken symbolic links).
 @item
 @samp{-type} reports the types of the files that symbolic links point
-to.
+to.  This means that in combination with @samp{-L}, @samp{-type l}
+will be true only for broken symbolic links.  To check for symbolic
+links when @samp{-L} has been specified, use @samp{-xtype l}.
 @item
 Implies @samp{-noleaf} (@pxref{Directories}).
 @end itemize
 
-If the @samp{-L} option or the @samp{-H} option is used, 
-the filenames used as arguments to @samp{-newer}, @samp{-anewer}, and
+If the @samp{-L} option or the @samp{-H} option is used,
+the file names used as arguments to @samp{-newer}, @samp{-anewer}, and
 @samp{-cnewer} are dereferenced and the timestamp from the pointed-to
 file is used instead (if possible -- otherwise the timestamp from the
 symbolic link is used).
@@ -603,8 +692,8 @@ True if the file is a symbolic link whos
 @var{pattern}.  For @samp{-ilname}, the match is case-insensitive.
 @xref{Shell Pattern Matching}, for details about the @var{pattern}
 argument.  If the @samp{-L} option is in effect, this test will always
-fail for symbolic links unless they are broken.  So, to list any
-symbolic links to @file{sysdep.c} in the current directory and its
+return false for symbolic links unless they are broken.  So, to list
+any symbolic links to @file{sysdep.c} in the current directory and its
 subdirectories, you can do:
 
 @example
@@ -635,10 +724,10 @@ occasionally turn up in log messages for
 are used to support the @code{ftok()} library function.
 
 You can learn a file's inode number and the number of links to it by
-running @samp{ls -li} or @samp{find -ls}.  
+running @samp{ls -li} or @samp{find -ls}.
 
 You can search for hard links to inode number NUM by using @samp{-inum
-NUM}. If there are any file system mount points below the directory
+NUM}. If there are any filesystem mount points below the directory
 where you are starting the search, use the @samp{-xdev} option unless
 you are also using the @samp{-L} option.  Using @samp{-xdev} this
 saves needless searching, since hard links to a file must be on the
@@ -652,15 +741,17 @@ are also matched.
 
 @deffn Test -inum n
 File has inode number @var{n}.  The @samp{+} and @samp{-} qualifiers
-also work, though these are rarely useful.
+also work, though these are rarely useful.  Much of the time it is
+easier to use @samp{-samefile} rather than this option.
 @end deffn
 
-You can also search for files that have a certain number of links, with
-@samp{-links}.  Directories normally have at least two hard links; their
-@file{.} entry is the second one.  If they have subdirectories, each of
-those also has a hard link called @file{..} to its parent directory.
-The @file{.} and @file{..} directory entries are not normally searched
-unless they are mentioned on the @code{find} command line.
+You can also search for files that have a certain number of links,
+with @samp{-links}.  Directories normally have at least two hard
+links; their @file{.} entry is the second one.  If they have
+subdirectories, each of those also has a hard link called @file{..} to
+its parent directory.  The @file{.} and @file{..} directory entries
+are not normally searched unless they are mentioned on the @code{find}
+command line.
 
 @deffn Test -links n
 File has @var{n} hard links.
@@ -677,8 +768,8 @@ File has fewer than @var{n} hard links.
 @node Time
 @section Time
 
-Each file has three time stamps, which record the last time that certain
-operations were performed on the file:
+Each file has three time stamps, which record the last time that
+certain operations were performed on the file:
 
 @enumerate
 @item
@@ -689,10 +780,16 @@ change the status (modify the file or it
 modify (change the file's contents)
 @end enumerate
 
-There is no timestamp that indicates when a file was @emph{created}.
+Some systems also provide a timestamp that indicates when a file was
+@emph{created}.   For example, the UFS2 fileystem under NetBSD-3.1
+records the @emph{birth time} of each file.  This information is also
+available under other versions of BSD and some versions of Cygwin.
+However, even on systems which support file birth time, files may
+exist for which this information was not recorded (for example, UFS1
+file systems simply do not contain this information).
 
 You can search for files whose time stamps are within a certain age
-range, or compare them to other time stamps.  
+range, or compare them to other time stamps.
 
 @menu
 * Age Ranges::
@@ -712,17 +809,19 @@ True if the file was last accessed (or i
 modified) @var{n}*24 hours ago.  The number of 24-hour periods since
 the file's timestamp is always rounded down; therefore 0 means ``less
 than 24 hours ago'', 1 means ``between 24 and 48 hours ago'', and so
-forth.
+forth.  Fractional values are supported but this only really makes
+sense for the case where ranges (@samp{+@var{n}} and @samp{-@var{n}})
+are used.
 @end deffn
 
 @deffn Test -amin n
 @deffnx Test -cmin n
 @deffnx Test -mmin n
 True if the file was last accessed (or its status changed, or it was
-modified) @var{n} minutes ago.  These tests provide finer granularity of
-measurement than @samp{-atime} et al., but rounding is done in a 
-similar way.  For example, to list files in
-@file{/u/bill} that were last read from 2 to 6 minutes ago:
+modified) @var{n} minutes ago.  These tests provide finer granularity
+of measurement than @samp{-atime} et al., but rounding is done in a
+similar way (again, fractions are supported).  For example, to list
+files in @file{/u/bill} that were last read from 2 to 6 minutes ago:
 
 @example
 find /u/bill -amin +2 -amin -6
@@ -730,29 +829,75 @@ find /u/bill -amin +2 -amin -6
 @end deffn
 
 @deffn Option -daystart
-Measure times from the beginning of today rather than from 24 hours ago.
-So, to list the regular files in your home directory that were modified
-yesterday, do
+Measure times from the beginning of today rather than from 24 hours
+ago.  So, to list the regular files in your home directory that were
+modified yesterday, do
 
 @example
-find ~ -daystart -type f -mtime 1
+find ~/ -daystart -type f -mtime 1
 @end example
-@end deffn
 
 The @samp{-daystart} option is unlike most other options in that it
 has an effect on the way that other tests are performed.  The affected
 tests are @samp{-amin}, @samp{-cmin}, @samp{-mmin}, @samp{-atime},
-@samp{-ctime} and @samp{-mtime}.
+@samp{-ctime} and @samp{-mtime}.  The @samp{-daystart} option only
+affects the behaviour of any tests which appear after it on the
+command line.
+@end deffn
 
 @node Comparing Timestamps
 @subsection Comparing Timestamps
 
-As an alternative to comparing timestamps to the current time, you can
-compare them to another file's timestamp.  That file's timestamp could
-be updated by another program when some event occurs.  Or you could set
-it to a particular fixed date using the @code{touch} command.  For
-example, to list files in @file{/usr} modified after February 1 of the
-current year:
+@deffn Test -newerXY reference
+Succeeds if timestamp @samp{X} of the file being considered is newer
+than timestamp @samp{Y} of the file @file{reference}.   The latters
+@samp{X} and @samp{Y} can be any of the following letters:
+
+@table @samp
+@item a
+Last-access time of @file{reference}
+@item B
+Birth time of @file{reference} (when this is not known, the test cannot succeed)
+@item c
+Last-change time of @file{reference}
+@item m
+Last-modification time of @file{reference}
+@item t
+The @file{reference} argument is interpreted as a literal time, rather
+than the name of a file.  @xref{Date input formats}, for a description
+of how the timestamp is understood.  Tests of the form @samp{-newerXt}
+are valid but tests of the form @samp{-newertY} are not.
+@end table
+
+For example the test @code{-newerac /tmp/foo} succeeds for all files
+which have been accessed more recently than @file{/tmp/foo} was
+changed.   Here @samp{X} is @samp{a} and @samp{Y} is @samp{c}.   
+
+Not all files have a known birth time.  If @samp{Y} is @samp{b} and
+the birth time of @file{reference} is not available, @code{find} exits
+with an explanatory error message.  If @samp{X} is @samp{b} and we do
+not know the birth time the file currently being considered, the test
+simply fails (that is, it behaves like @code{-false} does).
+
+Some operating systems (for example, most implementations of Unix) do
+not support file birth times.  Some others, for example NetBSD-3.1,
+do.  Even on operating systems which support file birth times, the
+information may not be available for specific files.  For example,
+under NetBSD, file birth times are supported on UFS2 file systems, but
+not UFS1 file systems.
+
+@end deffn
+
+
+
+There are two ways to list files in @file{/usr} modified after
+February 1 of the current year.  One uses @samp{-newermt}:
+
+@example
+find /usr -newermt "Feb 1"
+@end example
+
+The other way of doing this works on the versions of find before 4.3.3:
 
 @c Idea from Rick Sladkey.
 @example
@@ -800,9 +945,9 @@ kilobytes (1024 bytes)
 @item w
 2-byte words
 @item M
-Megabytes
+Megabytes (units of 1048576 bytes)
 @item G
-Gigabytes
+Gigabytes (units of 1073741824 bytes)
 @end table
 
 The `b' suffix always considers blocks to be 512 bytes.  This is not
@@ -813,10 +958,10 @@ the @samp{-ls} action).  If you want to
 
 The number can be prefixed with a `+' or a `-'.  A plus sign indicates
 that the test should succeed if the file uses at least @var{n} units
-of storage (this is the way I normally use this test) and a minus sign
+of storage (a common use of this test) and a minus sign
 indicates that the test should succeed if the file uses less than
-@var{n} units of storage.   There is no `=' prefix, because that's the 
-default anyway.  
+@var{n} units of storage.  There is no `=' prefix, because that's the
+default anyway.
 
 The size does not count indirect blocks, but it does count blocks in
 sparse files that are not actually allocated.  In other words, it's
@@ -828,8 +973,8 @@ and @samp{%b} format specifiers for the
 
 @deffn Test -empty
 True if the file is empty and is either a regular file or a directory.
-This might make it a good candidate for deletion.  This test is useful
-with @samp{-depth} (@pxref{Directories}) and @samp{-delete}
+This might help determine good candidates for deletion.  This test is
+useful with @samp{-depth} (@pxref{Directories}) and @samp{-delete}
 (@pxref{Single File}).
 @end deffn
 
@@ -851,7 +996,9 @@ named pipe (FIFO)
 @item f
 regular file
 @item l
-symbolic link
+symbolic link; if @samp{-L} is in effect, this is true only for broken
+symbolic links.  If you want to search for symbolic links when
+@samp{-L} is in effect, use @samp{-xtype} instead of @samp{-type}.
 @item s
 socket
 @item D
@@ -860,12 +1007,34 @@ door (Solaris)
 @end deffn
 
 @deffn Test -xtype c
-The same as @samp{-type} unless the file is a symbolic link.  For
-symbolic links: if @samp{-follow} has not been given, true if the file
-is a link to a file of type @var{c}; if @samp{-follow} has been given,
-true if @var{c} is @samp{l}.  In other words, for symbolic links,
-@samp{-xtype} checks the type of the file that @samp{-type} does not
-check.  @xref{Symbolic Links}, for more information on @samp{-follow}.
+This test behaves the same as @samp{-type} unless the file is a
+symbolic link.  If the file is a symbolic link, the result is as
+follows (in the table below, @samp{X} should be understood to
+represent any letter except @samp{l}):
+
+@table @samp
+@item @samp{-P -xtype l}
+True if the symbolic link is broken
+@item @samp{-P -xtype X}
+True if the (ultimate) target file is of type @samp{X}.
+@item @samp{-L -xtype l}
+Always true
+@item @samp{-L -xtype X}
+False unless the symbolic link is broken
+@end table
+
+In other words, for symbolic links, @samp{-xtype} checks the type of
+the file that @samp{-type} does not check.  
+
+The @samp{-H} option also affects the behaviour of @samp{-xtype}.
+When @samp{-H} is in effect, @samp{-xtype} behaves as if @samp{-L} had
+been specified when examining files listed on the command line, and as
+if @samp{-P} had been specified otherwise.  If neither @samp{-H} nor
+@samp{-L} was specified, @samp{-xtype} behaves as if @samp{-P} had
+been specified.
+
+@xref{Symbolic Links}, for more information on @samp{-follow} and
+@samp{-L}.
 @end deffn
 
 @node Owner
@@ -873,8 +1042,8 @@ check.  @xref{Symbolic Links}, for more
 
 @deffn Test -user uname
 @deffnx Test -group gname
-True if the file is owned by user @var{uname} (belongs to group @var{gname}).
-A numeric ID is allowed.
+True if the file is owned by user @var{uname} (belongs to group
+@var{gname}).  A numeric ID is allowed.
 @end deffn
 
 @deffn Test -uid n
@@ -887,84 +1056,151 @@ support ranges (@samp{+@var{n}} and @sam
 @deffn Test -nouser
 @deffnx Test -nogroup
 True if no user corresponds to the file's numeric user ID (no group
-corresponds to the numeric group ID).  These cases usually mean that the
-files belonged to users who have since been removed from the system.
-You probably should change the ownership of such files to an existing
-user or group, using the @code{chown} or @code{chgrp} program.
+corresponds to the numeric group ID).  These cases usually mean that
+the files belonged to users who have since been removed from the
+system.  You probably should change the ownership of such files to an
+existing user or group, using the @code{chown} or @code{chgrp}
+program.
 @end deffn
 
-@node Permissions
-@section Permissions
+@node Mode Bits
+@section File Mode Bits
 
-@xref{File Permissions}, for information on how file permissions are
+@xref{File Permissions}, for information on how file mode bits are
 structured and how to specify them.
 
-@deffn Test -perm mode
-
-True if the file's permissions are exactly @var{mode} (which can be
-numeric or symbolic).
-
-If @var{mode} starts with @samp{-}, true if
-@emph{all} of the permissions set in @var{mode} are set for the file;
-permissions not set in @var{mode} are ignored.
-If @var{mode} starts with @samp{+}, true if
-@emph{any} of the permissions set in @var{mode} are set for the file;
-permissions not set in @var{mode} are ignored.
+Four tests determine what users can do with files.  These are
+@samp{-readable}, @samp{-writable}, @samp{-executable} and
+@samp{-perm}.  The first three tests ask the operating system if the
+current user can perform the relevant operation on a file, while
+@samp{-perm} just examines the file's mode.  The file mode may give
+a misleading impression of what the user can actually do, because the
+file may have an access control list, or exist on a read-only
+filesystem, for example.  Of these four tests though, only
+@samp{-perm} is specified by the POSIX standard.
+
+The @samp{-readable}, @samp{-writable} and @samp{-executable} tests
+are implemented via the @code{access} system call.  This is
+implemented within the operating system itself.  If the file being
+considered is on an NFS filesystem, the remote system may allow or
+forbid read or write operations for reasons of which the NFS client
+cannot take account.  This includes user-ID mapping, either in the
+general sense or the more restricted sense in which remote superusers
+are treated by the NFS server as if they are the local user
+@samp{nobody} on the NFS server.
+
+None of the tests in this section should be used to verify that a user
+is authorised to perform any operation (on the file being tested or
+any other file) because of the possibility of a race condition.  That
+is, the situation may change between the test and an action being
+taken on the basis of the result of that test.
+
+
+@deffn Test -readable 
+True if the file can be read by the invoking user.
+@end deffn
+
+@deffn Test -writable
+True if the file can be written by the invoking user.  This is an
+in-principle check, and other things may prevent a successful write
+operation; for example, the filesystem might be full.
+@end deffn
+
+@deffn Test -executable
+True if the file can be executed/searched by the invoking user.
+@end deffn
+
+@deffn Test -perm pmode
+
+True if the file's mode bits match @var{pmode}, which can be
+either a symbolic or numeric @var{mode} (@pxref{File Permissions})
+optionally prefixed by @samp{-} or @samp{/}.
+
+A @var{pmode} that starts with neither @samp{-} nor @samp{/} matches
+if @var{mode} exactly matches the file mode bits.
+
+A @var{pmode} that starts with @samp{-} matches if
+@emph{all} the file mode bits set in @var{mode} are set for the file;
+bits not set in @var{mode} are ignored.
+
+A @var{pmode} that starts with @samp{/} matches if
+@emph{any} of the file mode bits set in @var{mode} are set for the file;
+bits not set in @var{mode} are ignored.
+This is a GNU extension.
 
-
-If you don't use the @samp{+} or @samp{-} form with a symbolic mode
+If you don't use the @samp{/} or @samp{-} form with a symbolic mode
 string, you may have to specify a rather complex mode string.  For
-example @samp{-perm g=w} will only match files which have mode 0020
-(that is, ones for which group write permission is the only permission
-set).  It is more likely that you will want to use the @samp{+} or
+example @samp{-perm g=w} will only match files that have mode 0020
+(that is, ones for which group write permission is the only file mode bit
+set).  It is more likely that you will want to use the @samp{/} or
 @samp{-} forms, for example @samp{-perm -g=w}, which matches any file
 with group write permission.
 
 
 @table @samp
 @item -perm 664
-Match files which have read and write permission for their owner,
-and group, but which the rest of the world can read but not write to.  
-Files which meet these criteria but have other permissions bits set
-(for example if someone can execute the file) will not be matched.
+Match files that have read and write permission for their owner,
+and group, but that the rest of the world can read but not write to.
+Do not match files that meet these criteria but have other file mode
+bits set (for example if someone can execute/search the file).
 
 @item -perm -664
-Match files which have read and write permission for their owner,
-and group, but which the rest of the world can read but not write to,
-without regard to the presence of any extra permission bits (for
-example the executable bit).  This will match a file which has mode
+Match files that have read and write permission for their owner,
+and group, but that the rest of the world can read but not write to,
+without regard to the presence of any extra file mode bits (for
+example the executable bit).  This matches a file with mode
 0777, for example.
 
-@item -perm +222
-Match files which are writeable by somebody (their owner, or
+@item -perm /222
+Match files that are writable by somebody (their owner, or
 their group, or anybody else).
 
-@item -perm +022
-Match files which are writeable by either their owner or their
-group.  The files don't have to be writeable by both the owner and
+@item -perm /022
+Match files that are writable by either their owner or their
+group.  The files don't have to be writable by both the owner and
 group to be matched; either will do.
 
-@item -perm +g+w,o+w
+@item -perm /g+w,o+w
 As above.
 
-@item -perm +g=w,o=w
-As above
+@item -perm /g=w,o=w
+As above.
 
 @item -perm -022
-Search for files which are writeable by both their owner and their
+Match files that are writable by both their owner and their
 group.
 
+@item -perm -444 -perm /222 ! -perm /111
+Match files that are readable for everybody, have at least one
+write bit set (i.e., somebody can write to them), but that cannot be
+executed/searched by anybody.  Note that in some shells the @samp{!} must be
+escaped;.
+
+@item -perm -a+r -perm /a+w ! -perm /a+x
+As above.
+
+
 @item -perm -g+w,o+w
 As above.
 @end table
+
+@quotation Warning
+If you specify @samp{-perm /000} or @samp{-perm /mode} where the
+symbolic mode @samp{mode} has no bits set, the test currently matches
+no files.  This differs from the behaviour of @samp{-perm -000}, which
+matches all files.  The behaviour of @samp{-perm /000} will be changed
+to be consistent with the behaviour of @samp{-perm -000}.  The change
+will probably be made in early 2006.
+@end quotation
+
 @end deffn
 
 @node Contents
 @section Contents
 
-To search for files based on their contents, you can use the @code{grep}
-program.  For example, to find out which C source files in the current
-directory contain the string @samp{thing}, you can do:
+To search for files based on their contents, you can use the
+@code{grep} program.  For example, to find out which C source files in
+the current directory contain the string @samp{thing}, you can do:
 
 @example
 grep -l thing *.[ch]
@@ -978,12 +1214,12 @@ this:
 find . -name '*.[ch]' | xargs grep -l thing
 @end example
 
-The @samp{-l} option causes @code{grep} to print only the names of files
-that contain the string, rather than the lines that contain it.  The
-string argument (@samp{thing}) is actually a regular expression, so it
-can contain metacharacters.  This method can be refined a little by
-using the @samp{-r} option to make @code{xargs} not run @code{grep} if
-@code{find} produces no output, and using the @code{find} action
+The @samp{-l} option causes @code{grep} to print only the names of
+files that contain the string, rather than the lines that contain it.
+The string argument (@samp{thing}) is actually a regular expression,
+so it can contain metacharacters.  This method can be refined a little
+by using the @samp{-r} option to make @code{xargs} not run @code{grep}
+if @code{find} produces no output, and using the @code{find} action
 @samp{-print0} and the @code{xargs} option @samp{-0} to avoid
 misinterpreting files whose names contain spaces:
 
@@ -991,8 +1227,8 @@ misinterpreting files whose names contai
 find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing
 @end example
 
-For a fuller treatment of finding files whose contents match a pattern,
-see the manual page for @code{grep}.
+For a fuller treatment of finding files whose contents match a
+pattern, see the manual page for @code{grep}.
 
 @node Directories
 @section Directories
@@ -1003,8 +1239,8 @@ slice of a directory tree.
 
 @deffn Option -maxdepth levels
 Descend at most @var{levels} (a non-negative integer) levels of
-directories below the command line arguments.  @samp{-maxdepth 0} means
-only apply the tests and actions to the command line arguments.
+directories below the command line arguments.  @samp{-maxdepth 0}
+means only apply the tests and actions to the command line arguments.
 @end deffn
 
 @deffn Option -mindepth levels
@@ -1018,12 +1254,13 @@ Process each directory's contents before
 this is a good idea when producing lists of files to archive with
 @code{cpio} or @code{tar}.  If a directory does not have write
 permission for its owner, its contents can still be restored from the
-archive since the directory's permissions are restored after its contents.
+archive since the directory's permissions are restored after its
+contents.
 @end deffn
 
 @deffn Option -d
 This is a deprecated synonym for @samp{-depth}, for compatibility with
-Mac OS X, FreeBSD and OpenBSD.   The @samp{-depth} option is a POSIX
+Mac OS X, FreeBSD and OpenBSD.  The @samp{-depth} option is a POSIX
 feature, so it is better to use that.
 @end deffn
 
@@ -1065,25 +1302,27 @@ and returns false.
 
 @deffn Action -quit
 Exit immediately (with return value zero if no errors have occurred).
-No child processes will be left running, but no more paths specified
+No child processes will be left running, but no more files specified
 on the command line will be processed.  For example, @code{find
-/tmp/foo /tmp/bar -print -quit} will print only @samp{/tmp/foo}.
-@end deffn 
+/tmp/foo /tmp/bar -print -quit} will print only @samp{/tmp/foo}.  Any
+command lines which have been built by @samp{-exec ... \+} or
+@samp{-execdir ... \+} are invoked before the program is executed.
+@end deffn
 
 @deffn Option -noleaf
 Do not optimize by assuming that directories contain 2 fewer
 subdirectories than their hard link count.  This option is needed when
 searching filesystems that do not follow the Unix directory-link
 convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount
-points.  Each directory on a normal Unix filesystem has at least 2 hard
-links: its name and its @file{.}  entry.  Additionally, its
+points.  Each directory on a normal Unix filesystem has at least 2
+hard links: its name and its @file{.}  entry.  Additionally, its
 subdirectories (if any) each have a @file{..}  entry linked to that
 directory.  When @code{find} is examining a directory, after it has
-statted 2 fewer subdirectories than the directory's link count, it knows
-that the rest of the entries in the directory are non-directories
-(@dfn{leaf} files in the directory tree).  If only the files' names need
-to be examined, there is no need to stat them; this gives a significant
-increase in search speed.
+statted 2 fewer subdirectories than the directory's link count, it
+knows that the rest of the entries in the directory are
+non-directories (@dfn{leaf} files in the directory tree).  If only the
+files' names need to be examined, there is no need to stat them; this
+gives a significant increase in search speed.
 @end deffn
 
 @deffn Option -ignore_readdir_race
@@ -1097,11 +1336,15 @@ and so forth), because this scenario is
 directories.  Completely silencing error messages from @code{find} is
 undesirable, so this option neatly solves the problem.  There is no
 way to search one part of the filesystem with this option on and part
-of it with this option off, though.
+of it with this option off, though.  When this option is turned on and 
+find discovers that one of the start-point files specified on the
+command line does not exist, no error message will be issued.
+
 @end deffn
 
 @deffn Option -noignore_readdir_race
-This option reverses the effect of the @samp{-ignore_readdir_race} option.
+This option reverses the effect of the @samp{-ignore_readdir_race}
+option.
 @end deffn
 
 
@@ -1110,14 +1353,16 @@ This option reverses the effect of the @
 
 A @dfn{filesystem} is a section of a disk, either on the local host or
 mounted from a remote host over a network.  Searching network
-filesystems can be slow, so it is common to make @code{find} avoid them.
+filesystems can be slow, so it is common to make @code{find} avoid
+them.
 
 There are two ways to avoid searching certain filesystems.  One way is
 to tell @code{find} to only search one filesystem:
 
 @deffn Option -xdev
 @deffnx Option -mount
-Don't descend directories on other filesystems.  These options are synonyms.
+Don't descend directories on other filesystems.  These options are
+synonyms.
 @end deffn
 
 The other way is to check the type of filesystem each file is on, and
@@ -1131,11 +1376,11 @@ another is:
 @example
 ext2 ext3 proc sysfs ufs 4.2 4.3 nfs tmp mfs S51K S52K
 @end example
-You can use @samp{-printf} with the @samp{%F} directive to see the types
-of your filesystems.  The @samp{%D} directive shows the device number.
-@xref{Print File Information}.  @samp{-fstype} is
-usually used with @samp{-prune} to avoid searching remote filesystems
-(@pxref{Directories}). 
+You can use @samp{-printf} with the @samp{%F} directive to see the
+types of your filesystems.  The @samp{%D} directive shows the device
+number.  @xref{Print File Information}.  @samp{-fstype} is usually
+used with @samp{-prune} to avoid searching remote filesystems
+(@pxref{Directories}).
 @end deffn
 
 @node Combining Primaries With Operators
@@ -1153,7 +1398,8 @@ Force precedence.  True if @var{expr} is
 @itemx @asis{-not @var{expr}}
 @findex !
 @findex -not
-True if @var{expr} is false.
+True if @var{expr} is false.  In some shells, it is necessary to
+protect the @samp{!} from shell interpretation by quoting it.
 
 @item @asis{@var{expr1 expr2}}
 @itemx @asis{@var{expr1} -a @var{expr2}}
@@ -1173,7 +1419,7 @@ Or; @var{expr2} is not evaluated if @var
 List; both @var{expr1} and @var{expr2} are always evaluated.  True if
 @var{expr2} is true.  The value of @var{expr1} is discarded.  This
 operator lets you do multiple independent operations on one traversal,
-without depending on whether other operations succeeded.  The two 
+without depending on whether other operations succeeded.  The two
 operations @var{expr1} and @var{expr2} are not always fully
 independent, since @var{expr1} might have side effects like touching
 or deleting files, or it might use @samp{-prune} which would also
@@ -1181,10 +1427,10 @@ affect @var{expr2}.
 @end table
 
 @code{find} searches the directory tree rooted at each file name by
-evaluating the expression from left to right, according to the rules of
-precedence, until the outcome is known (the left hand side is false for
-@samp{-and}, true for @samp{-or}), at which point @code{find} moves on
-to the next file name.
+evaluating the expression from left to right, according to the rules
+of precedence, until the outcome is known (the left hand side is false
+for @samp{-and}, true for @samp{-or}), at which point @code{find}
+moves on to the next file name.
 
 There are two other tests that can be useful in complex expressions:
 
@@ -1196,14 +1442,15 @@ Always true.
 Always false.
 @end deffn
 
-@node Actions, Common Tasks, Finding Files, Top
+@node Actions
 @chapter Actions
 
 There are several ways you can print information about the files that
 match the criteria you gave in the @code{find} expression.  You can
 print the information either to the standard output or to a file that
 you name.  You can also execute commands that have the file names as
-arguments.  You can use those commands as further filters to select files.
+arguments.  You can use those commands as further filters to select
+files.
 
 @menu
 * Print File Name::
@@ -1217,18 +1464,67 @@ arguments.  You can use those commands a
 @section Print File Name
 
 @deffn Action -print
-True; print the full file name on the standard output, followed by a
-newline.
+True; print the entire file name on the standard output, followed by a
+newline.  If there is the faintest possibility that one of the files
+for which you are searching might contain a newline, you should use
+@samp{-print0} instead.
 @end deffn
 
 @deffn Action -fprint file
-True; print the full file name into file @var{file}, followed by a
+True; print the entire file name into file @var{file}, followed by a
 newline.  If @var{file} does not exist when @code{find} is run, it is
-created; if it does exist, it is truncated to 0 bytes.  The file names
-@file{/dev/stdout} and @file{/dev/stderr} are handled specially; they
-refer to the standard output and standard error output, respectively.
+created; if it does exist, it is truncated to 0 bytes.  The named
+output file is always created, even if no output is sent to it.  The
+file names @file{/dev/stdout} and @file{/dev/stderr} are handled
+specially; they refer to the standard output and standard error
+output, respectively.
+
+If there is the faintest possibility that one of the files for which
+you are searching might contain a newline, you should use
+@samp{-fprint0} instead.
 @end deffn
 
+
+@c @deffn Option -show-control-chars how
+@c This option affects how some of @code{find}'s actions treat
+@c unprintable characters in file names.  If @samp{how} is
+@c @samp{literal}, any subsequent actions (i.e., actions further on in the
+@c command line) print file names as-is.  
+@c 
+@c If this option is not specified, it currently defaults to @samp{safe}.
+@c If @samp{how} is @samp{safe}, C-like backslash escapes are used to
+@c indicate the non-printable characters for @samp{-ls} and @samp{-fls}.
+@c On the other hand, @samp{-print}, @samp{-fprint}, @samp{-fprintf} and
+@c @code{-printf} all quote unprintable characters if the data is going
+@c to a tty, and otherwise the data is emitted literally.
+@c 
+@c @table @code
+@c @item -ls
+@c Escaped if @samp{how} is @samp{safe}
+@c @item -fls
+@c Escaped if @samp{how} is @samp{safe}
+@c @item -print
+@c Always quoted if stdout is a tty,
+@c @samp{-show-control-chars} is ignored
+@c @item -print0
+@c Always literal, never escaped
+@c @item -fprint
+@c Always quoted if the destination is a tty;
+@c @samp{-show-control-chars} is ignored
+@c @item -fprint0
+@c Always literal, never escaped
+@c @item -fprintf
+@c If the destination is a tty, the @samp{%f}, 
+@c @samp{%F}, @samp{%h}, @samp{%l}, @samp{%p},
+@c and @samp{%P} directives produce quoted
+@c strings if stdout is a tty and are treated
+@c literally otherwise.
+@c @item -printf
+@c As for @code{-fprintf}.
+@c @end table
+@c @end deffn
+
+
 @node Print File Information
 @section Print File Information
 
@@ -1244,23 +1540,23 @@ The fields are:
 
 @enumerate
 @item
-The inode number of the file.  @xref{Hard Links}, for how to find files
-based on their inode number.
+The inode number of the file.  @xref{Hard Links}, for how to find
+files based on their inode number.
 
 @item
 the number of blocks in the file.  The block counts are of 1K blocks,
-unless the environment variable @code{POSIXLY_CORRECT} is set, in which
-case 512-byte blocks are used.  @xref{Size}, for how to find files based
-on their size.
+unless the environment variable @code{POSIXLY_CORRECT} is set, in
+which case 512-byte blocks are used.  @xref{Size}, for how to find
+files based on their size.
 
 @item
-The file's type and permissions.  The type is shown as a dash for a
+The file's type and file mode bits.  The type is shown as a dash for a
 regular file; for other file types, a letter like for @samp{-type} is
-used (@pxref{Type}).  The permissions are read, write, and execute for
-the file's owner, its group, and other users, respectively; a dash means
-the permission is not granted.  @xref{File Permissions}, for more details
-about file permissions.  @xref{Permissions}, for how to find files based
-on their permissions.
+used (@pxref{Type}).  The file mode bits are read, write, and execute/search for
+the file's owner, its group, and other users, respectively; a dash
+means the permission is not granted.  @xref{File Permissions}, for
+more details about file permissions.  @xref{Mode Bits}, for how to
+find files based on their file mode bits.
 
 @item
 The number of hard links to the file.
@@ -1278,14 +1574,18 @@ The file's size in bytes.
 The date the file was last modified.
 
 @item
-The file's name.  @samp{-ls} quotes non-printable characters in the file
-names using C-like backslash escapes.
+The file's name.  @samp{-ls} quotes non-printable characters in the
+file names using C-like backslash escapes.  This may change soon, as
+the treatment of unprintable characters is harmonised for @samp{-ls},
+@samp{-fls}, @samp{-print}, @samp{-fprint}, @samp{-printf} and
+@samp{-fprintf}.
 @end enumerate
 @end deffn
 
 @deffn Action -fls file
 True; like @samp{-ls} but write to @var{file} like @samp{-fprint}
-(@pxref{Print File Name}).
+(@pxref{Print File Name}).  The named output file is always created,
+even if no output is sent to it.
 @end deffn
 
 @deffn Action -printf format
@@ -1293,16 +1593,18 @@ True; print @var{format} on the standard
 escapes and @samp{%} directives.  Field widths and precisions can be
 specified as with the @code{printf} C function.  Format flags (like
 @samp{#} for example) may not work as you expect because many of the
-fields, even numeric ones, are printed with %s.  This means though
-that the format flag @samp{-} will work; it forces left-alignment of
-the field.  Unlike @samp{-print}, @samp{-printf} does not add a
-newline at the end of the string.  If you want a newline at the end of
-the string, add a @samp{\n}.
+fields, even numeric ones, are printed with %s.  Numeric flags which
+are affected in this way include G, U, b, D, k and n.  This difference
+in behaviour means though that the format flag @samp{-} will work; it
+forces left-alignment of the field.  Unlike @samp{-print},
+@samp{-printf} does not add a newline at the end of the string.  If
+you want a newline at the end of the string, add a @samp{\n}.
 @end deffn
 
 @deffn Action -fprintf file format
 True; like @samp{-printf} but write to @var{file} like @samp{-fprint}
-(@pxref{Print File Name}).
+(@pxref{Print File Name}).  The output file is always created, even if
+no output is ever sent to it.
 @end deffn
 
 @menu
@@ -1314,7 +1616,7 @@ True; like @samp{-printf} but write to @
 @node Escapes
 @subsection Escapes
 
-The escapes that @samp{-printf} and @samp{-fprintf} recognize are:
+The escapes that @samp{-printf} and @samp{-fprintf} recognise are:
 
 @table @code
 @item \a
@@ -1335,6 +1637,8 @@ Horizontal tab.
 Vertical tab.
 @item \\
 A literal backslash (@samp{\}).
+@item \0
+ASCII NUL.
 @item \NNN
 The character whose ASCII code is NNN (octal).
 @end table
@@ -1357,10 +1661,17 @@ The format flag @samp{-} does work; it f
 field.
 
 @samp{%%} is a literal percent sign.  A @samp{%} character followed by
-an unrecognised character (i.e. not a known directive or printf field
-width and precision specifier), is discarded (but the unrecognised character
-is printed), and a warning message is printed to the standard error output
-(because it was probably a typo).
+an unrecognised character (i.e., not a known directive or @code{printf}
+field width and precision specifier), is discarded (but the
+unrecognised character is printed), and a warning message is printed
+to the standard error output (because it was probably a typo).  Don't
+rely on this behaviour, because other directives may be added in the
+future.
+
+A @samp{%} at the end of the format argument causes undefined
+behaviour since there is no following character.  In some locales, it
+may hide your door keys, while in others it may remove the final page
+from the novel you are reading.
 
 @menu
 * Name Directives::
@@ -1378,14 +1689,19 @@ is printed), and a warning message is pr
 @item %p
 @c supports %-X.Yp
 File's name (not the absolute path name, but the name of the file as
-it was encountered by find - that is, as a relative path from one of
-the starting points).
+it was encountered by @code{find} - that is, as a relative path from
+one of the starting points).
 @item %f
-File's name with any leading directories removed (only the last element).
+File's name with any leading directories removed (only the last
+element).
 @c supports %-X.Yf
 @item %h
 Leading directories of file's name (all but the last element and the
-slash before it).
+slash before it).  If the file's name contains no slashes (for example
+because it was named on the command line and is in the current working
+directory), then ``%h'' expands to ``.''.  This prevents ``%h/%f''
+expanding to ``/foo'', which would be surprising and probably not
+desirable.
 @c supports %-X.Yh
 @item %P
 File's name with the name of the command line argument under which
@@ -1416,8 +1732,18 @@ File's user name, or numeric user ID if
 File's numeric user ID.
 @item %m
 @c full support, including # and 0.
-File's permissions (in octal).   If you always want to have a leading
-zero on the number, use the '#' format flag, for example '%#m'.
+File's mode bits (in octal).  If you always want to have a leading
+zero on the number, use the '#' format flag, for example '%#m'.  
+
+The file mode bit numbers used are the traditional Unix
+numbers, which will be as expected on most systems, but if your
+system's file mode bit layout differs from the traditional Unix
+semantics, you will see a difference between the mode as printed by
+@samp{%m} and the mode as it appears in @code{struct stat}.
+
+@item %M
+File's type and mode bits (in symbolic form, as for @code{ls}).  This
+directive is supported in findutils 4.2.5 and later.
 @end table
 
 @node Size Directives
@@ -1425,12 +1751,15 @@ zero on the number, use the '#' format f
 
 @table @code
 @item %k
-Amount of disk space occupied by the file, measured in 1K blocks
-(rounded up).  This can be less than the length of the file if 
-it is a sparse file (that is, it has ``holes'').  
+The amount of disk space used for this file in 1K blocks. Since disk
+space is allocated in multiples of the filesystem block size this is
+usually greater than %s/1024, but it can also be smaller if the file
+is a sparse file (that is, it has ``holes'').
 @item %b
-File's size in 512-byte blocks (rounded up).  This also can be less 
-than the length of the file, if the file is sparse.
+The amount of disk space used for this file in 512-byte blocks. Since
+disk space is allocated in multiples of the filesystem block size this
+is usually greater than %s/1024, but it can also be smaller if the
+file is a sparse file (that is, it has ``holes'').
 @item %s
 File's size in bytes.
 @end table
@@ -1456,11 +1785,11 @@ Object of symbolic link (empty string if
 File's inode number (in decimal).
 @item %n
 Number of hard links to file.
-@item %y 
-Type of the file as used with @samp{-type}.   If the file is a symbolic
+@item %y
+Type of the file as used with @samp{-type}.  If the file is a symbolic
 link, @samp{l} will be printed.
 @item %Y
-Type of the file as used with @samp{-type}.   If the file is a symbolic
+Type of the file as used with @samp{-type}.  If the file is a symbolic
 link, it is dereferenced.  If the file is a broken symbolic link,
 @samp{N} is printed.
 
@@ -1478,22 +1807,23 @@ Wed Nov  2 00:42:36 1994
 
 @table @code
 @item %a
-File's last access time in the format returned by the C @code{ctime} function.
+File's last access time in the format returned by the C @code{ctime}
+function.
 @item %A@var{k}
 File's last access time in the format specified by @var{k}
-(@pxref{Time Formats}). 
+(@pxref{Time Formats}).
 @item %c
-File's last status change time in the format returned by the C @code{ctime}
-function.
+File's last status change time in the format returned by the C
+@code{ctime} function.
 @item %C@var{k}
 File's last status change time in the format specified by @var{k}
 (@pxref{Time Formats}).
 @item %t
-File's last modification time in the format returned by the C @code{ctime}
-function.
+File's last modification time in the format returned by the C
+@code{ctime} function.
 @item %T@var{k}
-File's last modification time in the format specified by @var{k} 
-(@pxref{Time Formats}). 
+File's last modification time in the format specified by @var{k}
+(@pxref{Time Formats}).
 @end table
 
 @node Time Formats
@@ -1573,7 +1903,7 @@ last two digits of year (00..99)
 @subsubsection Combined Time Formats
 
 The following format directives print combinations of time and date
-components. 
+components.
 
 @table @code
 @item r
@@ -1600,7 +1930,7 @@ setting the TZ environment variable).  T
 The @samp{%m} and @samp{%d} directives support the @samp{#}, @samp{0}
 and @samp{+} flags, but the other directives do not, even if they
 print numbers.  Numeric directives that do not support these flags
-include 
+include
 
 @samp{G},
 @samp{U},
@@ -1633,22 +1963,29 @@ perform arbitrary actions on the files.
 Here is how to run a command on one file at a time.
 
 @deffn Action -execdir command ;
-Execute @var{command}; true if 0 status is returned.  @code{find} takes
-all arguments after @samp{-exec} to be part of the command until an
-argument consisting of @samp{;} is reached.  It replaces the string
+Execute @var{command}; true if zero status is returned.  @code{find}
+takes all arguments after @samp{-exec} to be part of the command until
+an argument consisting of @samp{;} is reached.  It replaces the string
 @samp{@{@}} by the current file name being processed everywhere it
 occurs in the command.  Both of these constructions need to be escaped
-(with a @samp{\}) or quoted to protect them from expansion by the shell.
-The command is executed in the directory in which @code{find} was run.
+(with a @samp{\}) or quoted to protect them from expansion by the
+shell.  The command is executed in the directory in which @code{find}
+was run.
 
-For example, to compare each C header file in the current directory with
-the file @file{/tmp/master}:
+For example, to compare each C header file in or below the current
+directory with the file @file{/tmp/master}:
 
 @example
 find . -name '*.h' -execdir diff -u '@{@}' /tmp/master ';'
 @end example
 @end deffn
 
+If you use @samp{-execdir}, you must ensure that the current directory
+is not on @var{$PATH}, because otherwise an attacker could make
+@samp{find} run commands of their choice simply by leaving a
+suitably-named file in the right directory.  GNU find will refuse to
+run if you use @samp{-execdir} and the current directory is in
+@var{$PATH}.
 
 Another similar option, @samp{-exec} is supported, but is less secure.
 @xref{Security Considerations}, for a discussion of the security
@@ -1662,19 +1999,23 @@ directory from which @code{find} was inv
 is expanded to a relative path starting with the name of one of the
 starting directories, rather than just the basename of the matched
 file.
+
+While some implementations of @code{find} replace the @samp{@{@}} only
+where it appears on its own in an argument, GNU @code{find} replaces
+@samp{@{@}} wherever it appears.
 @end deffn
 
 
 @node Multiple Files
 @subsection Multiple Files
 
-Sometimes you need to process files one of the time.  But usually this
+Sometimes you need to process files one at a time.  But usually this
 is not necessary, and, it is faster to run a command on as many files
 as possible at a time, rather than once per file.  Doing this saves on
 the time it takes to start up the command each time.
 
 The @samp{-execdir} and @samp{-exec} actions have variants that build
-command lines containing as many matched files as possible.  
+command lines containing as many matched files as possible.
 
 @deffn Action -execdir command @{@} +
 This works as for @samp{-execdir command ;}, except that the
@@ -1705,8 +2046,26 @@ an immediate fatal exit.  In this situat
 command lines will not be invoked (this prevents possible infinite
 loops).
 
+At first sight, it looks like the list of filenames to be processed
+can only be at the end of the command line, and that this might be a
+problem for some comamnds (@code{cp} and @code{rsync} for example).
+
+However, there is a slightly obscure but powerful workarouund for this
+problem which takes advantage of the behaviour of @code{sh -c}:-
+
+@example
+find startpoint -tests @dots{} -exec sh -c 'scp "$@@" remote:/dest' sh @{@} + 
+@end example
+
+In the example above, the filenames we want to work on need to occur
+on the @code{scp} command line before the name of the destination.  We
+use the shell to invoke the command @code{scp "$@@" remote:/dest} and
+the shell expands @code{"$@@"} to the list of filenames we want to
+process.
+
 Another, but less secure, way to run a command on more than one file
-at once, is to use the @code{xargs} command, which is invoked like this:
+at once, is to use the @code{xargs} command, which is invoked like
+this:
 
 @example
 xargs @r{[}@var{option}@dots{}@r{]} @r{[}@var{command} @r{[}@var{initial-arguments}@r{]}@r{]}
@@ -1717,25 +2076,27 @@ arguments are delimited by blanks (which
 or single quotes or a backslash) or newlines.  It executes the
 @var{command} (default is @file{/bin/echo}) one or more times with any
 @var{initial-arguments} followed by arguments read from standard
-input.  Blank lines on the standard input are ignored.
-
-Instead of blank-delimited names, it is safer to use @samp{find -print0}
-or @samp{find -fprint0} and process the output by giving the @samp{-0}
-or @samp{--null} option to GNU @code{xargs}, GNU @code{tar}, GNU
-@code{cpio}, or @code{perl}.  The @code{locate} command also has a
+input.  Blank lines on the standard input are ignored.  If the
+@samp{-L} option is in use, trailing blanks indicate that @code{xargs}
+should consider the following line to be part of this one.
+
+Instead of blank-delimited names, it is safer to use @samp{find
+-print0} or @samp{find -fprint0} and process the output by giving the
+@samp{-0} or @samp{--null} option to GNU @code{xargs}, GNU @code{tar},
+GNU @code{cpio}, or @code{perl}.  The @code{locate} command also has a
 @samp{-0} or @samp{--null} option which does the same thing.
 
-You can use shell command substitution (backquotes) to process a list of
-arguments, like this:
+You can use shell command substitution (backquotes) to process a list
+of arguments, like this:
 
 @example
 grep -l sprintf `find $HOME -name '*.c' -print`
 @end example
 
 However, that method produces an error if the length of the @samp{.c}
-file names exceeds the operating system's command-line length limit.
-@code{xargs} avoids that problem by running the command as many times as
-necessary without exceeding the limit:
+file names exceeds the operating system's command line length limit.
+@code{xargs} avoids that problem by running the command as many times
+as necessary without exceeding the limit:
 
 @example
 find $HOME -name '*.c' -print | xargs grep -l sprintf
@@ -1750,11 +2111,12 @@ The @code{xargs} command will process al
 lines and executing them, unless one of the commands exits with a
 status of 255 (this will cause xargs to issue an error message and
 stop) or it reads a line contains the end of file string specified
-with the @samp{--eof} option. 
+with the @samp{--eof} option.
 
 @menu
 * Unsafe File Name Handling::
 * Safe File Name Handling::
+* Unusual Characters in File Names::
 * Limiting Command Size::
 * Interspersing File Names::
 @end menu
@@ -1763,25 +2125,26 @@ with the @samp{--eof} option.
 @subsubsection Unsafe File Name Handling
 
 Because file names can contain quotes, backslashes, blank characters,
-and even newlines, it is not safe to process them using @code{xargs} in its
-default mode of operation.  But since most files' names do not contain
-blanks, this problem occurs only infrequently.  If you are only
-searching through files that you know have safe names, then you need not
-be concerned about it.  
+and even newlines, it is not safe to process them using @code{xargs}
+in its default mode of operation.  But since most files' names do not
+contain blanks, this problem occurs only infrequently.  If you are
+only searching through files that you know have safe names, then you
+need not be concerned about it.
 
 @c This example is adapted from:
 @c From: pfalstad@stone.Princeton.EDU (Paul John Falstad)
 @c Newsgroups: comp.unix.shell
 @c Subject: Re: Beware xargs security holes
 @c Date: 16 Oct 90 19:12:06 GMT
-@c 
-In many applications, if @code{xargs} botches processing a file because
-its name contains special characters, some data might be lost.  The
-importance of this problem depends on the importance of the data and
-whether anyone notices the loss soon enough to correct it.  However,
-here is an extreme example of the problems that using blank-delimited
-names can cause.  If the following command is run daily from
-@code{cron}, then any user can remove any file on the system:
+@c
+In many applications, if @code{xargs} botches processing a file
+because its name contains special characters, some data might be lost.
+The importance of this problem depends on the importance of the data
+and whether anyone notices the loss soon enough to correct it.
+However, here is an extreme example of the problems that using
+blank-delimited names can cause.  If the following command is run
+daily from @code{cron}, then any user can remove any file on the
+system:
 
 @example
 find / -name '#*' -atime +7 -print | xargs rm
@@ -1798,8 +2161,8 @@ vmunix'
 and then @code{cron} would delete @file{/vmunix}, if it ran
 @code{xargs} with @file{/} as its current directory.
 
-To delete other files, for example @file{/u/joeuser/.plan}, you could do
-this:
+To delete other files, for example @file{/u/joeuser/.plan}, you could
+do this:
 
 @example
 eg$ mkdir '#
@@ -1819,19 +2182,19 @@ eg$ find . -name '#*' -print | xargs ech
 @subsubsection Safe File Name Handling
 
 Here is how to make @code{find} output file names so that they can be
-used by other programs without being mangled or misinterpreted.  You can
-process file names generated this way by giving the @samp{-0} or
+used by other programs without being mangled or misinterpreted.  You
+can process file names generated this way by giving the @samp{-0} or
 @samp{--null} option to GNU @code{xargs}, GNU @code{tar}, GNU
 @code{cpio}, or @code{perl}.
 
 @deffn Action -print0
-True; print the full file name on the standard output, followed by a
+True; print the entire file name on the standard output, followed by a
 null character.
 @end deffn
 
 @deffn Action -fprint0 file
 True; like @samp{-print0} but write to @var{file} like @samp{-fprint}
-(@pxref{Print File Name}).
+(@pxref{Print File Name}).  The output file is always created.
 @end deffn
 
 As of findutils version 4.2.4, the @code{locate} program also has a
@@ -1857,50 +2220,127 @@ can do this in just one step:
 xargs --null --arg-file=<(find / -name xyzzy -print0) munge
 @end example
 
+@node Unusual Characters in File Names
+@subsubsection Unusual Characters in File Names
+As discussed above, you often need to be careful about how the names
+of files are handled by @code{find} and other programs.  If the output
+of @code{find} is not going to another program but instead is being
+shown on a terminal, this can still be a problem.  For example, some
+character sequences can reprogram the function keys on some terminals.
+@xref{Security Considerations}, for a discussion of other security
+problems relating to @code{find}.
+
+Unusual characters are handled differently by various
+actions, as described below.
+
+@table @samp
+@item -print0
+@itemx -fprint0
+Always print the exact file name, unchanged, even if the output is
+going to a terminal.
+@item -ok
+@itemx -okdir
+Always print the exact file name, unchanged.  This will probably
+change in a future release.
+@item -ls
+@itemx -fls
+Unusual characters are always escaped.  White space, backslash, and
+double quote characters are printed using C-style escaping (for
+example @samp{\f}, @samp{\"}).  Other unusual characters are printed
+using an octal escape.  Other printable characters (for @samp{-ls} and
+@samp{-fls} these are the characters between octal 041 and 0176) are
+printed as-is.
+@item -printf
+@itemx -fprintf
+If the output is not going to a terminal, it is printed as-is.
+Otherwise, the result depends on which directive is in use:
+
+@table @asis
+@item %D, %F, %H, %Y, %y
+These expand to values which are not under control of files' owners,
+and so are printed as-is.
+@item  %a, %b, %c, %d, %g, %G, %i, %k, %m, %M, %n, %s, %t, %u, %U
+These have values which are under the control of files' owners but
+which cannot be used to send arbitrary data to the terminal, and so
+these are printed as-is.
+@item %f, %h, %l, %p, %P
+The output of these directives is quoted if the output is going to a
+terminal.
+
+This quoting is performed in the same way as for GNU @code{ls}.  This
+is not the same quoting mechanism as the one used for @samp{-ls} and
+@samp{fls}.  If you are able to decide what format to use for the
+output of @code{find} then it is normally better to use @samp{\0} as a
+terminator than to use newline, as file names can contain white space
+and newline characters.
+@end table
+@item -print
+@itemx -fprint
+Quoting is handled in the same way as for the @samp{%p} directive of
+@samp{-printf} and @samp{-fprintf}.  If you are using @code{find} in a
+script or in a situation where the matched files might have arbitrary
+names, you should consider using @samp{-print0} instead of
+@samp{-print}.
+@end table
+
+
+The @code{locate} program quotes and escapes unusual characters in
+file names in the same way as @code{find}'s @samp{-print} action.
+
+The behaviours described above may change soon, as the treatment of
+unprintable characters is harmonised for @samp{-ls}, @samp{-fls},
+@samp{-print}, @samp{-fprint}, @samp{-printf} and @samp{-fprintf}.
+
 @node Limiting Command Size
 @subsubsection Limiting Command Size
 
-@code{xargs} gives you control over how many arguments it passes to the
-command each time it executes it.  By default, it uses up to
+@code{xargs} gives you control over how many arguments it passes to
+the command each time it executes it.  By default, it uses up to
 @code{ARG_MAX} - 2k, or 128k, whichever is smaller, characters per
-command.  It uses as many lines and arguments as fit within that limit.
-The following options modify those values.
+command.  It uses as many lines and arguments as fit within that
+limit.  The following options modify those values.
 
 @table @code
 @item --no-run-if-empty
 @itemx -r
 If the standard input does not contain any nonblanks, do not run the
-command.  By default, the command is run once even if there is no input.
+command.  By default, the command is run once even if there is no
+input.  This option is a GNU extension.
 
 @item --max-lines@r{[}=@var{max-lines}@r{]}
+@itemx -L @var{max-lines}
 @itemx -l@r{[}@var{max-lines}@r{]}
 Use at most @var{max-lines} nonblank input lines per command line;
-@var{max-lines} defaults to 1 if omitted.  Trailing blanks cause an
+@var{max-lines} defaults to 1 if omitted; omitting the argument is not
+allowed in the case of the @samp{-L} option.  Trailing blanks cause an
 input line to be logically continued on the next input line, for the
-purpose of counting the lines.  Implies @samp{-x}.
+purpose of counting the lines.  Implies @samp{-x}.  The preferred name
+for this option is @samp{-L} as this is specified by POSIX.  
 
 @item --max-args=@var{max-args}
 @itemx -n @var{max-args}
 Use at most @var{max-args} arguments per command line.  Fewer than
 @var{max-args} arguments will be used if the size (see the @samp{-s}
-option) is exceeded, unless the @samp{-x} option is given, in which case
-@code{xargs} will exit.
+option) is exceeded, unless the @samp{-x} option is given, in which
+case @code{xargs} will exit.
 
 @item --max-chars=@var{max-chars}
 @itemx -s @var{max-chars}
 Use at most @var{max-chars} characters per command line, including the
-command and initial arguments and the terminating nulls at the ends of
-the argument strings.  If you specify a value for this option which is
-too large or small, a warning message is printed and the appropriate
-upper or lower limit is used instead.
+command initial arguments and the terminating nulls at the ends of the
+argument strings.  If you specify a value for this option which is too
+large or small, a warning message is printed and the appropriate upper
+or lower limit is used instead.  You can use @samp{--show-limits}
+option to understand the command-line limits applying to @code{xargs}
+and how this is affected by any other options.
 
 @item --max-procs=@var{max-procs}
 @itemx -P @var{max-procs}
 Run up to @var{max-procs} processes at a time; the default is 1.  If
 @var{max-procs} is 0, @code{xargs} will run as many processes as
-possible at a time.  Use the @samp{-n}, @samp{-s}, or @samp{-l} option
-with @samp{-P}; otherwise chances are that the command will be run only
-once.
+possible at a time.  Use the @samp{-n}, @samp{-s}, or @samp{-L} option
+with @samp{-P}; otherwise chances are that the command will be run
+only once.
 @end table
 
 @node Interspersing File Names
@@ -1913,43 +2353,88 @@ operation is equivalent to @samp{find -e
 
 @table @code
 @item --replace@r{[}=@var{replace-str}@r{]}
-@itemx -i@r{[}@var{replace-str}@r{]}
+@itemx -I @var{replace-str}
+@itemx -i @var{replace-str}
 Replace occurrences of @var{replace-str} in the initial arguments with
-names read from the input.  Also, unquoted blanks do not
-terminate arguments; instead, the input is split at newlines only.  If
-@var{replace-str} is omitted, it defaults to @samp{@{@}} (like for
-@samp{find -exec}).  Implies @samp{-x} and @samp{-l 1}.  As an
-example, to sort each file the @file{bills} directory, leaving the
-output in that file name with @file{.sorted} appended, you could do:
+names read from the input.  Also, unquoted blanks do not terminate
+arguments; instead, the input is split at newlines only.  For the
+@samp{-i} option, if @var{replace-str} is omitted for @samp{--replace}
+or @samp{-i}, it defaults to @samp{@{@}} (like for @samp{find -exec}).
+Implies @samp{-x} and @samp{-l 1}.  @samp{-i} is deprecated in favour
+of @samp{-I}. As an example, to sort each file in the @file{bills}
+directory, leaving the output in that file name with @file{.sorted}
+appended, you could do:
 
 @example
-find bills -type f | xargs -iXX sort -o XX.sorted XX
+find bills -type f | xargs -I XX sort -o XX.sorted XX
 @end example
 
 @noindent
-The equivalent command using @samp{find -exec} is:
+The equivalent command using @samp{find -execdir} is:
 
 @example
-find bills -type f -exec sort -o '@{@}.sorted' '@{@}' ';'
+find bills -type f -execdir sort -o '@{@}.sorted' '@{@}' ';'
 @end example
 @end table
 
+
+When you use the @samp{-I} option, each line read from the input is
+buffered internally.  This means that there is an upper limit on the
+length of input line that xargs will accept when used with the
+@samp{-I} option.  To work around this limitation, you can use the
+@samp{-s} option to increase the amount of buffer space that xargs
+uses, and you can also use an extra invocation of xargs to ensure that
+very long lines do not occur.  For example:
+
+@example
+somecommand | xargs -s 50000 echo | xargs -I '@{@}' -s 100000 rm '@{@}'
+@end example
+
+Here, the first invocation of @code{xargs} has no input line length
+limit because it doesn't use the @samp{-I} option. The second
+invocation of @code{xargs} does have such a limit, but we have ensured
+that the it never encounters a line which is longer than it can
+handle.  
+
+This is not an ideal solution.  Instead, the @samp{-I} option should
+not impose a line length limit (apart from any limit imposed by the
+operating system) and so one might consider this limitation to be a
+bug.  A better solution would be to allow @code{xargs -I} to
+automatically move to a larger value for the @samp{-s} option when
+this is needed.
+
+This sort of problem doesn't occur with the output of @code{find}
+because it emits just one filename per line.
+
 @node Querying
 @subsection Querying
 
 To ask the user whether to execute a command on a single file, you can
-use the @code{find} primary @samp{-ok} instead of @samp{-exec}:
+use the @code{find} primary @samp{-okdir} instead of @samp{-execdir},
+and the @code{find} primary @samp{-ok} instead of @samp{-exec}:
 
-@deffn Action -ok command ;
-Like @samp{-exec} (@pxref{Single File}), but ask the user first (on
+@deffn Action -okdir command ;
+Like @samp{-execdir} (@pxref{Single File}), but ask the user first (on
 the standard input); if the response does not start with @samp{y} or
-@samp{Y}, do not run the command, and return false.
+@samp{Y}, do not run the command, and return false.  If the command is
+run, its standard input is redirected from @file{/dev/null}.
+@end deffn
+
+@deffn Action -ok command ;
+This insecure variant of the @samp{-okdir} action is specified by
+POSIX.  The main difference is that the command is executed in the
+directory from which @code{find} was invoked, meaning that @samp{@{@}}
+is expanded to a relative path starting with the name of one of the
+starting directories, rather than just the basename of the matched
+file.  If the command is run, its standard input is redirected from
+@file{/dev/null}.
 @end deffn
 
-When processing multiple files with a single command, to query the user
-you give @code{xargs} the following option.  When using this option, you
-might find it useful to control the number of files processed per
-invocation of the command (@pxref{Limiting Command Size}).
+When processing multiple files with a single command, to query the
+user you give @code{xargs} the following option.  When using this
+option, you might find it useful to control the number of files
+processed per invocation of the command (@pxref{Limiting Command
+Size}).
 
 @table @code
 @item --interactive
@@ -1974,11 +2459,11 @@ turns on the @samp{-depth} option (@pxre
 @section Adding Tests
 
 You can test for file attributes that none of the @code{find} builtin
-tests check.  To do this, use @code{xargs} to run a program that filters
-a list of files printed by @code{find}.  If possible, use @code{find}
-builtin tests to pare down the list, so the program run by @code{xargs}
-has less work to do.  The tests builtin to @code{find} will likely run
-faster than tests that other programs perform.
+tests check.  To do this, use @code{xargs} to run a program that
+filters a list of files printed by @code{find}.  If possible, use
+@code{find} builtin tests to pare down the list, so the program run by
+@code{xargs} has less work to do.  The tests builtin to @code{find}
+will likely run faster than tests that other programs perform.
 
 For reasons of efficiency it is often useful to limit the number of
 times an external program has to be run.  For this reason, it is often
@@ -1990,7 +2475,7 @@ running @code{file} on files that are no
 executable.
 
 @example
-find /usr/local -type f -perm +a=x | xargs file | 
+find /usr/local -type f -perm /a=x | xargs file |
   grep 'not stripped' | cut -d: -f1
 @end example
 
@@ -2013,10 +2498,10 @@ you can use a program (which can be a sh
 special attribute and make it exit with a true (zero) or false
 (non-zero) status.  It is a good idea to place such a special test
 @emph{after} the builtin tests, because it starts a new process which
-could be avoided if a builtin test evaluates to false.  
+could be avoided if a builtin test evaluates to false.
 
-Here is a shell script called @code{unstripped} that checks whether its
-argument is an unstripped binary file:
+Here is a shell script called @code{unstripped} that checks whether
+its argument is an unstripped binary file:
 
 @example
 #! /bin/sh
@@ -2024,7 +2509,7 @@ file "$1" | grep -q "not stripped"
 @end example
 
 
-This script relies on the fact that the shell exits with the status of
+This script relies on the shell exiting with the status of
 the last command in the pipeline, in this case @code{grep}.  The
 @code{grep} command exits with a true status if it found any matches,
 false if not.  Here is an example of using the script (assuming it is
@@ -2033,264 +2518,12 @@ scripts) in the file @file{sbins} and th
 @file{ubins}.
 
 @example
-find /usr/local -type f -perm +a=x \
+find /usr/local -type f -perm /a=x \
   \( -execdir unstripped '@{@}' \; -fprint ubins -o -fprint sbins \)
 @end example
 
-@node Common Tasks, Databases, Actions, Top
-@chapter Common Tasks
-
-The sections that follow contain some extended examples that both give a
-good idea of the power of these programs, and show you how to solve
-common real-world problems.
-
-@menu
-* Viewing And Editing::
-* Archiving::
-* Cleaning Up::
-* Strange File Names::
-* Fixing Permissions::
-* Classifying Files::
-@end menu
-
-@node Viewing And Editing
-@section Viewing And Editing
-
-To view a list of files that meet certain criteria, simply run your file
-viewing program with the file names as arguments.  Shells substitute a
-command enclosed in backquotes with its output, so the whole command
-looks like this:
-
-@example
-less `find /usr/include -name '*.h' | xargs grep -l mode_t`
-@end example
-
-@noindent
-You can edit those files by giving an editor name instead of a file
-viewing program:
-
-@example
-emacs `find /usr/include -name '*.h' | xargs grep -l mode_t`
-@end example
-
-Because there is a limit to the length of any individual command line,
-there is a limit to the number of files that can be handled in this
-way.  We can get around this difficulty by using xargs like this:
-
-@example
-find /usr/include -name '*.h' | xargs grep -l mode_t > todo
-xargs --arg-file=todo emacs
-@end example
-
-Here, @code{xargs} will run @code{emacs} as many times as necessary to
-visit all of the files listed in the file @file{todo}.
-
-@node Archiving
-@section Archiving
-
-You can pass a list of files produced by @code{find} to a file archiving
-program.  GNU @code{tar} and @code{cpio} can both read lists of file
-names from the standard input---either delimited by nulls (the safe way)
-or by blanks (the lazy, risky default way).  To use null-delimited
-names, give them the @samp{--null} option.  You can store a file archive
-in a file, write it on a tape, or send it over a network to extract on
-another machine.
-
-One common use of @code{find} to archive files is to send a list of the
-files in a directory tree to @code{cpio}.  Use @samp{-depth} so if a
-directory does not have write permission for its owner, its contents can
-still be restored from the archive since the directory's permissions are
-restored after its contents.  Here is an example of doing this using
-@code{cpio}; you could use a more complex @code{find} expression to
-archive only certain files.
-
-@example
-find . -depth -print0 |
-  cpio --create --null --format=crc --file=/dev/nrst0
-@end example
-
-You could restore that archive using this command:
-
-@example
-cpio --extract --null --make-dir --unconditional \
-  --preserve --file=/dev/nrst0
-@end example
-
-Here are the commands to do the same things using @code{tar}:
-
-@example
-find . -depth -print0 |
-  tar --create --null --files-from=- --file=/dev/nrst0
-
-tar --extract --null --preserve-perm --same-owner \
-  --file=/dev/nrst0
-@end example
-
-@c Idea from Rick Sladkey.
-Here is an example of copying a directory from one machine to another:
-
-@example
-find . -depth -print0 | cpio -0o -Hnewc |
-  rsh @var{other-machine} "cd `pwd` && cpio -i0dum"
-@end example
-
-@node Cleaning Up
-@section Cleaning Up
-
-@c Idea from Jim Meyering.
-This section gives examples of removing unwanted files in various situations.
-Here is a command to remove the CVS backup files created when an update
-requires a merge:
-
-@example
-find . -name '.#*' -print0 | xargs -0r rm -f
-@end example
-
-The command above works, but the following is safer:
-
-@example
-find . -name '.#*' -depth -delete
-@end example
-
-@c Idea from Franc,ois Pinard.
-You can run this command to clean out your clutter in @file{/tmp}.  You
-might place it in the file your shell runs when you log out
-(@file{.bash_logout}, @file{.logout}, or @file{.zlogout}, depending on
-which shell you use).
-
-@example
-find /tmp -depth -user "$LOGNAME" -type f -delete 
-@end example
-
-If your @code{find} command removes directories, you may find that 
-you get a spurious error message when @code{find} tries to recurse
-into a directory that has now been removed.  Using the @samp{-depth}
-option will normally resolve this problem.
-
-@c Idea from Noah Friedman.
-To remove old Emacs backup and auto-save files, you can use a command
-like the following.  It is especially important in this case to use
-null-terminated file names because Emacs packages like the VM mailer
-often create temporary file names with spaces in them, like @file{#reply
-to David J. MacKenzie<1>#}.
-
-@example
-find ~ \( -name '*~' -o -name '#*#' \) -print0 |
-  xargs --no-run-if-empty --null rm -vf
-@end example
-
-Removing old files from @file{/tmp} is commonly done from @code{cron}:
-
-@c Idea from Kaveh Ghazi.
-@example
-find /tmp /var/tmp -not -type d -mtime +3 -delete
-find /tmp /var/tmp -depth -mindepth 1 -type d -empty -delete
-@end example
-
-The second @code{find} command above uses @samp{-depth} so it cleans out
-empty directories depth-first, hoping that the parents become empty and
-can be removed too.  It uses @samp{-mindepth} to avoid removing
-@file{/tmp} itself if it becomes totally empty.
-
-@node Strange File Names
-@section Strange File Names
-
-@c Idea from:
-@c From: tmatimar@isgtec.com (Ted Timar)
-@c Newsgroups: comp.unix.questions,comp.unix.shell,comp.answers,news.answers
-@c Subject: Unix - Frequently Asked Questions (2/7) [Frequent posting]
-@c Subject: How do I remove a file with funny characters in the filename ?
-@c Date: Thu Mar 18 17:16:55 EST 1993
-@code{find} can help you remove or rename a file with strange characters
-in its name.  People are sometimes stymied by files whose names contain
-characters such as spaces, tabs, control characters, or characters with
-the high bit set.  The simplest way to remove such files is:
-
-@example
-rm -i @var{some*pattern*that*matches*the*problem*file}
-@end example
-
-@code{rm} asks you whether to remove each file matching the given
-pattern.  If you are using an old shell, this approach might not work if
-the file name contains a character with the high bit set; the shell may
-strip it off.  A more reliable way is:
-
-@example
-find . -maxdepth 1 @var{tests} -ok rm '@{@}' \;
-@end example
-
-@noindent
-where @var{tests} uniquely identify the file.  The @samp{-maxdepth 1}
-option prevents @code{find} from wasting time searching for the file in
-any subdirectories; if there are no subdirectories, you may omit it.  A
-good way to uniquely identify the problem file is to figure out its
-inode number; use
-
-@example
-ls -i
-@end example
-
-Suppose you have a file whose name contains control characters, and you
-have found that its inode number is 12345.  This command prompts you for
-whether to remove it:
-
-@example
-find . -maxdepth 1 -inum 12345 -ok rm -f '@{@}' \;
-@end example
-
-If you don't want to be asked, perhaps because the file name may contain
-a strange character sequence that will mess up your screen when printed,
-then use @samp{-exec} instead of @samp{-ok}.
-
-If you want to rename the file instead, you can use @code{mv} instead of
-@code{rm}:
-
-@example
-find . -maxdepth 1 -inum 12345 -ok mv '@{@}' @var{new-file-name} \;
-@end example
-
-@node Fixing Permissions
-@section Fixing Permissions
-
-Suppose you want to make sure that everyone can write to the directories in a
-certain directory tree.  Here is a way to find directories lacking either
-user or group write permission (or both), and fix their permissions:
-
-@example
-find . -type d -not -perm -ug=w | xargs chmod ug+w
-@end example
-
-@noindent
-You could also reverse the operations, if you want to make sure that
-directories do @emph{not} have world write permission.
-
-@node Classifying Files
-@section Classifying Files
-
-@c Idea from:
-@c From: martin@mwtech.UUCP (Martin Weitzel)
-@c Newsgroups: comp.unix.wizards,comp.unix.questions
-@c Subject: Advanced usage of 'find' (Re: Unix security automating script)
-@c Date: 22 Mar 90 15:05:19 GMT
-If you want to classify a set of files into several groups based on
-different criteria, you can use the comma operator to perform multiple
-independent tests on the files.  Here is an example:
-
-@example
-find / -type d \( -perm -o=w -fprint allwrite , \
-  -perm -o=x -fprint allexec \)
-
-echo "Directories that can be written to by everyone:"
-cat allwrite
-echo ""
-echo "Directories with search permissions for everyone:"
-cat allexec
-@end example
-
-@code{find} has only to make one scan through the directory tree (which
-is one of the most time consuming parts of its work).
 
-@node Databases, File Permissions, Common Tasks, Top
+@node Databases
 @chapter File Name Databases
 
 The file name databases used by @code{locate} contain lists of files
@@ -2323,9 +2556,10 @@ for which they contain entries.  File na
 running the @code{updatedb} program, typically nightly.
 
 In networked environments, it often makes sense to build a database at
-the root of each filesystem, containing the entries for that filesystem.
-@code{updatedb} is then run for each filesystem on the fileserver where
-that filesystem is on a local disk, to prevent thrashing the network.
+the root of each filesystem, containing the entries for that
+filesystem.  @code{updatedb} is then run for each filesystem on the
+fileserver where that filesystem is on a local disk, to prevent
+thrashing the network.
 
 @xref{Invoking updatedb},
 for the description of the options to @code{updatedb}, which specify
@@ -2338,13 +2572,16 @@ which directories would each database co
 The file name databases contain lists of files that were in particular
 directory trees when the databases were last updated.  The file name
 database format changed starting with GNU @code{locate} version 4.0 to
-allow machines with different byte orderings to share the databases.  The
-new GNU @code{locate} can read both the old and new database formats.
-However, old versions of @code{locate} and @code{find} produce incorrect
-results if given a new-format database.
+allow machines with different byte orderings to share the databases.
+The new GNU @code{locate} can read both the old and new database
+formats.  However, old versions of @code{locate} and @code{find}
+produce incorrect results if given a new-format database.
+
+Support for the old database format will eventually be discontinued,
+first in @code{updatedb} and later in @code{xargs}.
 
 If you run @samp{locate --statistics}, the resulting summary indicates
-the type of each locate database.  
+the type of each @code{locate} database.
 
 
 @menu
@@ -2357,32 +2594,33 @@ the type of each locate database.
 @subsection New Database Format
 
 @code{updatedb} runs a program called @code{frcode} to
-@dfn{front-compress} the list of file names, which reduces the database
-size by a factor of 4 to 5.  Front-compression (also known as
+@dfn{front-compress} the list of file names, which reduces the
+database size by a factor of 4 to 5.  Front-compression (also known as
 incremental encoding) works as follows.
 
 The database entries are a sorted list (case-insensitively, for users'
-convenience).  Since the list is sorted, each entry is likely to share a
-prefix (initial string) with the previous entry.  Each database entry
-begins with an offset-differential count byte, which is the additional
-number of characters of prefix of the preceding entry to use beyond the
-number that the preceding entry is using of its predecessor.  (The
-counts can be negative.)  Following the count is a null-terminated ASCII
-remainder---the part of the name that follows the shared prefix.
-
-If the offset-differential count is larger than can be stored in a byte
-(+/-127), the byte has the value 0x80 and the count follows in a 2-byte
-word, with the high byte first (network byte order).
+convenience).  Since the list is sorted, each entry is likely to share
+a prefix (initial string) with the previous entry.  Each database
+entry begins with an offset-differential count byte, which is the
+additional number of characters of prefix of the preceding entry to
+use beyond the number that the preceding entry is using of its
+predecessor.  (The counts can be negative.)  Following the count is a
+null-terminated ASCII remainder---the part of the name that follows
+the shared prefix.
+
+If the offset-differential count is larger than can be stored in a
+byte (+/-127), the byte has the value 0x80 and the count follows in a
+2-byte word, with the high byte first (network byte order).
 
 Every database begins with a dummy entry for a file called
 @file{LOCATE02}, which @code{locate} checks for to ensure that the
-database file has the correct format; it ignores the entry in doing the
-search.
+database file has the correct format; it ignores the entry in doing
+the search.
 
-Databases can not be concatenated together, even if the first (dummy)
+Databases cannot be concatenated together, even if the first (dummy)
 entry is trimmed from all but the first database.  This is because the
-offset-differential count in the first entry of the second and following
-databases will be wrong.
+offset-differential count in the first entry of the second and
+following databases will be wrong.
 
 In the output of @samp{locate --statistics}, the new database format
 is referred to as @samp{LOCATE02}.
@@ -2426,45 +2664,46 @@ and count bytes made printable:
 @subsection Old Database Format
 
 The old database format is used by Unix @code{locate} and @code{find}
-programs and earlier releases of the GNU ones.  @code{updatedb} produces
-this format if given the @samp{--old-format} option.
+programs and earlier releases of the GNU ones.  @code{updatedb}
+produces this format if given the @samp{--old-format} option.
 
 @code{updatedb} runs programs called @code{bigram} and @code{code} to
 produce old-format databases.  The old format differs from the new one
 in the following ways.  Instead of each entry starting with an
-offset-differential count byte and ending with a null, byte values from
-0 through 28 indicate offset-differential counts from -14 through 14.
-The byte value indicating that a long offset-differential count follows
-is 0x1e (30), not 0x80.  The long counts are stored in host byte order,
-which is not necessarily network byte order, and host integer word size,
-which is usually 4 bytes.  They also represent a count 14 less than
-their value.  The database lines have no termination byte; the start of
-the next line is indicated by its first byte having a value <= 30.
+offset-differential count byte and ending with a null, byte values
+from 0 through 28 indicate offset-differential counts from -14 through
+14.  The byte value indicating that a long offset-differential count
+follows is 0x1e (30), not 0x80.  The long counts are stored in host
+byte order, which is not necessarily network byte order, and host
+integer word size, which is usually 4 bytes.  They also represent a
+count 14 less than their value.  The database lines have no
+termination byte; the start of the next line is indicated by its first
+byte having a value <= 30.
 
 In addition, instead of starting with a dummy entry, the old database
 format starts with a 256 byte table containing the 128 most common
-bigrams in the file list.  A bigram is a pair of adjacent bytes.  Bytes
-in the database that have the high bit set are indexes (with the high
-bit cleared) into the bigram table.  The bigram and offset-differential
-count coding makes these databases 20-25% smaller than the new format,
-but makes them not 8-bit clean.  Any byte in a file name that is in the
-ranges used for the special codes is replaced in the database by a
-question mark, which not coincidentally is the shell wildcard to match a
-single character.
-
-The old format therefore can not faithfully store entries with non-ASCII
-characters. It therefore should not be used in internationalized
-environments.
+bigrams in the file list.  A bigram is a pair of adjacent bytes.
+Bytes in the database that have the high bit set are indexes (with the
+high bit cleared) into the bigram table.  The bigram and
+offset-differential count coding makes these databases 20-25% smaller
+than the new format, but makes them not 8-bit clean.  Any byte in a
+file name that is in the ranges used for the special codes is replaced
+in the database by a question mark, which not coincidentally is the
+shell wildcard to match a single character.
+
+The old format therefore cannot faithfully store entries with
+non-ASCII characters. It therefore should not be used in
+internationalised environments.
 
 The output of @samp{locate --statistics} will give an incorrect count
-of the number of filenames containing newlines or high-bit characters
+of the number of file names containing newlines or high-bit characters
 for old-format databases.
 
 @node Newline Handling
 @section Newline Handling
 
-Within the database, filenames are terminated with a null character.
-This is the case for both the old and the new format.  
+Within the database, file names are terminated with a null character.
+This is the case for both the old and the new format.
 
 When the new database format is being used, the compression technique
 used to generate the database though relies on the ability to sort the
@@ -2473,28 +2712,30 @@ list of files before they are presented
 If the system's sort command allows its input list of files to be
 separated with null characters via the @samp{-z} option, this option
 is used and therefore @code{updatedb} and @code{locate} will both
-correctly handle filenames containing newlines.  If the @code{sort}
+correctly handle file names containing newlines.  If the @code{sort}
 command lacks support for this, the list of files is delimited with
-the newline character, meaning that parts of filenames containing
+the newline character, meaning that parts of file names containing
 newlines will be incorrectly sorted.  This can result in both
 incorrect matches and incorrect failures to match.
 
-On the other hand, if you are using the old database format, filenames
-with embedded newlines are not correctly handled.  There is no
+On the other hand, if you are using the old database format, file
+names with embedded newlines are not correctly handled.  There is no
 technical limitation which enforces this, it's just that the
-@code{bigram} program has no been updated to support lists of
-filenames separated by nulls.
+@code{bigram} program has not been updated to support lists of file
+names separated by nulls.
 
 So, if you are using the new database format (this is the default) and
-your system uses GNU @code{find}, newlines will be correctly handled
+your system uses GNU @code{sort}, newlines will be correctly handled
 at all times.  Otherwise, newlines may not be correctly handled.
 
-@node File Permissions, Reference, Databases, Top
+@node File Permissions
 @chapter File Permissions
 
 @include perm.texi
 
-@node Reference, Security Considerations, File Permissions, Top
+@include getdate.texi
+
+@node Reference
 @chapter Reference
 
 Below are summaries of the command line syntax for the programs
@@ -2505,37 +2746,67 @@ discussed in this manual.
 * Invoking locate::
 * Invoking updatedb::
 * Invoking xargs::
+* Regular Expressions::
+* Environment Variables::
 @end menu
 
-@node Invoking find, Invoking locate, , Reference
+@node Invoking find
 @section Invoking @code{find}
 
 @example
-find @r{[-H] [-L] [-P]} @r{[}@var{file}@dots{}@r{]} @r{[}@var{expression}@r{]}
+find @r{[-H] [-L] [-P] [-D @var{debugoptions}] [-O@var{level}]} @r{[}@var{file}@dots{}@r{]} @r{[}@var{expression}@r{]}
 @end example
 
 @code{find} searches the directory tree rooted at each file name
 @var{file} by evaluating the @var{expression} on each file it finds in
 the tree.
 
-The options @samp{-H}, @samp{-L} or @samp{-P} may be specified at the
-start of the command line (if none of these is specified, @samp{-P} is
-assumed).  The arguments after these are a list of files or
-directories that should be searched.
+The command line may begin with the @samp{-H}, @samp{-L}, @samp{-P},
+@samp{-D} and @samp{-O} options.  These are followed by a list of
+files or directories that should be searched.  If no files to search
+are specified, the current directory (@file{.}) is used.
 
 This list of files to search is followed by a list of expressions
 describing the files we wish to search for.  The first part of the
-expression is recognised by the fact that it begins with @samp{-},
-@samp{(}, @samp{)}, @samp{,}, or @samp{!}.  Any arguments after it are
-the rest of the expression.  If no paths are given, the current
-directory is used.  If no expression is given, the expression
-@samp{-print} is used.
+expression is recognised by the fact that it begins with @samp{-}
+followed by some other letters (for example @samp{-print}), or is
+either @samp{(} or @samp{!}.  Any arguments after it are the rest of
+the expression.  
 
-@code{find} exits with status 0 if all files are processed successfully,
-greater than 0 if errors occur.
+If no expression is given, the expression @samp{-print} is used.
 
-Three options can precede the list of path names.  They determine the
-way that symbolic links are handled.
+The @code{find} command exits with status zero if all files matched
+are processed successfully, greater than zero if errors occur.
+
+The @code{find} program also recognises two options for administrative
+use:
+
+@table @samp
+@item --help
+Print a summary of the command line usage and exit.
+@item --version
+Print the version number of @code{find} and exit.
+@end table
+
+The @samp{-version} option is a synonym for @samp{--version}
+
+
+@menu
+* Filesystem Traversal Options::
+* Warning Messages::
+* Optimisation Options::
+* Debug Options::
+* Find Expressions::
+@end menu
+
+@node Filesystem Traversal Options
+@subsection Filesystem Traversal Options
+
+The options @samp{-H}, @samp{-L} or @samp{-P} may be specified at the
+start of the command line (if none of these is specified, @samp{-P} is
+assumed).  If you specify more than one of these options, the last one
+specified takes effect (but note that the @samp{-follow} option is
+equivalent to @samp{-L}).  
 
 @table @code
 @item -P
@@ -2545,7 +2816,7 @@ of the @samp{-xtype} predicate.
 Always follow symbolic links, except in the case of the @samp{-xtype}
 predicate.
 @item -H
-Follow symbolic links specified in the list of paths to search, or
+Follow symbolic links specified in the list of files to search, or
 which are otherwise specified on the command line.
 @end table
 
@@ -2555,28 +2826,7 @@ broken), it falls back on using the prop
 itself.  @ref{Symbolic Links} for a more complete description of how
 symbolic links are handled.
 
-@xref{Primary Index}, for a summary of all of the tests, actions, and
-options that the expression can contain.  If the expression is
-missing, @samp{-print} is assumed.
-
-
-
-@code{find} also recognizes two options for administrative use:
-
-@table @code
-@item --help
-Print a summary of the command-line argument format and exit.
-@item --version
-Print the version number of @code{find} and exit.
-@end table
-
-
-@menu
-* Warning Messages::
-@end menu
-
-
-@node Warning Messages,,, Invoking find
+@node Warning Messages
 @subsection Warning Messages
 
 If there is an error on the @code{find} command line, an error message
@@ -2596,10 +2846,9 @@ Do not issue warning messages.
 @end table
 
 These options take effect at the point on the command line where they
-are specified.  Therefore if you specify @samp{-nowarn} at the end of
-the command line, you will not see warning messages for any problems
-occurring before that.  The warning messages affected by the above
-options are triggered by:
+are specified.  Therefore it's not useful to specify @samp{-nowarn} at
+the end of the command line.  The warning messages affected by the
+above options are triggered by:
 
 @itemize @minus
 @item
@@ -2608,18 +2857,17 @@ Use of the @samp{-d} option which is dep
 @item
 Use of the @samp{-ipath} option which is deprecated; please use
 @samp{-iwholename} instead.
-@item 
+@item
 Specifying an option (for example @samp{-mindepth}) after a non-option
 (for example @samp{-type} or @samp{-print}) on the command line.
 @end itemize
 
-
 The default behaviour above is designed to work in that way so that
-existing shell scripts which use such constructs don't generate
-spurious errors, but people will be made aware of the problem.
+existing shell scripts don't generate spurious errors, but people will
+be made aware of the problem.
 
 Some warning messages are issued for less common or more serious
-problems, and so cannot be turned off:
+problems, and consequently cannot be turned off:
 
 @itemize @minus
 @item
@@ -2628,38 +2876,125 @@ Use of an unrecognised backslash escape
 Use of an unrecognised formatting directive with @samp{-fprintf}
 @end itemize
 
-@node Invoking locate, Invoking updatedb, Invoking find, Reference
+@node Optimisation Options
+@subsection Optimisation Options
+
+The @samp{-O@var{level}} option sets @code{find}'s optimisation level
+to @var{level}.  The default optimisation level is 1.
+
+At certain optimisation levels, @code{find} reorders tests to speed up
+execution while preserving the overall effect; that is, predicates
+with side effects are not reordered relative to each other.  The
+optimisations performed at each optimisation level are as follows.
+
+@table @samp
+@item 0
+Currently equivalent to optimisation level 1.
+
+@item 1
+This is the default optimisation level and corresponds to the
+traditional behaviour.  Expressions are reordered so that tests based
+only on the names of files (for example@samp{ -name} and
+@samp{-regex}) are performed first.
+
+@item 2 
+Any @samp{-type} or @samp{-xtype} tests are performed after any tests
+based only on the names of files, but before any tests that require
+information from the inode.  On many modern versions of Unix, file
+types are returned by @code{readdir()} and so these predicates are
+faster to evaluate than predicates which need to stat the file first.
+
+@item 3 
+At this optimisation level, the full cost-based query optimiser is
+enabled.  The order of tests is modified so that cheap (i.e., fast)
+tests are performed first and more expensive ones are performed later,
+if necessary.  Within each cost band, predicates are evaluated earlier
+or later according to whether they are likely to succeed or not.  For
+@samp{-o}, predicates which are likely to succeed are evaluated
+earlier, and for @samp{-a}, predicates which are likely to fail are
+evaluated earlier.
+@end table
+
+
+@node Debug Options
+@subsection Debug Options
+
+The @samp{-D} option makes @code{find} produce diagnostic output.
+Much of the information is useful only for diagnosing problems, and so
+most people will not find this option helpful.
+
+The list of debug options should be comma separated.  Compatibility of
+the debug options is not guaranteed between releases of findutils.
+For a complete list of valid debug options, see the output of
+@code{find -D help}.  Valid debug options include:
+@table @samp
+@item help
+Explain the debugging options.
+@item tree   
+Show the expression tree in its original and optimised form.
+@item stat   
+Print messages as files are examined with the stat and lstat system
+calls.  The find program tries to minimise such calls.
+@item opt    
+Prints diagnostic information relating to the optimisation of the
+expression tree; see the @samp{-O} option.
+@end table
+
+@node Find Expressions
+@subsection Find Expressions
+
+The final part of the @code{find} command line is a list of
+expressions.  @xref{Primary Index}, for a summary of all of the tests,
+actions, and options that the expression can contain.  If the
+expression is missing, @samp{-print} is assumed.
+
+@node Invoking locate
 @section Invoking @code{locate}
 
 @example
 locate @r{[}@var{option}@dots{}@r{]} @var{pattern}@dots{}
 @end example
 
+For each @var{pattern} given @code{locate} searches one or more file
+name databases returning each match of @var{pattern}.
+
+For each @var{pattern} given @code{locate} searches one or more file
+name databases returning each match of @var{pattern}.
+
 @table @code
+@item --all
+@itemx -A
+Print only names which match all non-option arguments, not those
+matching one or more non-option arguments.
+
 @item --basename
 @itemx -b
 The specified pattern is matched against just the last component of
-the name of the file in the locate database.  This last component is
-also called the ``base name''.  For example, the base name of
-@file{/tmp/mystuff/foo.old.c} is @file{foo.old.c}.  If the pattern
-contains metacharacters, it must match the base name exactly.  If not,
-it must match part of the base name.
+the name of a file in the @code{locate} database.  This last
+component is also called the ``base name''.  For example, the base
+name of @file{/tmp/mystuff/foo.old.c} is @file{foo.old.c}.  If the
+pattern contains metacharacters, it must match the base name exactly.
+If not, it must match part of the base name.
 
 @item --count
 @itemx -c
-Instead of printing the matched filenames, just print the total 
-number of matches we found.
+Instead of printing the matched file names, just print the total
+number of matches found, unless @samp{--print} (@samp{-p}) is also
+present.
 
 
 @item --database=@var{path}
 @itemx -d @var{path}
-Instead of searching the default file name database, search the file
+Instead of searching the default @code{locate} database, @code{locate} search the file
 name databases in @var{path}, which is a colon-separated list of
 database file names.  You can also use the environment variable
 @code{LOCATE_PATH} to set the list of database files to search.  The
 option overrides the environment variable if both are used.  Empty
 elements in @var{path} (that is, a leading or trailing colon, or two
 colons in a row) are taken to stand for the default database.
+A database can be supplied on stdin, using @samp{-} as an element
+of @samp{path}. If more than one element of @samp{path} is @samp{-},
+later instances are ignored (but a warning message is printed).
 
 @item --existing
 @itemx -e
@@ -2667,21 +3002,34 @@ Only print out such names which currentl
 which existed when the database was created).  Note that this may slow
 down the program a lot, if there are many matches in the database.
 The way in which broken symbolic links are treated is affected by the
-@samp{-L}, @samp{-P} and @samp{-H} options.
+@samp{-L}, @samp{-P} and @samp{-H} options.  Please note that it is
+possible for the file to be deleted after @code{locate} has checked
+that it exists, but before you use it.
+
+@item --non-existing
+@itemx -E
+Only print out such names which currently do not exist (instead of
+such names which existed when the database was created).  Note that
+this may slow down the program a lot, if there are many matches in the
+database.  The way in which broken symbolic links are treated is
+affected by the @samp{-L}, @samp{-P} and @samp{-H} options.  Please
+note that @code{locate} checks that the file does not exist, but a
+file of the same name might be created after @code{locate}'s check but
+before you read @code{locate}'s output.
 
 @item --follow
 @itemx -L
-If testing for the existence of files (with the @samp{-e} option),
-omit broken symbolic links.  This is the default.
-
+If testing for the existence of files (with the @samp{-e} or @samp{-E}
+options), consider broken symbolic links to be non-existing.  This is
+the default behaviour.  
 
 @item --nofollow
 @itemx -P
 @itemx -H
-If testing for the existence of files (with the @samp{-e} option),
-treat broken symbolic links count as if they were exiting files.  The
-@samp{-H} form of this option is provided purely for similarity with
-@code{find}; the use of @samp{-P} is recommended over @samp{-H}.
+If testing for the existence of files (with the @samp{-e} or @samp{-E}
+options), treat broken symbolic links as if they were existing files.
+The @samp{-H} form of this option is provided purely for similarity
+with @code{find}; the use of @samp{-P} is recommended over @samp{-H}.
 
 @item --ignore-case
 @itemx -i
@@ -2689,10 +3037,14 @@ Ignore case distinctions in both the pat
 
 @item --limit=N
 @itemx -l N
-Limit the number of results printed to N.  If you use the
+Limit the number of results printed to N.  When used with the
 @samp{--count} option, the value printed will never be larger than
 this limit.
-
+@item --max-database-age=D
+Normally, @code{locate} will issue a warning message when it searches
+a database which is more than 8 days old.  This option changes that
+value to something other than 8.  The effect of specifying a negative
+value is undefined.
 @item --mmap
 @itemx -m
 Accepted but does nothing.  The option is supported only to provide
@@ -2702,26 +3054,41 @@ compatibility with BSD's @code{locate}.
 @itemx -0
 Results are separated with the ASCII NUL character rather than the
 newline character.  To get the full benefit of the use of this option,
-use the new locate database format (that is the default anyway).
+use the new @code{locate} database format (that is the default
+anyway).
+
+@item --print
+@itemx -p
+Print search results when they normally would not, because of the
+presence of @samp{--statistics} (@samp{-S}) or @samp{--count}
+(@samp{-c}).
 
 @item --wholename
 @itemx -w
 The specified pattern is matched against the whole name of the file in
-the locate database.  If the pattern contains metacharacters, it must
-match exactly.  If not, it must match part of the whole file name.
-This is the default behaviour.
+the @code{locate} database.  If the pattern contains metacharacters,
+it must match exactly.  If not, it must match part of the whole file
+name.  This is the default behaviour.
 
 @item --regex
 @itemx -r
 Instead of using substring or shell glob matching, the pattern
-specified on the command line is understood to be a POSIX extended
-regular expression.  Filenames from the locate database which match
-the specified regular expression are printed (or counted).  If the
-@samp{-i} flag is also given, matching is case-insensitive.  Matches
-are performed against the whole path name, and so by default a
-pathname will be matched if any part of it matches the specified
-regular expression.  The regular expression may use @samp{^} or
-@samp{$} to anchor a match at the beginning or end of a pathname.
+specified on the command line is understood to be a regular
+expression.  GNU Emacs-style regular expressions are assumed unless
+the @samp{--regextype} option is also given.  File names from the
+@code{locate} database are matched using the specified regular
+expression.  If the @samp{-i} flag is also given, matching is
+case-insensitive.  Matches are performed against the whole path name,
+and so by default a pathname will be matched if any part of it matches
+the specified regular expression.  The regular expression may use
+@samp{^} or @samp{$} to anchor a match at the beginning or end of a
+pathname.
+
+@item --regextype
+This option changes the regular expression syntax and behaviour used
+by the @samp{--regex} option.  @ref{Regular Expressions} for more
+information on the regular expression dialects understood by GNU
+findutils.
 
 @item --stdio
 @itemx -s
@@ -2730,23 +3097,45 @@ compatibility with BSD's @code{locate}.
 
 @item --statistics
 @itemx -S
-Print some summary information for each locate database.  No search is
-performed. 
+Print some summary information for each @code{locate} database.  No
+search is performed unless non-option arguments are given.
+Although the BSD version of locate also has this option, the format of the
+output is different.
 
 @item --help
-Print a summary of the options to @code{locate} and exit.
+Print a summary of the command line usage for @code{locate} and exit.
 
 @item --version
 Print the version number of @code{locate} and exit.
 @end table
 
-@node Invoking updatedb, Invoking xargs, Invoking locate, Reference
+@node Invoking updatedb
 @section Invoking @code{updatedb}
 
 @example
 updatedb @r{[}@var{option}@dots{}@r{]}
 @end example
 
+@code{updatedb} creates and updates the database of file names used by
+@code{locate}.  @code{updatedb} generates a list of files similar to
+the output of @code{find} and then uses utilities for optimizing the
+database for performance.  @code{updatedb} is often run periodically
+as a @code{cron} job and configured with environment variables or
+command options.  Typically, operating systems have a shell script
+that ``exports'' configurations for variable definitions and uses
+another shell script that ``sources'' the configuration file into the
+environment and then executes @code{updatedb} in the environment.
+
+@code{updatedb} creates and updates the database of file names used by
+@code{locate}.  @code{updatedb} generates a list of files similar to
+the output of @code{find} and then uses utilities for optimizing the
+database for performance.  @code{updatedb} is often run periodically
+as a @code{cron} job and configured with environment variables or
+command options.  Typically, operating systems have a shell script
+that ``exports'' configurations for variable definitions and uses
+another shell script that ``sources'' the configuration file into the
+environment and then executes @code{updatedb} in the environment.
+
 @table @code
 @item --findoptions='@var{OPTION}@dots{}'
 Global options to pass on to @code{find}.
@@ -2763,21 +3152,24 @@ The environment variable @code{NETPATHS}
 Default is none.
 
 @item --prunepaths='@var{path}@dots{}'
-Directories to omit from the database, which would otherwise be included.
-The environment variable @code{PRUNEPATHS} also sets this value.
-Default is @file{/tmp /usr/tmp /var/tmp /afs}.
+Directories to omit from the database, which would otherwise be
+included.  The environment variable @code{PRUNEPATHS} also sets this
+value.  Default is @file{/tmp /usr/tmp /var/tmp /afs}.  The paths are
+used as regular expressions (with @code{find ... -regex}, so you need
+to specify these paths in the same way that @code{find} will encounter
+them.  This means for example that the paths must not include trailing
+slashes.
 
 @item --prunefs='@var{path}@dots{}'
-File systems to omit from the database, which would otherwise be included.
-Note that files are pruned when a file system is reached;
-Any file system mounted under an undesired file system will be
-ignored.
-The environment variable @code{PRUNEFS} also sets this value.
-Default is @file{nfs NFS proc}.
+Filesystems to omit from the database, which would otherwise be
+included.  Note that files are pruned when a filesystem is reached;
+Any filesystem mounted under an undesired filesystem will be ignored.
+The environment variable @code{PRUNEFS} also sets this value.  Default
+is @file{nfs NFS proc}.
 
 @item --output=@var{dbfile}
-The database file to build.
-Default is system-dependent, but typically @file{/usr/local/var/locatedb}.
+The database file to build.  Default is system-dependent, but
+typically @file{/usr/local/var/locatedb}.
 
 @item --localuser=@var{user}
 The user to search the non-network directories as, using @code{su}.
@@ -2785,24 +3177,24 @@ Default is to search the non-network dir
 You can also use the environment variable @code{LOCALUSER} to set this user.
 
 @item --netuser=@var{user}
-The user to search network directories as, using @code{su}.
-Default is @code{daemon}.
-You can also use the environment variable @code{NETUSER} to set this user.
+The user to search network directories as, using @code{su}.  Default
+@code{user} is @code{daemon}.  You can also use the environment variable
+@code{NETUSER} to set this user.
 
 @item --old-format
-Generate a locate database in the old format, for compatibility with
-versions of @code{locate} other than GNU @code{locate}.  Using this
-option means that @code{locate} will not be able to properly handle
-non-ASCII characters in filenames (that is, filenames containing
-characters which have the eighth bit set, such as many of the
-characters from the ISO-8859-1 character set).
+Generate a @code{locate} database in the old format, for compatibility
+with versions of @code{locate} other than GNU @code{locate}.  Using
+this option means that @code{locate} will not be able to properly
+handle non-ASCII characters in file names (that is, file names
+containing characters which have the eighth bit set, such as many of
+the characters from the ISO-8859-1 character set).
 @item --help
-Print a summary of the command-line argument format and exit.
+Print a summary of the command line usage and exit.
 @item --version
 Print the version number of @code{updatedb} and exit.
 @end table
 
-@node Invoking xargs, ,  Invoking updatedb, Reference
+@node Invoking xargs
 @section Invoking @code{xargs}
 
 @example
@@ -2828,49 +3220,82 @@ if the command is not found
 if some other error occurred.
 @end table
 
+Exit codes greater than 128 are used by the shell to indicate that 
+a program died due to a fatal signal.
+  
 @table @code
 @item --arg-file@r{=@var{inputfile}}
-@itemx -a @r{=@var{inputfile}}
+@itemx -a o@r{@var{inputfile}}
 Read names from the file @var{inputfile} instead of standard input.
+If you use this option, the standard input stream remains unchanged
+when commands are run. Otherwise, stdin is redirected from
+@file{/dev/null}.
 
 @item --null
 @itemx -0
-Input filenames are terminated by a null character instead of by
-whitespace, and the quotes and backslash are not special (every
-character is taken literally).  Disables the end of file string, which
-is treated like any other argument.
+Input file names are terminated by a null character instead of by
+whitespace, and any quotes and backslash characters are not considered
+special (every character is taken literally).  Disables the end of
+file string, which is treated like any other argument.
+
+@item --delimiter @var{delim}
+@itemx -d @var{delim}
+
+Input file names are terminated by the specified character @var{delim}
+instead of by whitespace, and any quotes and backslash characters are
+not considered special (every character is taken literally).  Disables
+the end of file string, which is treated like any other argument.
+
+The specified delimiter may be a single character, a C-style character
+escape such as @samp{\n}, or an octal or hexadecimal escape code.
+Octal and hexadecimal escape codes are understood as for the
+@code{printf} command.  Multibyte characters are not supported.
 
-@item --eof@r{[}=@var{eof-str}@r{]}
+
+@item -E @var{eof-str}
+@itemx --eof@r{[}=@var{eof-str}@r{]}
 @itemx -e@r{[}@var{eof-str}@r{]}
-Set the end of file string to @var{eof-str}.  If the end of file string
-occurs as a line of input, the rest of the input is ignored.  If
-@var{eof-str} is omitted, there is no end of file string.  If this
-option is not given, the end of file string defaults to @samp{_}.
+Set the end of file string to @var{eof-str}.  If the end of file
+string occurs as a line of input, the rest of the input is ignored.
+If @var{eof-str} is omitted (@samp{-e}) or blank (either @samp{-e} or
+@samp{-E}), there is no end of file string.  The @samp{-e} form of
+this option is deprecated in favour of the POSIX-compliant @samp{-E}
+option, which you should use instead.  As of GNU xargs version 4.2.9,
+the default behaviour of xargs is not to have a logical end-of-file
+marker.  The POSIX standard (IEEE Std 1003.1, 2004 Edition) allows
+this.
 
 @item --help
 Print a summary of the options to @code{xargs} and exit.
 
-@item --replace@r{[}=@var{replace-str}@r{]}
+@item -I @var{replace-str}
+@itemx --replace@r{[}=@var{replace-str}@r{]}
 @itemx -i@r{[}@var{replace-str}@r{]}
 Replace occurrences of @var{replace-str} in the initial arguments with
 names read from standard input.  Also, unquoted blanks do not
-terminate arguments; instead, the input is split at newlines only.
-If @var{replace-str} is omitted, it defaults to @samp{@{@}}
-(like for @samp{find -exec}).  Implies @samp{-x} and @samp{-l 1}.
+terminate arguments; instead, the input is split at newlines only.  If
+@var{replace-str} is omitted (omitting it is allowed only for
+@samp{-i}), it defaults to @samp{@{@}} (like for @samp{find -exec}).
+Implies @samp{-x} and @samp{-l 1}.  The @samp{-i} option is deprecated
+in favour of the @samp{-I} option.
 
-@item --max-lines@r{[}=@var{max-lines}@r{]}
+@item -L @var{max-lines}
+@itemx --max-lines@r{[}=@var{max-lines}@r{]}
 @itemx -l@r{[}@var{max-lines}@r{]}
-Use at most @var{max-lines} nonblank input lines per command line;
-@var{max-lines} defaults to 1 if omitted.  Trailing blanks cause an
-input line to be logically continued on the next input line, for the
-purpose of counting the lines.  Implies @samp{-x}.
+Use at most @var{max-lines} non-blank input lines per command line.
+For @samp{-l}, @var{max-lines} defaults to 1 if omitted.  For
+@samp{-L}, the argument is mandatory.  Trailing blanks cause an input
+line to be logically continued on the next input line, for the purpose
+of counting the lines.  Implies @samp{-x}.  The @samp{-l} form of this
+option is deprecated in favour of the POSIX-compliant @samp{-L}
+option.
 
 @item --max-args=@var{max-args}
 @itemx -n @var{max-args}
 Use at most @var{max-args} arguments per command line.  Fewer than
 @var{max-args} arguments will be used if the size (see the @samp{-s}
-option) is exceeded, unless the @samp{-x} option is given, in which case
-@code{xargs} will exit.
+option) is exceeded, unless the @samp{-x} option is given, in which
+case @code{xargs} will exit.
 
 @item --interactive
 @itemx -p
@@ -2880,15 +3305,23 @@ with @samp{y} or @samp{Y}.  Implies @sam
 
 @item --no-run-if-empty
 @itemx -r
-If the standard input does not contain any nonblanks, do not run the
-command.  By default, the command is run once even if there is no input.
+If the standard input is completely empty, do not run the
+command.  By default, the command is run once even if there is no
+input.
 
 @item --max-chars=@var{max-chars}
 @itemx -s @var{max-chars}
 Use at most @var{max-chars} characters per command line, including the
-command and initial arguments and the terminating nulls at the ends of
+command, initial arguments and any terminating nulls at the ends of
 the argument strings.
 
+@item --show-limits
+Display the limits on the command-line length which are imposed by the
+operating system, @code{xargs}' choice of buffer size and the
+@samp{-s} option.  Pipe the input from @file{/dev/null} (and perhaps
+specify @samp{--no-run-if-empty}) if you don't want @code{xargs} to do
+anything.
+
 @item --verbose
 @itemx -t
 Print the command line on the standard error output before executing
@@ -2904,31 +3337,893 @@ Exit if the size (see the @samp{-s} opti
 
 @item --max-procs=@var{max-procs}
 @itemx -P @var{max-procs}
-Run up to @var{max-procs} processes at a time; the default is 1.  If
+Run simultaneously up to @var{max-procs} processes at once; the default is 1.  If
 @var{max-procs} is 0, @code{xargs} will run as many processes as
-possible at a time.
+possible simultaneously.
+@end table
+
+
+@node Regular Expressions
+@section Regular Expressions
+
+The @samp{-regex} and @samp{-iregex} tests of @code{find} allow
+matching by regular expression, as does the @samp{--regex} option of
+@code{locate}.  There are many different types of Regular Expression,
+but the type used by @code{find} and @code{locate} is the same as is
+used in GNU Emacs.  Both programs provide an option which allows you
+to select an alternative regular expression syntax; for @code{find}
+this is the @samp{-regextype} option, and for @code{locate} this is
+the @samp{--regextype} option.
+
+These options take a single argument, which indicates the specific
+regular expression syntax and behaviour that should be used.  This
+should be one of the following:
+
+@include regexprops.texi
+
+@node Environment Variables
+@section Environment Variables
+@table @var
+@item LANG
+Provides a default value for the internationalisation variables that
+are unset or null.
+@item LC_ALL
+If set to a non-empty string value, override the values of all the
+other internationalisation variables.
+@item LC_COLLATE
+The POSIX standard specifies that this variable affects the pattern
+matching to be used for the `\-name' option.  GNU find uses the
+GNU version of the @code{fnmatch} library function.
+
+POSIX also specifies that the `LC_COLLATE' environment 
+variable affects the interpretation of the user's response to the 
+query issued by `\-ok', but this is not the case for GNU find.
+@item LC_CTYPE 
+This variable affects the treatment of character classes used with 
+the @samp{-name} test, if the system's 
+@code{fnmatch} library function supports this.   It has no effect on the behaviour 
+of the @samp{-ok} expression.
+@item LC_MESSAGES
+Determines the locale to be used for internationalised messages.
+@item NLSPATH
+Determines the location of the internationalisation message catalogues.
+@item PATH
+Affects the directories which are searched to find the executables
+invoked by @samp{-exec}, @samp{-execdir} @samp{-ok} and @samp{-okdir}.
+If the @var{PATH} environment variable includes the current directory
+(by explicitly including @samp{.} or by having an empty element), and
+the find command line includes @samp{-execdir} or @samp{-okdir},
+@code{find} will refuse to run.  @xref{Security Considerations}, for a
+more detailed discussion of security matters.
+
+@item POSIXLY_CORRECT 
+Determines the block size used by @samp{-ls} and @samp{-fls}.  
+If @var{POSIXLY_CORRECT} is set, blocks are units of 512 bytes.  Otherwise
+they are units of 1024 bytes.
+
+@item TZ 
+Affects the time zone used for some of the time-related format
+directives of @samp{-printf} and @samp{-fprintf}.
 @end table
 
-@node Security Considerations, Error Messages, Reference, Top
+
+
+@node Common Tasks
+@chapter Common Tasks
+
+The sections that follow contain some extended examples that both give
+a good idea of the power of these programs, and show you how to solve
+common real-world problems.
+
+@menu
+* Viewing And Editing::
+* Archiving::
+* Cleaning Up::
+* Strange File Names::
+* Fixing Permissions::
+* Classifying Files::
+@end menu
+
+@node Viewing And Editing
+@section Viewing And Editing
+
+To view a list of files that meet certain criteria, simply run your
+file viewing program with the file names as arguments.  Shells
+substitute a command enclosed in backquotes with its output, so the
+whole command looks like this:
+
+@example
+less `find /usr/include -name '*.h' | xargs grep -l mode_t`
+@end example
+
+@noindent
+You can edit those files by giving an editor name instead of a file
+viewing program:
+
+@example
+emacs `find /usr/include -name '*.h' | xargs grep -l mode_t`
+@end example
+
+Because there is a limit to the length of any individual command line,
+there is a limit to the number of files that can be handled in this
+way.  We can get around this difficulty by using xargs like this:
+
+@example
+find /usr/include -name '*.h' | xargs grep -l mode_t > todo
+xargs --arg-file=todo emacs
+@end example
+
+Here, @code{xargs} will run @code{emacs} as many times as necessary to
+visit all of the files listed in the file @file{todo}.
+
+@node Archiving
+@section Archiving
+
+You can pass a list of files produced by @code{find} to a file
+archiving program.  GNU @code{tar} and @code{cpio} can both read lists
+of file names from the standard input---either delimited by nulls (the
+safe way) or by blanks (the lazy, risky default way).  To use
+null-delimited names, give them the @samp{--null} option.  You can
+store a file archive in a file, write it on a tape, or send it over a
+network to extract on another machine.
+
+One common use of @code{find} to archive files is to send a list of
+the files in a directory tree to @code{cpio}.  Use @samp{-depth} so if
+a directory does not have write permission for its owner, its contents
+can still be restored from the archive since the directory's
+permissions are restored after its contents.  Here is an example of
+doing this using @code{cpio}; you could use a more complex @code{find}
+expression to archive only certain files.
+
+@example
+find . -depth -print0 |
+  cpio --create --null --format=crc --file=/dev/nrst0
+@end example
+
+You could restore that archive using this command:
+
+@example
+cpio --extract --null --make-dir --unconditional \
+  --preserve --file=/dev/nrst0
+@end example
+
+Here are the commands to do the same things using @code{tar}:
+
+@example
+find . -depth -print0 |
+  tar --create --null --files-from=- --file=/dev/nrst0
+
+tar --extract --null --preserve-perm --same-owner \
+  --file=/dev/nrst0
+@end example
+
+@c Idea from Rick Sladkey.
+Here is an example of copying a directory from one machine to another:
+
+@example
+find . -depth -print0 | cpio -0o -Hnewc |
+  rsh @var{other-machine} "cd `pwd` && cpio -i0dum"
+@end example
+
+@node Cleaning Up
+@section Cleaning Up
+
+@c Idea from Jim Meyering.
+This section gives examples of removing unwanted files in various
+situations.  Here is a command to remove the CVS backup files created
+when an update requires a merge:
+
+@example
+find . -name '.#*' -print0 | xargs -0r rm -f
+@end example
+
+The command above works, but the following is safer:
+
+@example
+find . -name '.#*' -depth -delete
+@end example
+
+@c Idea from Franc,ois Pinard.
+You can run this command to clean out your clutter in @file{/tmp}.
+You might place it in the file your shell runs when you log out
+(@file{.bash_logout}, @file{.logout}, or @file{.zlogout}, depending on
+which shell you use).
+
+@example
+find /tmp -depth -user "$LOGNAME" -type f -delete
+@end example
+
+If your @code{find} command removes directories, you may find that
+you get a spurious error message when @code{find} tries to recurse
+into a directory that has now been removed.  Using the @samp{-depth}
+option will normally resolve this problem.
+
+@c Idea from Noah Friedman.
+To remove old Emacs backup and auto-save files, you can use a command
+like the following.  It is especially important in this case to use
+null-terminated file names because Emacs packages like the VM mailer
+often create temporary file names with spaces in them, like
+@file{#reply to David J. MacKenzie<1>#}.
+
+@example
+find ~ \( -name '*~' -o -name '#*#' \) -print0 |
+  xargs --no-run-if-empty --null rm -vf
+@end example
+
+Removing old files from @file{/tmp} is commonly done from @code{cron}:
+
+@c Idea from Kaveh Ghazi.
+@example
+find /tmp /var/tmp -not -type d -mtime +3 -delete
+find /tmp /var/tmp -depth -mindepth 1 -type d -empty -delete
+@end example
+
+The second @code{find} command above uses @samp{-depth} so it cleans
+out empty directories depth-first, hoping that the parents become
+empty and can be removed too.  It uses @samp{-mindepth} to avoid
+removing @file{/tmp} itself if it becomes totally empty.
+
+@node Strange File Names
+@section Strange File Names
+
+@c Idea from:
+@c From: tmatimar@isgtec.com (Ted Timar)
+@c Newsgroups: comp.unix.questions,comp.unix.shell,comp.answers,news.answers
+@c Subject: Unix - Frequently Asked Questions (2/7) [Frequent posting]
+@c Subject: How do I remove a file with funny characters in the filename ?
+@c Date: Thu Mar 18 17:16:55 EST 1993
+@code{find} can help you remove or rename a file with strange
+characters in its name.  People are sometimes stymied by files whose
+names contain characters such as spaces, tabs, control characters, or
+characters with the high bit set.  The simplest way to remove such
+files is:
+
+@example
+rm -i @var{some*pattern*that*matches*the*problem*file}
+@end example
+
+@code{rm} asks you whether to remove each file matching the given
+pattern.  If you are using an old shell, this approach might not work
+if the file name contains a character with the high bit set; the shell
+may strip it off.  A more reliable way is:
+
+@example
+find . -maxdepth 1 @var{tests} -okdir rm '@{@}' \;
+@end example
+
+@noindent
+where @var{tests} uniquely identify the file.  The @samp{-maxdepth 1}
+option prevents @code{find} from wasting time searching for the file
+in any subdirectories; if there are no subdirectories, you may omit
+it.  A good way to uniquely identify the problem file is to figure out
+its inode number; use
+
+@example
+ls -i
+@end example
+
+Suppose you have a file whose name contains control characters, and
+you have found that its inode number is 12345.  This command prompts
+you for whether to remove it:
+
+@example
+find . -maxdepth 1 -inum 12345 -okdir rm -f '@{@}' \;
+@end example
+
+If you don't want to be asked, perhaps because the file name may
+contain a strange character sequence that will mess up your screen
+when printed, then use @samp{-execdir} instead of @samp{-okdir}.
+
+If you want to rename the file instead, you can use @code{mv} instead
+of @code{rm}:
+
+@example
+find . -maxdepth 1 -inum 12345 -okdir mv '@{@}' @var{new-file-name} \;
+@end example
+
+@node Fixing Permissions
+@section Fixing Permissions
+
+Suppose you want to make sure that everyone can write to the
+directories in a certain directory tree.  Here is a way to find
+directories lacking either user or group write permission (or both),
+and fix their permissions:
+
+@example
+find . -type d -not -perm -ug=w | xargs chmod ug+w
+@end example
+
+@noindent
+You could also reverse the operations, if you want to make sure that
+directories do @emph{not} have world write permission.
+
+@node Classifying Files
+@section Classifying Files
+
+@c Idea from:
+@c From: martin@mwtech.UUCP (Martin Weitzel)
+@c Newsgroups: comp.unix.wizards,comp.unix.questions
+@c Subject: Advanced usage of 'find' (Re: Unix security automating script)
+@c Date: 22 Mar 90 15:05:19 GMT
+If you want to classify a set of files into several groups based on
+different criteria, you can use the comma operator to perform multiple
+independent tests on the files.  Here is an example:
+
+@example
+find / -type d \( -perm -o=w -fprint allwrite , \
+  -perm -o=x -fprint allexec \)
+
+echo "Directories that can be written to by everyone:"
+cat allwrite
+echo ""
+echo "Directories with search permissions for everyone:"
+cat allexec
+@end example
+
+@code{find} has only to make one scan through the directory tree
+(which is one of the most time consuming parts of its work).
+
+@node Worked Examples
+@chapter Worked Examples
+
+The tools in the findutils package, and in particular @code{find},
+have a large number of options.  This means that quite often,
+there is more than one way to do things.  Some of the options
+and facilities only exist for compatibility with other tools, and
+findutils provides improved ways of doing things.
+
+This chapter describes a number of useful tasks that are commonly
+performed, and compares the different ways of achieving them.
+
+@menu
+* Deleting Files::
+* Updating A Timestamp File::
+@end menu
+
+@node Deleting Files
+@section Deleting Files
+
+One of the most common tasks that @code{find} is used for is locating
+files that can be deleted.  This might include:
+
+@itemize
+@item 
+Files last modified more than 3 years ago which haven't been accessed
+for at least 2 years
+@item
+Files belonging to a certain user
+@item
+Temporary files which are no longer required
+@end itemize
+
+This example concentrates on the actual deletion task rather than on
+sophisticated ways of locating the files that need to be deleted.
+We'll assume that the files we want to delete are old files underneath
+@file{/var/tmp/stuff}.
+
+@subsection The Traditional Way
+
+The traditional way to delete files in @file{var/tmp/stuff} that have
+not been modified in over 90 days would have been:
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -exec /bin/rm @{@} \;
+@end smallexample
+
+The above command uses @samp{-exec} to run the @code{/bin/rm} command
+to remove each file.  This approach works and in fact would have
+worked in Version 7 Unix in 1979.  However, there are a number of
+problems with this approach.
+
+
+The most obvious problem with the approach above is that it causes
+@code{find} to fork every time it finds a file that needs to delete,
+and the child process then has to use the @code{exec} system call to
+launch @code{/bin/rm}.   All this is quite inefficient.  If we are
+going to use @code{/bin/rm} to do this job, it is better to make it
+delete more than one file at a time.  
+
+The most obvious way of doing this is to use the shell's command
+expansion feature:
+
+@smallexample
+/bin/rm `find /var/tmp/stuff -mtime +90 -print`
+@end smallexample
+or you could use the more modern form
+@smallexample
+/bin/rm $(find /var/tmp/stuff -mtime +90 -print)
+@end smallexample
+
+The commands above are much more efficient than the first attempt.
+However, there is a problem with them.  The shell has a maximum
+command length which is imposed by the operating system (the actual
+limit varies between systems).  This means that while the command
+expansion technique will usually work, it will suddenly fail when
+there are lots of files to delete.  Since the task is to delete
+unwanted files, this is precisely the time we don't want things to go
+wrong.
+
+@subsection Making Use of xargs
+
+So, is there a way to be more efficient in the use of @code{fork()}
+and @code{exec()} without running up against this limit?
+Yes, we can be almost optimally efficient by making use
+of the @code{xargs} command.  The @code{xargs} command reads arguments
+from its standard input and builds them into command lines.  We can
+use it like this:
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -print | xargs /bin/rm 
+@end smallexample
+
+For example if the files found by @code{find} are
+@file{/var/tmp/stuff/A}, 
+@file{/var/tmp/stuff/B} and 
+@file{/var/tmp/stuff/C} then @code{xargs} might issue the commands 
+
+@smallexample
+/bin/rm /var/tmp/stuff/A /var/tmp/stuff/B
+/bin/rm /var/tmp/stuff/C
+@end smallexample
+
+The above assumes that @code{xargs} has a very small maximum command
+line length.  The real limit is much larger but the idea is that
+@code{xargs} will run @code{/bin/rm} as many times as necessary to get
+the job done, given the limits on command line length.
+
+This usage of @code{xargs} is pretty efficient, and the @code{xargs}
+command is widely implemented (all modern versions of Unix offer it).
+So far then, the news is all good.  However, there is bad news too.
+
+@subsection Unusual characters in filenames
+
+Unix-like systems allow any characters to appear in file names with
+the exception of the ASCII NUL character and the backslash.
+Backslashes can occur in path names (as the directory separator) but
+not in the names of actual directory entries.  This means that the
+list of files that @code{xargs} reads could in fact contain white space
+characters --- spaces, tabs and newline characters.  Since by default,
+@code{xargs} assumes that the list of files it is reading uses white
+space as an argument separator, it cannot correctly handle the case
+where a filename actually includes white space.  This makes the
+default behaviour of @code{xargs} almost useless for handling
+arbitrary data.
+
+To solve this problem, GNU findutils introduced the @samp{-print0}
+action for @code{find}.  This uses the ASCII NUL character to separate
+the entries in the file list that it produces.  This is the ideal
+choice of separator since it is the only character that cannot appear
+within a path name.  The @samp{-0} option to @code{xargs} makes it
+assume that arguments are separated with ASCII NUL instead of white
+space.  It also turns off another misfeature in the default behaviour
+of @code{xargs}, which is that it pays attention to quote characters
+in its input.  Some versions of @code{xargs} also terminate when they
+see a lone @samp{_} in the input, but GNU @code{find} no longer does
+that (since it has become an optional behaviour in the Unix standard).
+
+So, putting @code{find -print0} together with @code{xargs -0} we get
+this command:
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -print0 | xargs -0 /bin/rm 
+@end smallexample
+
+The result is an efficient way of proceeding that
+correctly handles all the possible characters that could appear in the
+list of files to delete.  This is good news.  However, there is, as
+I'm sure you're expecting, also more bad news.  The problem is that
+this is not a portable construct; although other versions of Unix
+(notable BSD-derived ones) support @samp{-print0}, it's not
+universal.  So, is there a more universal mechanism?
+
+@subsection Going back to -exec
+
+There is indeed a more universal mechanism, which is a slight
+modification to the @samp{-exec} action.  The normal @samp{-exec}
+action assumes that the command to run is terminated with a semicolon
+(the semicolon normally has to be quoted in order to protect it from
+interpretation as the shell command separator).  The SVR4 edition of
+Unix introduced a slight variation, which involves terminating the
+command with @samp{+} instead:
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -exec /bin/rm @{@} \+
+@end smallexample
+
+The above use of @samp{-exec} causes @code{find} to build up a long
+command line and then issue it.  This can be less efficient than some
+uses of @code{xargs}; for example @code{xargs} allows new command
+lines to be built up while the previous command is still executing, and
+allows you to specify a number of commands to run in parallel.
+However, the @code{find @dots{} -exec @dots{} +} construct has the advantage
+of wide portability.  GNU findutils did not support @samp{-exec @dots{} +}
+until version 4.2.12; one of the reasons for this is that it already
+had the @samp{-print0} action in any case.
+
+
+@subsection A more secure version of -exec
+
+The command above seems to be efficient and portable.  However,
+within it lurks a security problem.  The problem is shared with
+all the commands we've tried in this worked example so far, too.  The
+security problem is a race condition; that is, if it is possible for
+somebody to manipulate the filesystem that you are searching while you
+are searching it, it is possible for them to persuade your @code{find}
+command to cause the deletion of a file that you can delete but they
+normally cannot.  
+
+The problem occurs because the @samp{-exec} action is defined by the
+@acronym{POSIX} standard to invoke its command with the same working directory
+as @code{find} had when it was started.  This means that the arguments
+which replace the @{@} include a relative path from @code{find}'s
+starting point down the file that needs to be deleted.  For example,
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -exec /bin/rm @{@} \+
+@end smallexample
+
+might actually issue the command:
+
+@smallexample
+/bin/rm /var/tmp/stuff/A /var/tmp/stuff/B /var/tmp/stuff/passwd
+@end smallexample
+
+Notice the file @file{/var/tmp/stuff/passwd}.  Likewise, the command:
+
+@smallexample
+cd /var/tmp && find stuff -mtime +90 -exec /bin/rm @{@} \+
+@end smallexample
+
+might actually issue the command:
+
+@smallexample
+/bin/rm stuff/A stuff/B stuff/passwd
+@end smallexample
+
+If an attacker can rename @file{stuff} to something else (making use
+of their write permissions in @file{/var/tmp}) they can replace it
+with a symbolic link to @file{/etc}.  That means that the
+@code{/bin/rm} command will be invoked on @file{/etc/passwd}.  If you
+are running your @code{find} command as root, the attacker has just managed
+to delete a vital file.  All they needed to do to achieve this was
+replace a subdirectory with a symbolic link at the vital moment.
+
+There is however, a simple solution to the problem.  This is an action
+which works a lot like @code{-exec} but doesn't need to traverse a
+chain of directories to reach the file that it needs to work on.  This
+is the @samp{-execdir} action, which was introduced by the BSD family
+of operating systems.   The command,
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -execdir /bin/rm @{@} \+
+@end smallexample
+
+might delete a set of files by performing these actions:
+
+@enumerate
+@item 
+Change directory to /var/tmp/stuff/foo
+@item 
+Invoke @code{/bin/rm ./file1 ./file2 ./file3}
+@item
+Change directory to /var/tmp/stuff/bar
+@item 
+Invoke @code{/bin/rm ./file99 ./file100 ./file101}
+@end enumerate
+
+This is a much more secure method.  We are no longer exposed to a race
+condition.  For many typical uses of @code{find}, this is the best
+strategy.   It's reasonably efficient, but the length of the command
+line is limited not just by the operating system limits, but also by
+how many files we actually need to delete from each directory.
+
+Is it possible to do any better?   In the case of general file
+processing, no.  However, in the specific case of deleting files it is
+indeed possible to do better.  
+
+@subsection Using the -delete action
+
+The most efficient and secure method of solving this problem is to use
+the @samp{-delete} action:
+
+@smallexample
+find /var/tmp/stuff -mtime +90 -delete
+@end smallexample
+
+This alternative is more efficient than any of the @samp{-exec} or
+@samp{-execdir} actions, since it entirely avoids the overhead of
+forking a new process and using @code{exec} to run @code{/bin/rm}.  It
+is also normally more efficient than @code{xargs} for the same
+reason.   The file deletion is performed from the directory containing
+the entry to be deleted, so the @samp{-delete} action has the same
+security advantages as the @samp{-execdir} action has.  
+
+The @samp{-delete} action was introduced by the BSD family of
+operating systems.
+
+@subsection Improving things still further
+
+Is it possible to improve things still further?  Not without either
+modifying the system library to the operating system or having more specific
+knowledge of the layout of the filesystem and disk I/O subsystem, or
+both.
+
+The @code{find} command traverses the filesystem, reading
+directories.  It then issues a separate system call for each file to
+be deleted.  If we could modify the operating system, there are
+potential gains that could be made:
+
+@itemize
+@item
+We could have a system call to which we pass more than one filename
+for deletion
+@item
+Alternatively, we could pass in a list of inode numbers (on GNU/Linux
+systems, @code{readdir()} also returns the inode number of each
+directory entry) to be deleted.
+@end itemize
+
+The above possibilities sound interesting, but from the kernel's point
+of view it is difficult to enforce standard Unix access controls for
+such processing by inode number.  Such a facility would probably
+need to be restricted to the superuser.
+
+Another way of improving performance would be to increase the
+parallelism of the process.  For example if the directory hierarchy we
+are searching is actually spread across a number of disks, we might
+somehow be able to arrange for @code{find} to process each disk in
+parallel.  In practice GNU @code{find} doesn't have such an intimate
+understanding of the system's filesystem layout and disk I/O
+subsystem.
+
+However, since the system administrator can have such an understanding
+they can take advantage of it like so:
+
+@smallexample
+find /var/tmp/stuff1 -mtime +90 -delete &
+find /var/tmp/stuff2 -mtime +90 -delete &
+find /var/tmp/stuff3 -mtime +90 -delete &
+find /var/tmp/stuff4 -mtime +90 -delete &
+wait
+@end smallexample
+
+In the example above, four separate instances of @code{find} are used
+to search four subdirectories in parallel.  The @code{wait} command
+simply waits for all of these to complete.  Whether this approach is
+more or less efficient than a single instance of @code{find} depends
+on a number of things:
+
+@itemize
+@item
+Are the directories being searched in parallel actually on separate
+disks?  If not, this parallel search might just result in a lot of
+disk head movement and so the speed might even be slower.
+@item
+Other activity - are other programs also doing things on those disks?
+@end itemize
+
+
+@subsection Conclusion
+
+The fastest and most secure way to delete files with the help of
+@code{find} is to use @samp{-delete}.  Using @code{xargs -0 -P N} can
+also make effective use of the disk, but it is not as secure.
+
+In the case where we're doing things other than deleting files, the
+most secure alternative is @samp{-execdir @dots{} +}, but this is not as
+portable as the insecure action @samp{-exec @dots{} +}.
+
+The @samp{-delete} action is not completely portable, but the only
+other possibility which is as secure (@samp{-execdir}) is no more
+portable.  The most efficient portable alternative is @samp{-exec
+@dots{}+}, but this is insecure and isn't supported by versions of GNU
+findutils prior to 4.2.12.
+
+
+@node Updating A Timestamp File
+@section Updating A Timestamp File
+
+Suppose we have a directory full of files which is maintained with a
+set of automated tools; perhaps one set of tools updates them and
+another set of tools uses the result.  In this situation, it might be
+useful for the second set of tools to know if the files have recently
+been changed.  It might be useful, for example, to have a 'timestamp'
+file which gives the timestamp on the newest file in the collection.
+
+We can use @code{find} to achieve this, but there are several
+different ways to do it.
+
+@subsection Updating the Timestamp The Wrong Way
+
+The obvious but wrong answer is just to use @samp{-newer}:-
+
+@smallexample
+find subdir -newer timestamp -exec touch -r @{@} timestamp \; 
+@end smallexample
+
+This does the right sort of thing but has a bug.  Suppose that two
+files in the subdirectory have been updated, and that these are called
+@file{file1} and @file{file2}.  The command above will update
+@file{timestamp} with the modification time of @file{file1} or that of
+@file{file2}, but we don't know which one.  Since the timestamps on
+@file{file1} and @file{file2} will in general be different, this could
+well be the wrong value.
+
+One solution to this problem is to modify @code{find} to recheck the
+modification time of @file{timestamp} every time a file is to be
+compared against it, but that will reduce the performance of
+@code{find}.
+
+@subsection Using the test utility to compare timestamps
+
+The @code{test} command can be used to compare timestamps:
+
+@smallexample
+find subdir -exec test @{@} -nt timestamp \; -exec touch -r @{@} timestamp \; 
+@end smallexample
+
+This will ensure that any changes made to the modification time of
+@file{timestamp} that take place during the execution of @code{find}
+are taken into account.  This resolves our earlier problem, but
+unfortunately this runs much more slowly.
+
+@subsection A combined approach
+
+We can of course still use @samp{-newer} to cut down on the number of
+calls to @code{test}:
+
+@smallexample
+find subdir -newer timestamp -a \
+     -exec test @{@} -nt timestamp \; -a \
+     -exec touch -r @{@} timestamp \; 
+@end smallexample
+
+Here, the @samp{-newer} test excludes all the files which are
+definitely older than the timestamp, but all the files which are newer
+than the old value of the timestamp are compared against the current
+updated timestamp.
+
+This is indeed faster in general, but the speed difference will depend
+on how many updated files there are.
+
+@subsection Using -printf and sort to compare timestamps
+
+It is possible to use the @samp{-printf} action to abandon the use of
+@code{test} entirely:
+
+@smallexample
+newest=$(find subdir -newer timestamp -printf "%A@:%p\n" | 
+           sort -n | 
+           tail -1 | 
+           cut -d: -f2- ) 
+touch -r "$@{newest:-timestamp@}" timestamp
+@end smallexample
+
+The command above works by generating a list of the timestamps and
+names of all the files which are newer than the timestamp.  The
+@code{sort}, @code{tail} and @code{cut} commands simply pull out the
+name of the file with the largest timestamp value (that is, the latest
+file).  The @code{touch} command is then used to update the timestamp,
+
+The @code{"$@{newest:-timestamp@}"} expression simply expands to the
+value of @code{$newest} if that variable is set, but to
+@file{timestamp} otherwise.  This ensures that an argument is always
+given to the @samp{-r} option of the @code{touch} command.
+
+This approach seems quite efficient, but unfortunately it has a bug.
+Many operating systems now keep file modification time information at
+a granularity which is finer than one second.  Unfortunately the
+@samp{%A@@} format for @samp{-printf} only prints a whole-number value
+currently; that is, these values are at a one-second granularity.
+This means that in our example above, @samp{$newest} will be the name
+of a file which is no more than one second older than the newest file,
+but may indeed be older.
+
+It would be possible to solve this problem with some kind of loop:
+
+@smallexample
+while true; do
+        newest=$(find subdir -newer timestamp -printf "%A@@:%p\n" | 
+           sort -n | 
+           tail -1 | 
+           cut -d: -f2- ) 
+        if test -z "$newest" ; then
+                break
+        else
+                touch -r "$newest" timestamp
+        fi
+done
+@end smallexample
+
+A better fix for this problem would be to allow the @samp{%A@@} format
+to produce a result having a fractional part, too.  While this is
+planned for GNU @code{find}, it hasn't been done yet.
+
+@subsection Coping with sub-second timestamp resolution
+
+Another tool which often works with timestamps is @code{make}.  We can
+use @code{find} to generate a @file{Makefile} file on the fly and then
+use @code{make} to update the timestamps:
+
+@smallexample
+makefile=$(mktemp)
+find subdir \
+	\( \! -xtype l \) \
+	-newer timestamp \
+	-printf "timestamp:: %p\n\ttouch -r %p timestamp\n\n" > "$makefile"
+make -f "$makefile"
+rm   -f "$makefile"
+@end smallexample
+
+Unfortunately although the solution above is quite elegant, it fails
+to cope with white space within file names, and adjusting it to do so
+would require a rather complex shell script.
+
+
+@subsection Coping with odd filenames too
+
+We can fix both of these problems (looping and problems with white
+space), and do things more efficiently too.  The following command
+works with newlines and doesn't need to sort the list of filenames.
+
+@smallexample
+find subdir -newer timestamp -printf "%A@@:%p\0" | 
+   perl -0 newest.pl |
+   xargs --no-run-if-empty --null -i \
+      find @{@} -maxdepth 0 -newer timestamp -exec touch -r @{@} timestamp \;
+@end smallexample
+
+The first @code{find} command generates a list of files which are
+newer than the original timestamp file, and prints a list of them with
+their timestamps.  The @file{newest.pl} script simply filters out all
+the filenames which have timestamps which are older than whatever the
+newest file is:-
+
+@smallexample
+@verbatim
+#! /usr/bin/perl -0
+my @newest = ();
+my $latest_stamp = undef;
+while (<>) {
+    my ($stamp, $name) = split(/:/);
+    if (!defined($latest_stamp) || ($tstamp > $latest_stamp)) {
+        $latest_stamp = $stamp;
+        @newest = ();
+    }
+    if ($tstamp >= $latest_stamp) {
+        push @newest, $name;
+    }
+}
+print join("\0", @newest);
+@end verbatim
+@end smallexample
+
+This prints a list of zero or more files, all of which are newer than
+the original timestamp file, and which have the same timestamp as each
+other, to the nearest second.  The second @code{find} command takes
+each resulting file one at a time, and if that is newer than the
+timestamp file, the timestamp is updated.
+
+@node Security Considerations
 @chapter Security Considerations
 
 Security considerations are important if you are using @code{find} or
 @code{xargs} to search for or process files that don't belong to you
-or over which other people have control.  Security considerations
+or which other people have control.  Security considerations
 relating to @code{locate} may also apply if you have files which you
-may not want others to see.   
+do not want others to see.
 
-In general, the most severe forms of security problems affecting
-@code{find} and related programs are where third parties can bring
-about a situation where those programs allow them to do something
-they would normally not be able to do.  This is called @emph{privilege
+The most severe forms of security problems affecting
+@code{find} and related programs are when third parties bring
+about a situation allowing them to do something
+they would normally not be able to accomplish.  This is called @emph{privilege
 elevation}.  This might include deleting files they would not normally
-be able to delete.  It is also common for the system to periodically
-invoke @code{find} for housekeeping purposes.  These invocations of
+be able to delete.  It is common for the operating system to periodically
+invoke @code{find} for self-maintenance purposes.  These invocations of
 @code{find} are particularly problematic from a security point of view
-as these are often invoked by the superuser and search the whole file
-system hierarchy.  The severity of any associated problem depends on
-what the system is going to do with the output of @code{find}.
+as these are often invoked by the superuser and search the entire
+filesystem hierarchy.  Generally, the severity of any associated problem depends
+on what the system is going to do with the files found by @code{find}.
 
 @menu
 * Levels of Risk::      What is your level of exposure to security problems?
@@ -2954,7 +4249,7 @@ those other users can manipulate the fil
 @file{/home} or @file{/tmp}).
 
 @item Medium Risk
-Systems where the actions of other users can create filenames chosen
+Systems where the actions of other users can create file names chosen
 by them, but to which they don't have access while @code{find} is
 being run.  This access might include leaving programs running (shell
 background jobs, @code{at} or @code{cron} tasks, for example).  On
@@ -2964,7 +4259,7 @@ risk.  Most systems fall into this categ
 
 @item Low Risk
 Systems to which untrusted parties do not have access, cannot create
-filenames of their own choice (even remotely) and which contain no
+file names of their own choice (even remotely) and which contain no
 security flaws which might enable an untrusted third party to gain
 access.  Most systems do not fall into this category because there are
 many ways in which external parties can affect the names of files that
@@ -2985,7 +4280,7 @@ risk'' type system, but the consequences
 disastrous, then you should still give serious thought to all the
 possible security problems, many of which of course will not be
 discussed here -- this section of the manual is intended to be
-informative but not comprehensive or exhaustive.   
+informative but not comprehensive or exhaustive.
 
 If you are responsible for the operation of a system where the
 consequences of a security problem could be very important, you should
@@ -2993,27 +4288,27 @@ do two things:-
 
 @enumerate
 @item Define a security policy which defines who is allowed to do what
-on your system
+on your system.
 @item Seek competent advice on how to enforce your policy, detect
 breaches of that policy, and take account of any potential problems
-that might fall outside the scope of your policy
+that might fall outside the scope of your policy.
 @end enumerate
 
 
 @node Security Considerations for find
-@section Security Considerations for find
+@section Security Considerations for @code{find}
 
 
 Some of the actions @code{find} might take have a direct effect;
 these include @code{-exec} and @code{-delete}.  However, it is also
 common to use @code{-print} explicitly or implicitly, and so if
-@code{find} produces the wrong list of filenames, that can also be a
+@code{find} produces the wrong list of file names, that can also be a
 security problem; consider the case for example where @code{find} is
 producing a list of files to be deleted.
 
 We normally assume that the @code{find} command line expresses the
 file selection criteria and actions that the user had in mind -- that
-is, the command line is ``trusted'' data.  
+is, the command line is ``trusted'' data.
 
 From a security analysis point of view, the output of @code{find}
 should be correct; that is, the output should contain only the names
@@ -3025,28 +4320,79 @@ On the other hand, the contents of the f
 by other people, and hence we regard this as ``untrusted'' data.  This
 implies that the @code{find} command line is a filter which converts
 the untrusted contents of the filesystem into a correct list of output
-files.   
+files.
 
 The filesystem will in general change while @code{find} is searching
 it; in fact, most of the potential security problems with @code{find}
 relate to this issue in some way.
 
-Race conditions are a general class of security problem where the
+@dfn{Race conditions} are a general class of security problem where the
 relative ordering of actions taken by @code{find} (for example) and
-something else are important@footnote{This is more or less the
-definition of the term ``race condition''} .  
+something else are critically important in getting the correct and expected result@footnote{This is more or less the
+definition of the term ``race condition''} .
 
-Typically, an attacker might move or rename files or directories in
-the hope that an action might be taken against a a file which was not
+For @code{find}, an attacker might move or rename files or directories in
+the hope that an action might be taken against a file which was not
 normally intended to be affected.  Alternatively, this sort of attack
 might be intended to persuade @code{find} to search part of the
 filesystem which would not normally be included in the search
-(defeating the @code{-prune} action for example).  
+(defeating the @code{-prune} action for example).
+
+@menu
+* Problems with -exec and filenames::
+* Changing the Current Working Directory::
+* Race Conditions with -exec::
+* Race Conditions with -print and -print0::
+@end menu
 
+@node Problems with -exec and filenames
+@subsection Problems with -exec and filenames
+
+It is safe in many cases to use the @samp{-execdir} action with any
+file name.  Because @samp{-execdir} prefixes the arguments it passes
+to programs with @samp{./}, you will not accidentally pass an argument
+which is interpreted as an option.  For example the file @file{-f}
+would be passed to @code{rm} as @file{./-f}, which is harmless.
+
+However, your degree of safety does depend on the nature of the
+program you are running.  For example constructs such as these two commands
+
+@example
+# risky
+find -exec sh -c "something @{@}" \;
+find -execdir sh -c "something @{@}" \;
+@end example
+
+are very dangerous.  The reason for this is that the @samp{@{@}} is
+expanded to a filename which might contain a semicolon or other
+characters special to the shell.  If for example someone creates the
+file @file{/tmp/foo; rm -rf $HOME} then the two commands above could
+delete someone's home directory.
+
+So for this reason do not run any command which will pass untrusted
+data (such as the names of files) to commands which interpret
+arguments as commands to be further interpreted (for example
+@samp{sh}).
+
+In the case of the shell, there is a clever workaround for this
+problem:
+
+@example
+# safer 
+find -exec sh -c 'something "$@@"' @{@} \;
+find -execdir sh -c 'something "$@@"' @{@}\;
+@end example
+
+This approach is not guaranteed to avoid every problem, but it is much
+safer than substituting data of an attacker's choice into the text of
+a shell command.
+
+@node Changing the Current Working Directory
 @subsection Changing the Current Working Directory
-As find searches the file system, it finds subdirectories and then
-searches within them by changing its working directory.  First,
-@code{find} notices a subdirectory.  It then decides if that
+
+As @code{find} searches the filesystem, it finds subdirectories and
+then searches within them by changing its working directory.  First,
+@code{find} reaches and recognises a subdirectory.  It then decides if that
 subdirectory meets the criteria for being searched; that is, any
 @samp{-xdev} or @samp{-prune} expressions are taken into account.  The
 @code{find} program will then change working directory and proceed to
@@ -3055,7 +4401,7 @@ search the directory.
 A race condition attack might take the form that once the checks
 relevant to @samp{-xdev} and @samp{-prune} have been done, an attacker
 might rename the directory that was being considered, and put in its
-place a symbolic link that actually points somewhere else.  
+place a symbolic link that actually points somewhere else.
 
 The idea behind this attack is to fool @code{find} into going into the
 wrong directory.  This would leave @code{find} with a working
@@ -3068,9 +4414,15 @@ will be run, as is the case with @code{c
 
 GNU @code{find} has specific safeguards to prevent this general class
 of problem.  The exact form of these safeguards depends on the
-properties of your system.  
+properties of your system.
+
+@menu
+* O_NOFOLLOW::                     Safely changing directory using fchdir().
+* Systems without O_NOFOLLOW::     Checking for symbolic links after chdir().
+@end menu
 
-@subsubsection O_FOLLOW 
+@node O_NOFOLLOW
+@subsubsection O_NOFOLLOW
 
 If your system supports the O_NOFOLLOW flag @footnote{GNU/Linux
 (kernel version 2.1.126 and later) and FreeBSD (3.0-CURRENT and later)
@@ -3085,7 +4437,7 @@ If for any reason this approach does not
 back on the method which is normally used if O_NOFOLLOW is not
 supported.
 
-You can tell if your system supports O_NOFOLLOW by running 
+You can tell if your system supports O_NOFOLLOW by running
 
 @example
 find --version
@@ -3098,76 +4450,68 @@ GNU find version 4.2.18-CVS
 Features enabled: D_TYPE O_NOFOLLOW(enabled)
 @end example
 
-Here, you can see that I am running a version of find which was built
-from the development (CVS) code prior to the release of
+Here, you can see that I am running a version of @code{find} which was
+built from the development (CVS) code prior to the release of
 findutils-4.2.18, and that the D_TYPE and O_NOFOLLOW features are
 present.  O_NOFOLLOW is qualified with ``enabled''.  This simply means
 that the current system seems to support O_NOFOLLOW.  This check is
-needed because it is possible to build find on a system that defines
-O_NOFOLLOW and then run it on a system that ignores the O_NOFOLLOW
-flag.  We try to detect such cases at startup by checking the
-operating system and version number; when this happens you will see
-``O_NOFOLLOW(disabled)'' instead.
+needed because it is possible to build @code{find} on a system that
+defines O_NOFOLLOW and then run it on a system that ignores the
+O_NOFOLLOW flag.  We try to detect such cases at startup by checking
+the operating system and version number; when this happens you will
+see ``O_NOFOLLOW(disabled)'' instead.
 
+@node Systems without O_NOFOLLOW
 @subsubsection Systems without O_NOFOLLOW
 
 The strategy for preventing this type of problem on systems that lack
 support for the O_NOFOLLOW flag is more complex.  Each time
 @code{find} changes directory, it examines the directory it is about
 to move to, issues the @code{chdir()} system call, and then checks
-that it has ended up in the subdirectory it expected.  If not, an
-error message is issued and @code{find} exits immediately.  This
-method also prevents filesystem manipulation attacks from persuading
-@code{find} to search parts of the filesystem it did not intend.
-However, we heve to take special steps in order not to be
-unneccessarily concluding that there is a problem aut ``automount''
-mount points.
-
-@subsubsection Working with automounters
-
-Where an automounter is in use on systems that do not support
-O_FOLLOW, it can be the case that the use of the @code{chdir()} system
-call can itself cause a new filesystem to be mounted at that point.
-This will cause @code{find}'s security check to fail.  However, this
-does not normally represent a security problem (since the automounter
-configuration is normally set up by the system administrator).
-Therefore, if the @code{chdir()} sanity check fails, @code{find} will
-check to see if a new filesystem has been mounted at the current
-directory; if so, @code{find} will issue a warning message and
-continue.
-
-To make this solution work, @code{find} reads the list of mounted
-filesystems at startup, and again when the sanity check fails.  It
-compares the two lists to find out if the directory it has moved into
-has just been mounted.
-
-@subsubsection Problems with Dead NFS servers.
-
-Examining every mount point on the system has a downside too.  In
-general, @code{find} will be used to search just part of the
-filesystem.  However, @code{find} examines every mount point.  If the
-system has a filesystem mounted on an unresponsive NFS server,
-@code{find} will hang, waiting for the NFS server to respond.  Worse,
-it does this even if the affected mount point is not within the
-directory tree that find would have searched anyway.
-
-This is very unfortunate.  However, this problem only affects systems
-that have no support for O_FOLLOW.  As far as I can tell, it is not
-possible on such systems to fix all three problems (the race
-condition, the false-alarm at automount mount points, and the hang at
-startup if there is a dead NFS server) at once.  If you have some
-ideas about how @code{find} could do this better, please send email to
-the @email{bug-findutils@@gnu.org} mailing list.
+that it has ended up in the subdirectory it expected.  If all is as
+expected, processing continues as normal.  However, there are two main
+reasons why the directory might change: the use of an automounter and
+the someone removing the old directory and replacing it with something
+else while @code{find} is trying to descend into it.
+
+Where a filesystem ``automounter'' is in use it can be the case that
+the use of the @code{chdir()} system call can itself cause a new
+filesystem to be mounted at that point.  On systems that do not
+support O_NOFOLLOW, this will cause @code{find}'s security check to
+fail.
+
+However, this does not normally represent a security problem, since
+the automounter configuration is normally set up by the system
+administrator.  Therefore, if the @code{chdir()} sanity check fails,
+@code{find} will make one more attempt@footnote{This may not be the
+case for the fts-based executable}.  If that succeeds, execution
+carries on as normal.  This is the usual case for automounters.
+
+Where an attacker is trying to exploit a race condition, the problem
+may not have gone away on the second attempt.  If this is the case,
+@code{find} will issue a warning message and then ignore that
+subdirectory.  When this happens, actions such as @samp{-exec} or
+@samp{-print} may already have taken place for the problematic
+subdirectory.  This is because @code{find} applies tests and actions
+to directories before searching within them (unless @samp{-depth} was
+specified).
+
+Because of the nature of the directory-change operation and security
+check, in the worst case the only things that @code{find} would have
+done with the directory are to move into it and back out to the
+original parent.  No operations would have been performed within that
+directory.
 
+@node Race Conditions with -exec
 @subsection Race Conditions with -exec
 
-The @samp{-exec} action causes another program to be run.  It is
-passed the name of the file which is being considered at the time.
-The invoked program will then - normally - perform some action on that
-file.  Once again, there is a race condition which can be exploited
-here.  We shall take as a specific example the command
+The @samp{-exec} action causes another program to be run.  It passes
+to the program the name of the file which is being considered at the
+time.  The invoked program will typically then perform some action
+on that file.  Once again, there is a race condition which can be
+exploited here.  We shall take as a specific example the command
 
-@example 
+@example
 find /tmp -path /tmp/umsp/passwd -exec /bin/rm
 @end example
 
@@ -3176,13 +4520,13 @@ and invoking @code{/bin/rm} to delete it
 there is a time gap between the point where @code{find} decides that
 it needs to process the @samp{-exec} action and the point where the
 @code{/bin/rm} command actually issues the @code{unlink()} system
-call.  Within this time period, an attacker can rename the
+call to delete the file from the filesystem.  Within this time period, an attacker can rename the
 @file{/tmp/umsp} directory, replacing it with a symbolic link to
-@file{/etc}.   There is no way for @code{/bin/rm} to determine that it
-is working on the same file that @code{find} had in mind.   Once the
+@file{/etc}.  There is no way for @code{/bin/rm} to determine that it
+is working on the same file that @code{find} had in mind.  Once the
 symbolic link is in place, the attacker has persuaded @code{find} to
 cause the deletion of the @file{/etc/passwd} file, which is not the
-effect intended by the command which was actually invoked.  
+effect intended by the command which was actually invoked.
 
 One possible defence against this type of attack is to modify the
 behaviour of @samp{-exec} so that the @code{/bin/rm} command is run
@@ -3190,10 +4534,10 @@ with the argument @file{./passwd} and a
 directory.  This would allow the normal sanity check that @code{find}
 performs to protect against this form of attack too.  Unfortunately,
 this strategy cannot be used as the POSIX standard specifies that the
-current working directory for commands invoked via @samp{-exec} must
+current working directory for commands invoked with @samp{-exec} must
 be the same as the current working directory from which @code{find}
-was invoked.   This means that the @samp{-exec} action is inherently
-insecure and can't be fixed.   
+was invoked.  This means that the @samp{-exec} action is inherently
+insecure and can't be fixed.
 
 GNU @code{find} implements a more secure variant of the @samp{-exec}
 action, @samp{-execdir}.  The @samp{-execdir} action
@@ -3212,24 +4556,25 @@ might be writable by untrusted users.  F
 @samp{-execdir} does not allow @samp{@{@}} to appear in the name of
 the command to be run.
 
+@node Race Conditions with -print and -print0
 @subsection Race Conditions with -print and -print0
 
 The @samp{-print} and @samp{-print0} actions can be used to produce a
 list of files matching some criteria, which can then be used with some
-other command, perhaps with @code{xargs}.   Unfortunately, this means
+other command, perhaps with @code{xargs}.  Unfortunately, this means
 that there is an unavoidable time gap between @code{find} deciding
 that one or more files meet its criteria and the relevant command
 being executed.  For this reason, the @samp{-print} and @samp{-print0}
 actions are just as insecure as @samp{-exec}.
 
-In fact, since the construction 
+In fact, since the construction
 
 @example
-find ....   -print | xargs ....
+find @dots{}  -print | xargs @enddots{}
 @end example
 
 does not cope correctly with newlines or other ``white space'' in
-filenames, and copes poorly with filenames containing quotes, the
+file names, and copes poorly with file names containing quotes, the
 @samp{-print} action is less secure even than @samp{-print0}.
 
 
@@ -3246,10 +4591,10 @@ has started but before @code{xargs} has
 However, there are other security issues that exist even if it is not
 possible for an attacker to have access to the filesystem in real
 time.  Firstly, if it is possible for an attacker to create files with
-names of their own choice on the filesystem, then @code{xargs} is
+names of their choice on the filesystem, then @code{xargs} is
 insecure unless the @samp{-0} option is used.  If a file with the name
 @file{/home/someuser/foo/bar\n/etc/passwd} exists (assume that
-@samp{\n} stands for a newline character), then @code{find ... -print}
+@samp{\n} stands for a newline character), then @code{find @dots{} -print}
 can be persuaded to print three separate lines:
 
 @example
@@ -3263,8 +4608,8 @@ Therefore, if some action is to be taken
 files, the @file{/etc/passwd} file would be included even if this was
 not the intent of the person running find.  There are circumstances in
 which an attacker can use this to their advantage.  The same
-consideration applies to filenames containing ordinary spaces rather
-than newlines, except that of course the list of filenames will no
+consideration applies to file names containing ordinary spaces rather
+than newlines, except that of course the list of file names will no
 longer contain an ``extra'' newline.
 
 This problem is an unavoidable consequence of the default behaviour of
@@ -3272,20 +4617,28 @@ the @code{xargs} command, which is speci
 The only ways to avoid this problem are either to avoid all use of
 @code{xargs} in favour for example of @samp{find -exec} or (where
 available) @samp{find -execdir}, or to use the @samp{-0} option, which
-ensures that @code{xargs} considers filenames to be separated by ASCII
-NUL characters rather than whitespace.   However, useful though this
+ensures that @code{xargs} considers file names to be separated by
+ASCII NUL characters rather than whitespace.  However, useful as this
 option is, the POSIX standard does not make it mandatory.
 
+POSIX also specifies that @code{xargs} interprets quoting and trailing
+whitespace specially in filenames, too.  This means that using
+@code{find ... -print | xargs ...} can cause the commands run by
+@code{xargs} to receive a list of file names which is not the same as
+the list printed by @code{find}.   The interpretation of quotes and
+trailing whitespace is turned off by the @samp{-0} argument to
+@code{xargs}, which is another reason to use that option.
+
 @comment  node-name,  next,  previous,  up
 @node Security Considerations for locate
 @section Security Considerations for @code{locate}
 
 It is fairly unusual for the output of @code{locate} to be fed into
 another command.  However, if this were to be done, this would raise
-the same set of security issues as the use of @samp{find ... -print}.
-Although the problems relating to whitespace in filenames can be
+the same set of security issues as the use of @samp{find @dots{} -print}.
+Although the problems relating to whitespace in file names can be
 resolved by using @code{locate}'s @samp{-0} option, this still leaves
-the race condition problems associated with @samp{find ... -print0}.
+the race condition problems associated with @samp{find @dots{} -print0}.
 There is no way to avoid these problems in the case of @code{locate}.
 
 @node Security Summary
@@ -3298,35 +4651,36 @@ following:
 
 @table @asis
 @item Informational use only
-Uses where the programs are used to prepare lists of filenames upon which no further action will ever be taken.
+Uses where the programs are used to prepare lists of file names upon
+which no further action will ever be taken.
 
-@item -delete 
-Use of the @samp{-delete} action to delete files which meet
-specified criteria
-
-@item -execdir 
-Use of the @samp{-execdir} action where the @env{PATH}
-environment variable contains directories which contain only trusted
-programs. 
+@item @samp{-delete}
+Use of the @samp{-delete} action with @code{find} to delete files
+which meet specified criteria
+
+@item @samp{-execdir}
+Use of the @samp{-execdir} action with @code{find} where the
+@env{PATH} environment variable contains directories which contain
+only trusted programs.
 @end table
 
 @comment  node-name,  next,  previous,  up
-@node Error Messages, Primary Index, Security Considerations, Top
+@node Error Messages
 @chapter Error Messages
 
-This section describes some of the error messages you might get from
+This section describes some of the error messages sometimes made by
 @code{find}, @code{xargs}, or @code{locate}, explains them and in some
 cases provides advice as to what you should do about this.
 
 This manual is written in English.  The GNU findutils software
-features translated error messages for many languages.  For this
-reason where possible we try to make the error messages produced by
-the programs self-explanatory.  This approach avoids asking people to
-figure out which English-language error message the test they actually
-saw might correspond to. Error messages which are self-explanatory
-will not normally be described or discussed in this document.  For
-those messages which are discussed in this document, only the
-English-language version of the message will be listed.
+features translations of error messages for many languages.  For this
+reason the error messages produced by the programs are made to be as
+self-explanatory as possible.  This approach avoids leaving people to
+figure out which test an English-language error message corresponds
+to.  Error messages which are self-explanatory will not normally be
+mentioned in this document.  For those messages mentioned in this
+document, only the English-language version of the message will be
+listed.
 
 @menu
 * Error Messages From find::
@@ -3335,15 +4689,15 @@ English-language version of the message
 * Error Messages From updatedb::
 @end menu
 
-@node Error Messages From find, Error Messages From xargs, , Error Messages
-@section Error Messages From find
+@node Error Messages From find
+@section Error Messages From @code{find}
 
 @table @samp
 @item invalid predicate `-foo'
 This means that the @code{find} command line included something that
 started with a dash or other special character.  The @code{find}
 program tried to interpret this as a test, action or option, but
-didn't recognise it.  If you intended it to be a test, check what you
+didn't recognise it.  If it was intended to be a test, check what was
 specified against the documentation.  If, on the other hand, the
 string is the name of a file which has been expanded from a wildcard
 (for example because you have a @samp{*} on the command line),
@@ -3358,10 +4712,10 @@ This usually happens if you have an extr
 These messages might appear when @code{find} moves into a directory
 and finds that the device number and inode are different to what it
 expected them to be.  If the directory @code{find} has moved into is
-on an NFS filesystem, it will not issue this message, because
+on an network filesystem (NFS), it will not issue this message, because
 @code{automount} frequently mounts new filesystems on directories as
 you move into them (that is how it knows you want to use the
-filesystem).  So, if you do see this message, be wary --
+filesystem).  So, if you do see this message, be wary ---
 @code{automount} may not have been responsible.  Consider the
 possibility that someone else is manipulating the filesystem while
 @code{find} is running.  Some people might do this in order to mislead
@@ -3369,21 +4723,15 @@ possibility that someone else is manipul
 it was looking at another set.
 
 @item /path/foo changed during execution of find (old device number 12345, new device number 6789, filesystem type is <whatever>) [ref XXX]
-This message is issued when @code{find} changes directory and ends up
+This message is issued when @code{find} moves into a directory and ends up
 somewhere it didn't expect to be.  This happens in one of two
-circumstances.  Firstly this happens when ``automount'' does its thing
-on a system where @code{find} doesn't know how to determine what the
-current set of mounted filesystems is@footnote{To do this, @code{find}
-requires to be able to use @code{getmntent()} - check the
-@file{config.h} file for HAVE_GETMNTENT, which should be #defined to
-1.  If HAVE_GETMNTENT is not set, consider submitting a problem report
-to @email{bug-findutils@@gnu.org}, because @code{find} needs to be
-able to figure out how to enumerate the mounted devices on your
-system}.
+circumstances.  Firstly, this happens when @code{automount} intervenes
+on a system where @code{find} doesn't know how to determine what
+the current set of mounted filesystems is.
 
 Secondly, this can happen when the device number of a directory
 appears to change during a change of current directory, but
-@code{find} is moving up the filesystem hierarchy rather than down it.
+@code{find} is moving up the filesystem hierarchy rather than down into it.
 In order to prevent @code{find} wandering off into some unexpected
 part of the filesystem, we stop it at this point.
 
@@ -3393,16 +4741,16 @@ system where @code{find} doesn't know ho
 list of mount points.  Ask for help on @email{bug-findutils@@gnu.org}.
 
 @item /path/foo/bar changed during execution of find (old inode number 12345, new inode number 67893, filesystem type is <whatever>) [ref XXX]"),
-This message is issued when @code{find} changes directory and
-discovers that the inode number of that directory once it's got there
-is different to the inode number that it obtained when it examined the
-directory some time previously.  This normally means that while
-@code{find} has been deep in a directory hierarchy doing something
-time consuming, somebody has moved the one of the parent directories
-to another location in the same filesystem.  This may have been done
-maliciously, or may not.  In any case, @code{find} stops at this point
-in order to avoid traversing parts of the filesystem that it wasn't
-intended to.  You can use @code{ls -li} or @code{find /path -inum
+This message is issued when @code{find} moves into a directory and
+discovers that the inode number of that directory
+is different from the inode number that it obtained when it examined the
+directory previously.  This usually means that while
+@code{find} was deep in a directory hierarchy doing a
+time consuming operation, somebody has moved one of the parent directories to
+another location in the same filesystem.  This may or may not have been done
+maliciously.  In any case, @code{find} stops at this point
+to avoid traversing parts of the filesystem that it wasn't
+intended.  You can use @code{ls -li} or @code{find /path -inum
 12345 -o -inum 67893} to find out more about what has happened.
 
 @item sanity check of the fnmatch() library function failed.
@@ -3414,38 +4762,42 @@ explanation is that your system has a bu
 @code{configure}, but which doesn't work properly.
 
 @item cannot fork
-This normally happens if you use the @code{-exec} action or a
+This normally happens if you use the @code{-exec} action or
 something similar (@code{-ok} and so forth) but the system has run out
 of free process slots.  This is either because the system is very busy
 and the system has reached its maximum process limit, or because you
 have a resource limit in place and you've reached it.  Check the
-system for runaway processes (if @code{ps} still works).  Some process
+system for runaway processes (with @code{ps}, if possible).  Some process
 slots are normally reserved for use by @samp{root}.
 
 @item some-program terminated by signal 99
-Some program which was launched via @code{-exec} or similar was killed
+Some program which was launched with @code{-exec} or similar was killed
 with a fatal signal.  This is just an advisory message.
 @end table
 
 
-
-@node Error Messages From xargs, Error Messages From locate, Error Messages From find, Error Messages
+@node Error Messages From xargs
 @section Error Messages From xargs
 
 @table @samp
 @item environment is too large for exec
-This message means that you have so many environment variables set
-(or such large values for them) that there is no room within the
-system-imposed limits on program command-line argument length to
-invoke any program.  I'm sure you did this deliberately.  Please try
-unsetting some environment variables, or exiting the current shell.
+This message means that you have so many environment variables set (or
+such large values for them) that there is no room within the
+system-imposed limits on program command line argument length to
+invoke any program.  This is an unlikely situation and is more likely
+result of an attempt to test the limits of @code{xargs}, or break it.
+Please try unsetting some environment variables, or exiting the
+current shell.  You can also use @samp{xargs --show-limits} to
+understand the relevant sizes.
 
 @item can not fit single argument within argument list size limit
-You are using the @samp{-i} option and @code{xargs} doesn't have
-enough space to build a command line because it has read in a really
+You are using the @samp{-I} option and @code{xargs} doesn't have
+enough space to build a command line because it has read a really
 large item and it doesn't fit.  You can probably work around this
 problem with the @samp{-s} option, but the default size is pretty
-large.  You must be trying pretty hard to break @code{xargs}.
+large.  This is a rare situation and is more likely an attempt to test
+the limits of @code{xargs}, or break it.  Otherwise, you will need to
+try to shorten the problematic argument or not use @code{xargs}.
 
 @item cannot fork
 See the description of the similar message for @code{find}.
@@ -3460,16 +4812,17 @@ return status 255.
 See the description of the similar message for @code{find}.
 @end table
 
-@node Error Messages From locate, Error Messages From updatedb, Error Messages From xargs, Error Messages
-@section Error Messages From locate
+@node Error Messages From locate
+@section Error Messages From @code{locate}
 
 @table @samp
 @item warning: database `/usr/local/var/locatedb' is more than 8 days old
 The @code{locate} program relies on a database which is periodically
 built by the @code{updatedb} program.  That hasn't happened in a long
 time.  To fix this problem, run @code{updatedb} manually.  This can
-often happen on systems that are generally not left on, so the periodic
-``cron'' task which normally does this doesn't get a chance to run.
+often happen on systems that are generally not left on, so the
+periodic ``cron'' task which normally does this doesn't get a chance
+to run.
 
 @item locate database `/usr/local/var/locatedb' is corrupt or invalid
 This should not happen.  Re-run @code{updatedb}.  If that works, but
@@ -3483,15 +4836,16 @@ these programs should interoperate witho
 @end table
 
 
-@node Error Messages From updatedb, , Error Messages From locate, Error Messages
+@node Error Messages From updatedb
 @section Error Messages From updatedb
 
 The @code{updatedb} program (and the programs it invokes) do issue
-error messages, but none of them seem to me to be candidates for
-guidance.  If you are having a problem understanding one of these, ask
-for help on @email{bug-findutils@@gnu.org}.
+error messages, but none seem to be candidates for guidance.  If
+you are having a problem understanding one of these, ask for help on
+@email{bug-findutils@@gnu.org}.
 
-@node Primary Index, , Error Messages, Top
+
+@node Primary Index
 @unnumbered @code{find} Primary Index
 
 This is a list of all of the primaries (tests, actions, and options)
@@ -3534,4 +4888,3 @@ Expressions}, for more information on ex
 @comment LocalWords: su Timar ubins ug unstripped vf VM Weitzel
 @comment LocalWords: wildcard zlogout basename execdir wholename iwholename
 @comment LocalWords: timestamp timestamps Solaris FreeBSD OpenBSD POSIX
-
Only in dbg/find6/find/doc: getdate.texi
Only in dbg/find6/find/doc: .gitignore
diff -up -r dbg/find14/find/doc/Makefile.am dbg/find6/find/doc/Makefile.am
