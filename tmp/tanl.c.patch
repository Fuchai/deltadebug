--- dbg/find14/find/gnulib-cvs/gnulib/lib/tanl.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/tanl.c	2020-01-28 23:39:42.000000000 -0600
@@ -14,6 +14,11 @@
  * ====================================================
  */
 
+#include <config.h>
+
+/* Specification.  */
+#include <math.h>
+
 /* tanl(x)
  * Return tangent function of x.
  *
@@ -44,16 +49,13 @@
  *	TRIG(x) returns trig(x) nearly rounded
  */
 
-#include <math.h>
-
-#include "mathl.h"
-
 #include "trigl.h"
 #ifdef HAVE_SINL
 #ifdef HAVE_COSL
 #include "trigl.c"
 #endif
 #endif
+#include "isnanl.h"
 
 /*
  * ====================================================
@@ -125,13 +127,13 @@ kernel_tanl (long double x, long double
   long double z, r, v, w, s, u, u1;
   int flag, sign;
 
-	sign = 1;
-      if (x < 0)
-	{
-	  x = -x;
-	  y = -y;
-	  sign = -1;
-	}
+  sign = 1;
+  if (x < 0)
+    {
+      x = -x;
+      y = -y;
+      sign = -1;
+    }
 
   if (x < 0.000000000000000006938893903907228377647697925567626953125L) /* x < 2**-57 */
     {
@@ -190,13 +192,17 @@ tanl (long double x)
   long double y[2], z = 0.0L;
   int n;
 
+  /* tanl(NaN) is NaN */
+  if (isnanl (x))
+    return x;
+
   /* |x| ~< pi/4 */
   if (x >= -0.7853981633974483096156608458198757210492 &&
       x <= 0.7853981633974483096156608458198757210492)
     return kernel_tanl (x, z, 1);
 
-  /* tanl(Inf or NaN) is NaN, tanl(0) is 0 */
-  else if (x + x == x || x != x)
+  /* tanl(Inf) is NaN, tanl(0) is 0 */
+  else if (x + x == x)
     return x - x;		/* NaN */
 
   /* argument reduction needed */
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/tempname.c dbg/find6/find/gnulib-cvs/gnulib/lib/tempname.c
