--- dbg/find14/find/gnulib-cvs/gnulib/lib/settime.c	2020-01-28 23:47:42.000000000 -0600
+++ dbg/find6/find/gnulib-cvs/gnulib/lib/settime.c	2020-01-28 23:39:42.000000000 -0600
@@ -1,5 +1,7 @@
 /* settime -- set the system clock
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+
+   Copyright (C) 2002, 2004, 2005, 2006, 2007 Free Software
+   Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -13,19 +15,16 @@
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
-   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
 
 /* Written by Paul Eggert.  */
 
-#ifdef HAVE_CONFIG_H
-# include <config.h>
-#endif
+#include <config.h>
 
 #include "timespec.h"
 
-#if HAVE_UNISTD_H
-# include <unistd.h>
-#endif
+#include <sys/time.h>
+#include <unistd.h>
 
 #include <errno.h>
 
@@ -55,17 +54,15 @@ settime (struct timespec const *ts)
 #if HAVE_SETTIMEOFDAY
   {
     struct timeval tv;
-    int r;
 
     tv.tv_sec = ts->tv_sec;
     tv.tv_usec = ts->tv_nsec / 1000;
-    r = settimeofday (&tv, 0);
-    if (r == 0 || errno == EPERM)
-      return r;
+    return settimeofday (&tv, 0);
   }
-#endif
-
-#if HAVE_STIME
+#elif HAVE_STIME
+  /* This fails to compile on OSF1 V5.1, due to stime requiring
+     a `long int*' and tv_sec is `int'.  But that system does provide
+     settimeofday.  */
   return stime (&ts->tv_sec);
 #else
   errno = ENOSYS;
diff -up -r dbg/find14/find/gnulib-cvs/gnulib/lib/sha1.c dbg/find6/find/gnulib-cvs/gnulib/lib/sha1.c
