--- demodir/yesterday/mcts.py	2019-12-13 16:22:23.000000000 -0600
+++ demodir/today/mcts.py	2019-11-29 23:50:49.000000000 -0600
@@ -53,38 +50,32 @@ class MCTS:
                 self.simulation()
                 # if simulation % 40 == 0 and self.debug:
                     # print("Simulation " + str(simulation) + " /" + str(self.simulations_per_play))
-            # if self.debug:
-                # t1 = time.time()
-                # print("Time per play: " + str(t1 - t0))
-                # self.permaTree.root.checker_state.print_board()
+            if self.debug:
+                t1 = time.time()
+                print("Time per play: " + str(t1 - t0))
+                self.permaTree.root.checker_state.print_board()
             terminal = self.play()
             if terminal:
                 print("Terminated at step", step)
                 break
 
         # there will be an outcome whether the game reaches terminal or not
-        # final_state = self.permaTree.root.checker_state
-        # outcome = final_state.evaluate()
-        #
-        # if outcome == 0:
-        #     z = 0
-        # else:
-        #     # truth table:
-        #     #      flipped  not flipped
-        #     # o>0    -1          1
-        #     # o<0     1         -1
-        #
-        #     a = final_state.flipped
-        #     b = outcome > 0
-        #     z = a ^ b
-        #     z = z * 2 - 1
-        #
-        # if z==1:
-        #     print("Won.")
-        #     self.permaTree.root.checker_state.print_board()
+        final_state = self.permaTree.root.checker_state
+        outcome = final_state.evaluate()
 
-        final_node=self.permaTree.root
-        z=self.find_winner(final_node)
+        # TODO not continuous outcome currently
+        if outcome == 0:
+            z = 0
+        else:
+            # truth table:
+            #      flipped  not flipped
+            # o>0    -1          1
+            # o<0     1         -1
+
+            a = final_state.flipped
+            b = outcome > 0
+            z = a ^ b
+            z = z * 2 - 1
 
         # assign z
         for ts in self.time_steps:
